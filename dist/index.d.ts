export { ChemicalEquationBalancer } from './balancer';
export { Stoichiometry } from './stoichiometry';
export { ElementCounter, EquationParser, calculateMolarWeight } from './utils';
export * from './types';
export * from './constants';
export { type ChemicalFormula, type ElementSymbol, type BalancedEquationString, type SMILESNotation, type InChINotation, type CASNumber, type ValidElement, type TypedElementCount, type TypedCompound, type TypedReaction, type ReactionType, type PhaseState, isChemicalFormula, isElementSymbol, isBalancedEquation, parseFormula, createChemicalFormula, createElementSymbol, ChemicalFormulaError, EquationBalancingError } from './advancedTypes';
export { EnhancedBalancer } from './enhancedBalancerSimple';
export { EnhancedChemicalEquationBalancer, type EnhancedBalancedEquation, type CompoundInfo } from './enhancedBalancer';
export { EnhancedStoichiometry, type EnhancedStoichiometryResult, type ReactionAnalysis } from './enhancedStoichiometry';
export { ThermodynamicsCalculator, ThermodynamicsEquationBalancer, EnergyProfileGenerator, createEnergyProfile, exportEnergyProfile, type ThermodynamicsResult, type ReactionConditions, type ThermodynamicProperties, type TemperatureProfile, type EnergyProfile, type EnergyProfilePoint, type TransitionState, type ReactionCoordinate, type BondChange } from './thermodynamics';
export { ReactionKinetics, MechanismAnalyzer, ReactionSafetyAnalyzer, AdvancedKineticsAnalyzer, type ArrheniusData, type KineticsResult, type CatalystData, type MechanismStep, type MechanismAnalysis, type PathwayComparison, type SafetyData, type ToxicityData, type ReactivityData, type ReactionSafetyAssessment, type ThermalHazard, type ChemicalHazard, type PhysicalHazard, type EnvironmentalHazard, type SafetyRecommendation, type ReactionClass, type RateLawType } from './kinetics';
export { ChemicalDatabaseManager, NISTWebBookIntegration, DataValidationService, type CompoundDatabase, type ExtendedThermodynamicProperties, type PhysicalProperties, type SafetyProperties, type DatabaseSource, type DatabaseQuery, type DataImportResult, type DataExportOptions, type ValidationResult, type ValidationError, type ValidationWarning, type DatabaseProvider } from './data';
export { Container, ServiceLifetime, CircularDependencyError, ServiceNotFoundError, MaxDepthExceededError, createToken, container, type ServiceToken, type ServiceFactory, type Constructor, type ServiceRegistration, type ContainerOptions, type ContainerMetrics, type IDisposable } from './core/Container';
export { Injectable, Inject, Optional, Singleton, Transient, getInjectableMetadata, isInjectable, getDependencyTokens, type InjectableMetadata, type InjectableOptions, INJECTABLE_METADATA_KEY } from './core/decorators/Injectable';
export { setupCREBContainer, initializeCREBDI, getService, createChildContainer, CREBServices, IConfigManagerToken, IBalancerToken, IEnhancedBalancerToken, IStoichiometryToken, IThermodynamicsCalculatorToken, IStorageProviderToken, ICacheToken, IWorkerPoolToken, ITaskQueueToken, } from './DISetup';
export { CREBError, ValidationError as CREBValidationError, NetworkError, ExternalAPIError, ComputationError, SystemError, ErrorAggregator, ErrorUtils, ErrorCategory, ErrorSeverity, type ErrorContext, type ErrorMetadata } from './core/errors/CREBError';
export { CircuitBreaker, CircuitBreakerManager, circuitBreakerManager, WithCircuitBreaker, CircuitBreakerState, type CircuitBreakerConfig, type CircuitBreakerMetrics } from './core/resilience/CircuitBreaker';
export { RetryPolicy, RetryPolicies, RateLimiter, WithRetry, createRetryPolicy, RetryStrategy, type RetryConfig, type RetryMetrics, type RetryResult } from './core/resilience/RetryPolicy';
export { EnhancedNISTIntegration, EnhancedPubChemIntegration, EnhancedSQLiteStorage, SystemHealthMonitor, GracefulDegradationService, demonstrateEnhancedErrorHandling } from './core/ErrorHandlingIntegrationExample';
export { ConfigManager, configManager, getConfig, setConfig, getFullConfig } from './config/ConfigManager';
export { type CREBConfig, type PartialCREBConfig, type CacheConfig, type PerformanceConfig, type DataConfig, type LoggingConfig, type ConfigValidationResult, type ConfigChangeEvent, type ConfigPath, type ConfigValueType, isCREBConfig } from './config/types';
export { defaultConfig, validateConfig, generateSchemaDocumentation } from './config/schemas/validation';
export { AdvancedCache, CacheFactory, CachedThermodynamicsCalculator, CachedChemicalDatabase, CachedEquationBalancer, MultiLevelCache, demonstrateAdvancedCaching } from './performance/cache/CacheIntegration';
export { type AdvancedCacheConfig, type CacheEntry, type CacheResult, type CacheEventListener, type CacheEvent, type CacheMetrics, type CacheStats, type EvictionStrategy, type CacheEventType, type EvictionPolicy, type IAdvancedCache, type CacheFactoryConfig, type MultiLevelCacheConfig } from './performance/cache/types';
export { LRUEvictionPolicy, LFUEvictionPolicy, FIFOEvictionPolicy, TTLEvictionPolicy, RandomEvictionPolicy, AdaptiveEvictionPolicy, EvictionPolicyFactory } from './performance/cache/EvictionPolicies';
export { CREBWorkerManager, WorkerPool, TaskQueue, TaskBuilder, WorkerPerformanceMonitor, createWorkerManager, createCriticalTask, createBatchTasks } from './performance/workers';
export { type WorkerTask, type TaskResult, type WorkerPoolConfig, type WorkerPoolMetrics, type WorkerHealthMetrics, type TaskPriority, type TaskStatus, type WorkerStatus, type CalculationType, type WorkerError, type WorkerInstance, type TaskExecution, type QueueStats, type PerformanceBenchmark, type EquationBalancingTask, type ThermodynamicsTask, type BatchAnalysisTask, type MatrixSolvingTask, type RecoveryConfig, type WorkerId, type TaskId, createWorkerId, createTaskId } from './performance/workers/types';
//# sourceMappingURL=index.d.ts.map