{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/core/errors/CREBError.ts","../src/utils.ts","../src/core/decorators/Injectable.ts","../src/balancer.ts","../src/stoichiometry.ts","../src/visualization/Molecular2DGenerator.ts","../src/visualization/Canvas2DRenderer.ts","../src/visualization/SVGRenderer.ts","../src/visualization/SimplifiedMolecularVisualization.ts","../src/visualization/RDKitWrapper.ts","../src/visualization/Mol3DWrapper.ts","../src/visualization/PubChemIntegration.ts","../src/visualization/EnhancedMolecularVisualization.ts","../src/visualization/index.ts","../src/advancedTypes.ts","../src/enhancedBalancerSimple.ts","../src/performance/cache/EvictionPolicies.ts","../src/performance/cache/CacheMetrics.ts","../src/performance/cache/AdvancedCache.ts","../src/data/validation/types.ts","../src/data/validation/ValidationPipeline.ts","../src/data/validation/validators/BaseValidator.ts","../src/data/validation/validators/ChemicalFormulaValidator.ts","../src/data/validation/validators/ThermodynamicPropertiesValidator.ts","../src/data/validation/metrics/ValidationMetricsDashboard.ts","../src/data/validation/index.ts","../src/enhancedBalancer.ts","../src/enhancedStoichiometry.ts","../src/thermodynamics/calculator.ts","../src/thermodynamics/thermodynamicsBalancer.ts","../src/thermodynamics/energyProfile.ts","../src/kinetics/calculator.ts","../src/kinetics/mechanismAnalyzer.ts","../src/kinetics/safetyAnalyzer.ts","../src/kinetics/index.ts","../src/data/ChemicalDatabaseManager.ts","../src/data/NISTIntegration.ts","../src/data/DataValidationService.ts","../src/data/SQLiteStorageProvider.ts","../src/core/Container.ts","../src/config/schemas/validation.ts","../src/config/ConfigManager.ts","../src/DISetup.ts","../src/core/resilience/CircuitBreaker.ts","../src/core/resilience/RetryPolicy.ts","../src/core/ErrorHandlingIntegrationExample.ts","../src/config/types.ts","../src/performance/cache/CacheIntegration.ts","../src/performance/workers/types.ts","../src/performance/workers/TaskQueue.ts","../src/performance/workers/WorkerPool.ts","../src/performance/workers/index.ts","../src/plugins/types.ts","../src/plugins/APIContext.ts","../src/plugins/PluginManager.ts","../src/plugins/Plugin.ts","../src/plugins/examples.ts","../src/core/telemetry/types.ts","../src/core/telemetry/Context.ts","../src/core/telemetry/Metrics.ts","../src/core/telemetry/Logger.ts","../src/core/telemetry/index.ts"],"sourcesContent":["/**\n * Chemical elements and their atomic masses\n * Data from the original CREB project's Assets.py\n */\n\nexport const ELEMENTS_LIST: string[] = [\n  'H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne',\n  'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca',\n  'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn',\n  'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr',\n  'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn',\n  'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd',\n  'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb',\n  'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg',\n  'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th',\n  'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm',\n  'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds',\n  'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og'\n];\n\nexport const PERIODIC_TABLE: Record<string, number> = {\n  'H': 1.008,\n  'He': 4.0026,\n  'Li': 6.94,\n  'Be': 9.0122,\n  'B': 10.81,\n  'C': 12.011,\n  'N': 14.007,\n  'O': 15.999,\n  'F': 18.998,\n  'Ne': 20.18,\n  'Na': 22.99,\n  'Mg': 24.305,\n  'Al': 26.982,\n  'Si': 28.085,\n  'P': 30.974,\n  'S': 32.06,\n  'Cl': 35.45,\n  'Ar': 39.948,\n  'K': 39.098,\n  'Ca': 40.078,\n  'Sc': 44.956,\n  'Ti': 47.867,\n  'V': 50.942,\n  'Cr': 51.996,\n  'Mn': 54.938,\n  'Fe': 55.845,\n  'Co': 58.933,\n  'Ni': 58.693,\n  'Cu': 63.546,\n  'Zn': 65.38,\n  'Ga': 69.723,\n  'Ge': 72.63,\n  'As': 74.922,\n  'Se': 78.971,\n  'Br': 79.904,\n  'Kr': 83.798,\n  'Rb': 85.468,\n  'Sr': 87.62,\n  'Y': 88.906,\n  'Zr': 91.224,\n  'Nb': 92.906,\n  'Mo': 95.95,\n  'Tc': 98.0,\n  'Ru': 101.07,\n  'Rh': 102.91,\n  'Pd': 106.42,\n  'Ag': 107.87,\n  'Cd': 112.41,\n  'In': 114.82,\n  'Sn': 118.71,\n  'Sb': 121.76,\n  'Te': 127.6,\n  'I': 126.9,\n  'Xe': 131.29,\n  'Cs': 132.91,\n  'Ba': 137.33,\n  'La': 138.91,\n  'Ce': 140.12,\n  'Pr': 140.91,\n  'Nd': 144.24,\n  'Pm': 145.0,\n  'Sm': 150.36,\n  'Eu': 151.96,\n  'Gd': 157.25,\n  'Tb': 158.93,\n  'Dy': 162.5,\n  'Ho': 164.93,\n  'Er': 167.26,\n  'Tm': 168.93,\n  'Yb': 173.04,\n  'Lu': 175.0,\n  'Hf': 178.49,\n  'Ta': 180.95,\n  'W': 183.84,\n  'Re': 186.21,\n  'Os': 190.23,\n  'Ir': 192.22,\n  'Pt': 195.08,\n  'Au': 196.97,\n  'Hg': 200.59,\n  'Tl': 204.38,\n  'Pb': 207.2,\n  'Bi': 208.98,\n  'Po': 209.0,\n  'At': 210.0,\n  'Rn': 222.0,\n  'Fr': 223.0,\n  'Ra': 226.0,\n  'Ac': 227.0,\n  'Th': 232.04,\n  'Pa': 231.04,\n  'U': 238.03,\n  'Np': 237.0,\n  'Pu': 244.0,\n  'Am': 243.0,\n  'Cm': 247.0,\n  'Bk': 247.0,\n  'Cf': 251.0,\n  'Es': 252.0,\n  'Fm': 257.0,\n  'Md': 258.0,\n  'No': 259.0,\n  'Lr': 262.0,\n  'Rf': 267.0,\n  'Db': 270.0,\n  'Sg': 271.0,\n  'Bh': 270.0,\n  'Hs': 277.0,\n  'Mt': 276.0,\n  'Ds': 281.0,\n  'Rg': 282.0,\n  'Cn': 285.0,\n  'Nh': 286.0,\n  'Fl': 289.0,\n  'Mc': 290.0,\n  'Lv': 293.0,\n  'Ts': 294.0,\n  'Og': 294.0\n};\n\nexport const PARAMETER_SYMBOLS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n","/**\n * Enhanced Error Handling for CREB-JS\n * Provides structured error types with context, stack traces, and error classification\n */\n\nexport enum ErrorCategory {\n  VALIDATION = 'VALIDATION',\n  NETWORK = 'NETWORK',\n  COMPUTATION = 'COMPUTATION',\n  DATA = 'DATA',\n  SYSTEM = 'SYSTEM',\n  EXTERNAL_API = 'EXTERNAL_API',\n  TIMEOUT = 'TIMEOUT',\n  RATE_LIMIT = 'RATE_LIMIT',\n  AUTHENTICATION = 'AUTHENTICATION',\n  PERMISSION = 'PERMISSION'\n}\n\nexport enum ErrorSeverity {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL'\n}\n\nexport interface ErrorContext {\n  [key: string]: any;\n  timestamp?: Date;\n  correlationId?: string;\n  userId?: string;\n  operation?: string;\n  component?: string;\n  version?: string;\n}\n\nexport interface ErrorMetadata {\n  category: ErrorCategory;\n  severity: ErrorSeverity;\n  retryable: boolean;\n  errorCode: string;\n  correlationId: string;\n  context: ErrorContext;\n  timestamp: Date;\n  stackTrace?: string;\n  innerError?: Error;\n  sugggestedAction?: string;\n}\n\n/**\n * Base CREB Error class with enhanced context and metadata\n */\nexport class CREBError extends Error {\n  public readonly metadata: ErrorMetadata;\n\n  constructor(\n    message: string,\n    category: ErrorCategory,\n    severity: ErrorSeverity = ErrorSeverity.MEDIUM,\n    context: ErrorContext = {},\n    options: {\n      retryable?: boolean;\n      errorCode?: string;\n      correlationId?: string;\n      innerError?: Error;\n      suggestedAction?: string;\n    } = {}\n  ) {\n    super(message);\n    this.name = 'CREBError';\n\n    // Ensure proper prototype chain for instanceof checks\n    Object.setPrototypeOf(this, CREBError.prototype);\n\n    this.metadata = {\n      category,\n      severity,\n      retryable: options.retryable ?? this.isRetryableByDefault(category),\n      errorCode: options.errorCode ?? this.generateErrorCode(category),\n      correlationId: options.correlationId ?? this.generateCorrelationId(),\n      context: {\n        ...context,\n        timestamp: new Date(),\n        version: '1.6.0'\n      },\n      timestamp: new Date(),\n      stackTrace: this.stack,\n      innerError: options.innerError,\n      sugggestedAction: options.suggestedAction\n    };\n\n    // Capture stack trace for V8 engines\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CREBError);\n    }\n  }\n\n  /**\n   * Serialize error for logging and telemetry\n   */\n  public toJSON(): Record<string, any> {\n    return {\n      name: this.name,\n      message: this.message,\n      metadata: {\n        ...this.metadata,\n        innerError: this.metadata.innerError?.message\n      }\n    };\n  }\n\n  /**\n   * Create a sanitized version for client-side consumption\n   */\n  public toClientSafe(): Record<string, any> {\n    return {\n      message: this.message,\n      category: this.metadata.category,\n      severity: this.metadata.severity,\n      errorCode: this.metadata.errorCode,\n      correlationId: this.metadata.correlationId,\n      retryable: this.metadata.retryable,\n      suggestedAction: this.metadata.sugggestedAction\n    };\n  }\n\n  /**\n   * Check if error is retryable based on category and context\n   */\n  public isRetryable(): boolean {\n    return this.metadata.retryable;\n  }\n\n  /**\n   * Get human-readable error description\n   */\n  public getDescription(): string {\n    const parts = [\n      `[${this.metadata.category}:${this.metadata.severity}]`,\n      this.message\n    ];\n\n    if (this.metadata.sugggestedAction) {\n      parts.push(`Suggestion: ${this.metadata.sugggestedAction}`);\n    }\n\n    return parts.join(' ');\n  }\n\n  private isRetryableByDefault(category: ErrorCategory): boolean {\n    const retryableCategories = [\n      ErrorCategory.NETWORK,\n      ErrorCategory.TIMEOUT,\n      ErrorCategory.RATE_LIMIT,\n      ErrorCategory.EXTERNAL_API\n    ];\n    return retryableCategories.includes(category);\n  }\n\n  private generateErrorCode(category: ErrorCategory): string {\n    const timestamp = Date.now().toString(36);\n    const random = Math.random().toString(36).substring(2, 8);\n    return `${category}_${timestamp}_${random}`.toUpperCase();\n  }\n\n  private generateCorrelationId(): string {\n    return `creb_${Date.now()}_${Math.random().toString(36).substring(2, 12)}`;\n  }\n}\n\n/**\n * Validation Error - for input validation failures\n */\nexport class ValidationError extends CREBError {\n  constructor(\n    message: string,\n    context: ErrorContext = {},\n    options: { field?: string; value?: any; constraint?: string } = {}\n  ) {\n    super(\n      message,\n      ErrorCategory.VALIDATION,\n      ErrorSeverity.MEDIUM,\n      {\n        ...context,\n        field: options.field,\n        value: options.value,\n        constraint: options.constraint\n      },\n      {\n        retryable: false,\n        suggestedAction: 'Please check the input parameters and try again'\n      }\n    );\n    this.name = 'ValidationError';\n  }\n}\n\n/**\n * Network Error - for network-related failures\n */\nexport class NetworkError extends CREBError {\n  constructor(\n    message: string,\n    context: ErrorContext = {},\n    options: { \n      statusCode?: number; \n      url?: string; \n      method?: string;\n      timeout?: number;\n    } = {}\n  ) {\n    super(\n      message,\n      ErrorCategory.NETWORK,\n      ErrorSeverity.HIGH,\n      {\n        ...context,\n        statusCode: options.statusCode,\n        url: options.url,\n        method: options.method,\n        timeout: options.timeout\n      },\n      {\n        retryable: true,\n        suggestedAction: 'Check network connectivity and try again'\n      }\n    );\n    this.name = 'NetworkError';\n  }\n}\n\n/**\n * External API Error - for third-party API failures\n */\nexport class ExternalAPIError extends CREBError {\n  constructor(\n    message: string,\n    apiName: string,\n    context: ErrorContext = {},\n    options: {\n      statusCode?: number;\n      responseBody?: string;\n      endpoint?: string;\n      rateLimited?: boolean;\n    } = {}\n  ) {\n    const severity = options.rateLimited ? ErrorSeverity.MEDIUM : ErrorSeverity.HIGH;\n    const category = options.rateLimited ? ErrorCategory.RATE_LIMIT : ErrorCategory.EXTERNAL_API;\n    \n    super(\n      message,\n      category,\n      severity,\n      {\n        ...context,\n        apiName,\n        statusCode: options.statusCode,\n        responseBody: options.responseBody,\n        endpoint: options.endpoint\n      },\n      {\n        retryable: options.rateLimited || (!!options.statusCode && options.statusCode >= 500),\n        suggestedAction: options.rateLimited \n          ? 'Rate limit exceeded. Please wait before retrying'\n          : 'External service unavailable. Please try again later'\n      }\n    );\n    this.name = 'ExternalAPIError';\n  }\n}\n\n/**\n * Computation Error - for calculation failures\n */\nexport class ComputationError extends CREBError {\n  constructor(\n    message: string,\n    context: ErrorContext = {},\n    options: {\n      algorithm?: string;\n      input?: any;\n      expectedRange?: string;\n    } = {}\n  ) {\n    super(\n      message,\n      ErrorCategory.COMPUTATION,\n      ErrorSeverity.MEDIUM,\n      {\n        ...context,\n        algorithm: options.algorithm,\n        input: options.input,\n        expectedRange: options.expectedRange\n      },\n      {\n        retryable: false,\n        suggestedAction: 'Please verify input parameters and calculation constraints'\n      }\n    );\n    this.name = 'ComputationError';\n  }\n}\n\n/**\n * System Error - for internal system failures\n */\nexport class SystemError extends CREBError {\n  constructor(\n    message: string,\n    context: ErrorContext = {},\n    options: {\n      subsystem?: string;\n      resource?: string;\n    } = {}\n  ) {\n    super(\n      message,\n      ErrorCategory.SYSTEM,\n      ErrorSeverity.CRITICAL,\n      {\n        ...context,\n        subsystem: options.subsystem,\n        resource: options.resource\n      },\n      {\n        retryable: false,\n        suggestedAction: 'Internal system error. Please contact support'\n      }\n    );\n    this.name = 'SystemError';\n  }\n}\n\n/**\n * Error aggregation utility for collecting and analyzing multiple errors\n */\nexport class ErrorAggregator {\n  private errors: CREBError[] = [];\n  private readonly maxErrors: number;\n\n  constructor(maxErrors: number = 100) {\n    this.maxErrors = maxErrors;\n  }\n\n  /**\n   * Add an error to the aggregator\n   */\n  public addError(error: CREBError): void {\n    this.errors.push(error);\n    \n    // Keep only the most recent errors\n    if (this.errors.length > this.maxErrors) {\n      this.errors.shift();\n    }\n  }\n\n  /**\n   * Get errors by category\n   */\n  public getErrorsByCategory(category: ErrorCategory): CREBError[] {\n    return this.errors.filter(error => error.metadata.category === category);\n  }\n\n  /**\n   * Get errors by severity\n   */\n  public getErrorsBySeverity(severity: ErrorSeverity): CREBError[] {\n    return this.errors.filter(error => error.metadata.severity === severity);\n  }\n\n  /**\n   * Get error statistics\n   */\n  public getStatistics(): {\n    total: number;\n    byCategory: Record<ErrorCategory, number>;\n    bySeverity: Record<ErrorSeverity, number>;\n    retryableCount: number;\n    recentErrors: CREBError[];\n  } {\n    const byCategory = {} as Record<ErrorCategory, number>;\n    const bySeverity = {} as Record<ErrorSeverity, number>;\n    let retryableCount = 0;\n\n    // Initialize counters\n    Object.values(ErrorCategory).forEach(cat => byCategory[cat] = 0);\n    Object.values(ErrorSeverity).forEach(sev => bySeverity[sev] = 0);\n\n    // Count errors\n    this.errors.forEach(error => {\n      byCategory[error.metadata.category]++;\n      bySeverity[error.metadata.severity]++;\n      if (error.isRetryable()) {\n        retryableCount++;\n      }\n    });\n\n    return {\n      total: this.errors.length,\n      byCategory,\n      bySeverity,\n      retryableCount,\n      recentErrors: this.errors.slice(-10) // Last 10 errors\n    };\n  }\n\n  /**\n   * Clear all collected errors\n   */\n  public clear(): void {\n    this.errors = [];\n  }\n\n  /**\n   * Get all errors as JSON for logging\n   */\n  public toJSON(): Record<string, any>[] {\n    return this.errors.map(error => error.toJSON());\n  }\n}\n\n/**\n * Utility functions for error handling\n */\nexport class ErrorUtils {\n  /**\n   * Wrap a function with error handling and transformation\n   */\n  static withErrorHandling<T extends any[], R>(\n    fn: (...args: T) => R,\n    errorTransformer?: (error: any) => CREBError\n  ): (...args: T) => R {\n    return (...args: T): R => {\n      try {\n        return fn(...args);\n      } catch (error) {\n        throw errorTransformer ? errorTransformer(error) : ErrorUtils.transformUnknownError(error);\n      }\n    };\n  }\n\n  /**\n   * Wrap an async function with error handling and transformation\n   */\n  static withAsyncErrorHandling<T extends any[], R>(\n    fn: (...args: T) => Promise<R>,\n    errorTransformer?: (error: any) => CREBError\n  ): (...args: T) => Promise<R> {\n    return async (...args: T): Promise<R> => {\n      try {\n        return await fn(...args);\n      } catch (error) {\n        throw errorTransformer ? errorTransformer(error) : ErrorUtils.transformUnknownError(error);\n      }\n    };\n  }\n\n  /**\n   * Transform unknown errors into CREBError instances\n   */\n  static transformUnknownError(error: any): CREBError {\n    if (error instanceof CREBError) {\n      return error;\n    }\n\n    if (error instanceof Error) {\n      return new SystemError(\n        error.message,\n        { originalError: error.name },\n        { subsystem: 'unknown' }\n      );\n    }\n\n    return new SystemError(\n      typeof error === 'string' ? error : 'Unknown error occurred',\n      { originalError: error }\n    );\n  }\n\n  /**\n   * Check if an error indicates a transient failure\n   */\n  static isTransientError(error: any): boolean {\n    if (error instanceof CREBError) {\n      return error.isRetryable();\n    }\n\n    // Common patterns for transient errors\n    const transientPatterns = [\n      /timeout/i,\n      /connection/i,\n      /network/i,\n      /503/,\n      /502/,\n      /504/,\n      /rate limit/i\n    ];\n\n    const message = error?.message || String(error);\n    return transientPatterns.some(pattern => pattern.test(message));\n  }\n}\n","import { PERIODIC_TABLE } from './constants';\nimport { ElementCount } from './types';\nimport { ValidationError } from './core/errors/CREBError';\n\n/**\n * Utility functions for chemical formula parsing and calculations\n */\n\n/**\n * Counts elements in a chemical formula\n * Based on the ElementCounter class from the original CREB project\n */\nexport class ElementCounter {\n  private formula: string;\n\n  constructor(chemicalFormula: string) {\n    this.formula = chemicalFormula;\n  }\n\n  /**\n   * Parses the chemical formula and returns element counts\n   * Handles parentheses and multipliers\n   */\n  parseFormula(): ElementCount {\n    let formula = this.formula;\n    \n    // Expand parentheses\n    while (formula.includes('(')) {\n      formula = formula.replace(/\\(([^()]+)\\)(\\d*)/g, (match, group, multiplier) => {\n        const mult = multiplier ? parseInt(multiplier) : 1;\n        return this.expandGroup(group, mult);\n      });\n    }\n\n    // Count elements\n    const elementCounts: ElementCount = {};\n    const matches = formula.match(/([A-Z][a-z]*)(\\d*)/g) || [];\n    \n    for (const match of matches) {\n      const elementMatch = match.match(/([A-Z][a-z]*)(\\d*)/);\n      if (elementMatch) {\n        const element = elementMatch[1];\n        const count = elementMatch[2] ? parseInt(elementMatch[2]) : 1;\n        elementCounts[element] = (elementCounts[element] || 0) + count;\n      }\n    }\n\n    return elementCounts;\n  }\n\n  private expandGroup(group: string, multiplier: number): string {\n    const matches = group.match(/([A-Z][a-z]*)(\\d*)/g) || [];\n    let expanded = '';\n    \n    for (const match of matches) {\n      const elementMatch = match.match(/([A-Z][a-z]*)(\\d*)/);\n      if (elementMatch) {\n        const element = elementMatch[1];\n        const count = elementMatch[2] ? parseInt(elementMatch[2]) : 1;\n        const newCount = count * multiplier;\n        expanded += element + (newCount > 1 ? newCount : '');\n      }\n    }\n    \n    return expanded;\n  }\n}\n\n/**\n * Parses a chemical equation into reactants and products\n * Based on the EquationParser class from the original CREB project\n */\nexport class EquationParser {\n  private equation: string;\n  private equationSplitter = '=';\n  private speciesSplitter = '+';\n\n  constructor(chemicalEquation: string) {\n    this.equation = chemicalEquation.replace(/\\s/g, ''); // Remove all spaces\n  }\n\n  /**\n   * Parses the equation and returns structured data\n   */\n  parse() {\n    const { reactants, products } = this.splitIntoSpecies();\n    const parsedReactants = this.parseSpecies(reactants);\n    const parsedProducts = this.parseSpecies(products);\n\n    return {\n      reactants,\n      products,\n      parsedReactants,\n      parsedProducts\n    };\n  }\n\n  private splitIntoSpecies() {\n    // Check if equation is empty or only whitespace\n    if (!this.equation || this.equation.length === 0) {\n      throw new ValidationError(\n        'Empty equation provided. Please enter a valid chemical equation.',\n        { equation: this.equation, operation: 'equation_parsing' }\n      );\n    }\n    \n    const sides = this.equation.split(this.equationSplitter);\n    if (sides.length !== 2) {\n      throw new ValidationError(\n        'Invalid equation format. Must contain exactly one \"=\" sign.',\n        { equation: this.equation, sides: sides.length, operation: 'equation_parsing' }\n      );\n    }\n    \n    // Check if either side is empty\n    if (!sides[0].trim() || !sides[1].trim()) {\n      throw new ValidationError(\n        'Both sides of the equation must contain chemical species.',\n        { equation: this.equation, leftSide: sides[0], rightSide: sides[1], operation: 'equation_parsing' }\n      );\n    }\n\n    const cleanSpecies = (speciesString: string): string[] => {\n      return speciesString.split(this.speciesSplitter)\n        .map(species => species.trim())\n        .filter(species => species.length > 0)\n        .map(species => {\n          // Remove existing coefficients (numbers at the beginning)\n          return species.replace(/^\\d+\\s*/, '');\n        });\n    };\n\n    const reactants = cleanSpecies(sides[0]);\n    const products = cleanSpecies(sides[1]);\n\n    return { reactants, products };\n  }\n\n  private parseSpecies(species: string[]) {\n    const parsed: { [species: string]: ElementCount } = {};\n    \n    for (const specie of species) {\n      const counter = new ElementCounter(specie);\n      parsed[specie] = counter.parseFormula();\n    }\n    \n    return parsed;\n  }\n}\n\n/**\n * Calculates molar weight of a chemical formula\n */\nexport function calculateMolarWeight(formula: string): number {\n  const counter = new ElementCounter(formula);\n  const elementCounts = counter.parseFormula();\n  \n  let molarWeight = 0;\n  for (const element in elementCounts) {\n    if (!(element in PERIODIC_TABLE)) {\n      throw new ValidationError(\n        `Unknown element: ${element}`,\n        { element, formula, operation: 'molar_weight_calculation' }\n      );\n    }\n    molarWeight += elementCounts[element] * PERIODIC_TABLE[element];\n  }\n  \n  return parseFloat(molarWeight.toFixed(3));\n}\n\n/**\n * Gets all unique elements present in a reaction\n */\nexport function getElementsInReaction(parsedReactants: any, parsedProducts: any): string[] {\n  const elements = new Set<string>();\n  \n  // Add elements from reactants\n  Object.values(parsedReactants).forEach((species: any) => {\n    Object.keys(species).forEach(element => elements.add(element));\n  });\n  \n  // Add elements from products\n  Object.values(parsedProducts).forEach((species: any) => {\n    Object.keys(species).forEach(element => elements.add(element));\n  });\n  \n  return Array.from(elements);\n}\n","/**\n * Injectable decorator and related types for dependency injection\n * \n * Provides decorators and metadata for automatic dependency injection\n * in the CREB-JS container system.\n * \n * @author Loganathane Virassamy\n * @version 1.6.0\n */\n\nimport 'reflect-metadata';\n\n/**\n * Service lifetime enumeration\n */\nexport enum ServiceLifetime {\n  Singleton = 'singleton',\n  Transient = 'transient',\n}\n\n/**\n * Injectable metadata interface\n */\nexport interface InjectableMetadata {\n  dependencies?: any[];\n  lifetime?: ServiceLifetime;\n  token?: string | symbol;\n}\n\n/**\n * Injectable decorator options\n */\nexport interface InjectableOptions {\n  lifetime?: ServiceLifetime;\n  token?: string | symbol;\n}\n\n/**\n * Metadata key for injectable services\n */\nexport const INJECTABLE_METADATA_KEY = Symbol.for('injectable');\n\n/**\n * Metadata key for constructor parameters\n */\nexport const PARAM_TYPES_METADATA_KEY = 'design:paramtypes';\n\n/**\n * Injectable class decorator\n * \n * Marks a class as injectable and provides metadata for dependency injection.\n * \n * @param options Optional configuration for the injectable service\n */\nexport function Injectable(options: InjectableOptions = {}) {\n  return function <T extends new (...args: any[]) => any>(constructor: T): T {\n    // Get constructor parameter types from TypeScript compiler\n    const paramTypes = Reflect.getMetadata(PARAM_TYPES_METADATA_KEY, constructor) || [];\n    \n    // Create injectable metadata\n    const metadata: InjectableMetadata = {\n      dependencies: paramTypes,\n      lifetime: options.lifetime || ServiceLifetime.Transient,\n      token: options.token,\n    };\n\n    // Store metadata on the constructor\n    Reflect.defineMetadata(INJECTABLE_METADATA_KEY, metadata, constructor);\n\n    return constructor;\n  };\n}\n\n/**\n * Inject decorator for constructor parameters\n * \n * Explicitly specifies the token to inject for a constructor parameter.\n * Useful when TypeScript reflection doesn't provide enough information.\n * \n * @param token The service token to inject\n */\nexport function Inject(token: any) {\n  return function (target: any, propertyKey: string | symbol | undefined, parameterIndex: number) {\n    const existingMetadata = Reflect.getMetadata(INJECTABLE_METADATA_KEY, target) || {};\n    const dependencies = existingMetadata.dependencies || [];\n    \n    // Ensure dependencies array is large enough\n    while (dependencies.length <= parameterIndex) {\n      dependencies.push(undefined);\n    }\n    \n    // Set the specific dependency\n    dependencies[parameterIndex] = token;\n    \n    // Update metadata\n    const updatedMetadata: InjectableMetadata = {\n      ...existingMetadata,\n      dependencies,\n    };\n    \n    Reflect.defineMetadata(INJECTABLE_METADATA_KEY, updatedMetadata, target);\n  };\n}\n\n/**\n * Optional decorator for constructor parameters\n * \n * Marks a dependency as optional, allowing injection to succeed\n * even if the service is not registered.\n * \n * @param defaultValue Optional default value to use if service is not found\n */\nexport function Optional(defaultValue?: any) {\n  return function (target: any, propertyKey: string | symbol | undefined, parameterIndex: number) {\n    const existingMetadata = Reflect.getMetadata(INJECTABLE_METADATA_KEY, target) || {};\n    const optionalDependencies = existingMetadata.optionalDependencies || new Set();\n    \n    optionalDependencies.add(parameterIndex);\n    \n    const updatedMetadata: InjectableMetadata = {\n      ...existingMetadata,\n      optionalDependencies,\n      defaultValues: {\n        ...existingMetadata.defaultValues,\n        [parameterIndex]: defaultValue,\n      },\n    };\n    \n    Reflect.defineMetadata(INJECTABLE_METADATA_KEY, updatedMetadata, target);\n  };\n}\n\n/**\n * Get injectable metadata from a constructor\n */\nexport function getInjectableMetadata(constructor: any): InjectableMetadata | undefined {\n  return Reflect.getMetadata(INJECTABLE_METADATA_KEY, constructor);\n}\n\n/**\n * Check if a constructor is marked as injectable\n */\nexport function isInjectable(constructor: any): boolean {\n  return Reflect.hasMetadata(INJECTABLE_METADATA_KEY, constructor);\n}\n\n/**\n * Helper function to extract dependency tokens from a constructor\n */\nexport function getDependencyTokens(constructor: any): any[] {\n  const metadata = getInjectableMetadata(constructor);\n  if (!metadata) {\n    return [];\n  }\n  \n  return metadata.dependencies || [];\n}\n\n/**\n * Self-binding token type for auto-registration\n */\nexport const SELF = Symbol('SELF');\n\n/**\n * Factory for creating injectable class decorators with specific lifetimes\n */\nexport const Singleton = (options: Omit<InjectableOptions, 'lifetime'> = {}) =>\n  Injectable({ ...options, lifetime: ServiceLifetime.Singleton });\n\nexport const Transient = (options: Omit<InjectableOptions, 'lifetime'> = {}) =>\n  Injectable({ ...options, lifetime: ServiceLifetime.Transient });\n\n/**\n * Auto-registration helper for common patterns\n */\nexport interface AutoRegisterOptions {\n  lifetime?: ServiceLifetime;\n  token?: any;\n  as?: any[];\n}\n\n/**\n * Auto-register decorator that combines Injectable with container registration\n * This is a convenience decorator for common registration patterns\n */\nexport function AutoRegister(options: AutoRegisterOptions = {}) {\n  return function <T extends new (...args: any[]) => any>(constructor: T): T {\n    // First make it injectable\n    const injectable = Injectable({\n      lifetime: options.lifetime,\n      token: options.token,\n    });\n    \n    const decoratedConstructor = injectable(constructor);\n    \n    // Store auto-registration metadata for later processing\n    const autoRegisterMetadata = {\n      constructor: decoratedConstructor,\n      options,\n    };\n    \n    Reflect.defineMetadata('auto-register', autoRegisterMetadata, decoratedConstructor);\n    \n    return decoratedConstructor;\n  };\n}\n\n/**\n * Get auto-registration metadata\n */\nexport function getAutoRegisterMetadata(constructor: any) {\n  return Reflect.getMetadata('auto-register', constructor);\n}\n\n/**\n * Type guard for checking if a value is a constructor\n */\nexport function isConstructor(value: any): value is new (...args: any[]) => any {\n  return typeof value === 'function' && value.prototype && value.prototype.constructor === value;\n}\n","import { EquationParser, getElementsInReaction } from './utils';\nimport { EquationData, LinearSystem, BalancedEquation } from './types';\nimport { ComputationError } from './core/errors/CREBError';\nimport { Injectable } from './core/decorators/Injectable';\n\n/**\n * Linear equation system generator and solver\n * Based on the Generator and FileMaker classes from the original CREB project\n */\nexport class LinearEquationSolver {\n  private equationData: EquationData;\n  private allSpecies: string[];\n  private elements: string[];\n\n  constructor(chemicalEquation: string) {\n    const parser = new EquationParser(chemicalEquation);\n    this.equationData = parser.parse();\n    this.allSpecies = [...this.equationData.reactants, ...this.equationData.products];\n    this.elements = getElementsInReaction(\n      this.equationData.parsedReactants,\n      this.equationData.parsedProducts\n    );\n  }\n\n  /**\n   * Generates the system of linear equations representing the chemical balance\n   */\n  generateLinearSystem(): LinearSystem {\n    const equations = [];\n    \n    // Create one equation for each element\n    for (const element of this.elements) {\n      const coefficients = [];\n      \n      // For each species in the reaction\n      for (const species of this.allSpecies) {\n        let coefficient = 0;\n        \n        // Check if this species contains the current element\n        if (this.equationData.reactants.includes(species)) {\n          // Reactants have positive coefficients\n          const elementCount = this.equationData.parsedReactants[species][element] || 0;\n          coefficient = elementCount;\n        } else if (this.equationData.products.includes(species)) {\n          // Products have negative coefficients\n          const elementCount = this.equationData.parsedProducts[species][element] || 0;\n          coefficient = -elementCount;\n        }\n        \n        coefficients.push(coefficient);\n      }\n      \n      equations.push({\n        coefficients,\n        constant: 0 // All equations equal zero (balanced)\n      });\n    }\n\n    return {\n      equations,\n      variables: this.allSpecies.map((_, i) => `x${i}`)\n    };\n  }\n\n  /**\n   * Solves the linear system to find coefficients\n   */\n  solve(): number[] {\n    const system = this.generateLinearSystem();\n    \n    // For simple equations, try a brute force approach with small integer coefficients\n    const maxCoeff = 10;\n    const numSpecies = this.allSpecies.length;\n    \n    // Try different combinations of coefficients\n    for (let attempt = 1; attempt <= maxCoeff; attempt++) {\n      const coefficients = this.findCoefficients(system, attempt);\n      if (coefficients) {\n        return coefficients;\n      }\n    }\n    \n    throw new ComputationError(\n      'Unable to balance equation: Could not find integer coefficients',\n      { maxCoeff, numSpecies, operation: 'equation_balancing' }\n    );\n  }\n\n  /**\n   * Tries to find valid coefficients using a systematic approach\n   */\n  private findCoefficients(system: LinearSystem, maxVal: number): number[] | null {\n    const numSpecies = this.allSpecies.length;\n    \n    // Generate all possible combinations\n    const generateCombinations = (length: number, max: number): number[][] => {\n      const results: number[][] = [];\n      \n      const generate = (current: number[], remaining: number) => {\n        if (remaining === 0) {\n          results.push([...current]);\n          return;\n        }\n        \n        for (let i = 1; i <= max; i++) {\n          current.push(i);\n          generate(current, remaining - 1);\n          current.pop();\n        }\n      };\n      \n      generate([], length);\n      return results;\n    };\n    \n    const combinations = generateCombinations(numSpecies, maxVal);\n    \n    for (const coeffs of combinations) {\n      if (this.checkBalance(system, coeffs)) {\n        return coeffs;\n      }\n    }\n    \n    return null;\n  }\n\n  /**\n   * Checks if given coefficients balance the equation\n   */\n  private checkBalance(system: LinearSystem, coefficients: number[]): boolean {\n    for (const equation of system.equations) {\n      let sum = 0;\n      for (let i = 0; i < coefficients.length; i++) {\n        sum += equation.coefficients[i] * coefficients[i];\n      }\n      if (Math.abs(sum) > 1e-10) { // Allow for small floating point errors\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Normalizes coefficients to positive integers\n   */\n  private normalizeCoefficients(coefficients: number[]): number[] {\n    // Convert to positive numbers\n    const positiveCoeffs = coefficients.map(c => Math.abs(c));\n    \n    // Find a common denominator and convert to integers\n    const precision = 1000; // For handling decimal coefficients\n    const intCoeffs = positiveCoeffs.map(c => Math.round(c * precision));\n    \n    // Find GCD and simplify\n    const gcd = this.findGCD(intCoeffs.filter(c => c !== 0));\n    const simplified = intCoeffs.map(c => c / gcd);\n    \n    // Ensure all coefficients are at least 1\n    const minCoeff = Math.min(...simplified.filter(c => c > 0));\n    const scaled = simplified.map(c => Math.round(c / minCoeff));\n    \n    return scaled.map(c => c === 0 ? 1 : c);\n  }\n\n  /**\n   * Finds the greatest common divisor of an array of numbers\n   */\n  private findGCD(numbers: number[]): number {\n    const gcdTwo = (a: number, b: number): number => {\n      return b === 0 ? a : gcdTwo(b, a % b);\n    };\n    \n    return numbers.reduce((acc, num) => gcdTwo(acc, Math.abs(num)));\n  }\n}\n\n/**\n * Chemical equation balancer\n * Based on the main CREB functionality\n */\n@Injectable()\nexport class ChemicalEquationBalancer {\n  /**\n   * Balances a chemical equation and returns the balanced equation string\n   */\n  balance(equation: string): string {\n    try {\n      const solver = new LinearEquationSolver(equation);\n      const coefficients = solver.solve();\n      \n      const parser = new EquationParser(equation);\n      const { reactants, products } = parser.parse();\n      \n      return this.formatBalancedEquation(reactants, products, coefficients);\n    } catch (error) {\n      throw new ComputationError(\n        `Failed to balance equation \"${equation}\": ${error}`,\n        { equation, operation: 'equation_balancing', originalError: error }\n      );\n    }\n  }\n\n  /**\n   * Balances a chemical equation and returns detailed result\n   */\n  balanceDetailed(equation: string): BalancedEquation {\n    const solver = new LinearEquationSolver(equation);\n    const coefficients = solver.solve();\n    \n    const parser = new EquationParser(equation);\n    const { reactants, products } = parser.parse();\n    \n    return {\n      equation: this.formatBalancedEquation(reactants, products, coefficients),\n      coefficients,\n      reactants,\n      products\n    };\n  }\n\n  private formatBalancedEquation(reactants: string[], products: string[], coefficients: number[]): string {\n    const formatSide = (species: string[], startIndex: number): string => {\n      return species.map((specie, index) => {\n        const coeff = coefficients[startIndex + index];\n        return coeff === 1 ? specie : `${coeff} ${specie}`;\n      }).join(' + ');\n    };\n\n    const reactantSide = formatSide(reactants, 0);\n    const productSide = formatSide(products, reactants.length);\n    \n    return `${reactantSide} = ${productSide}`;\n  }\n}\n","import { calculateMolarWeight, EquationParser } from './utils';\nimport { ChemicalEquationBalancer } from './balancer';\nimport { StoichiometryResult, SpeciesData } from './types';\nimport { ValidationError } from './core/errors/CREBError';\nimport { Injectable } from './core/decorators/Injectable';\n\n/**\n * Stoichiometry calculator\n * Based on the Stoichiometry class from the original CREB project\n */\n@Injectable()\nexport class Stoichiometry {\n  private equation?: string;\n  private reactants: string[] = [];\n  private products: string[] = [];\n  private coefficients: number[] = [];\n  private balancer: ChemicalEquationBalancer;\n\n  constructor(equation?: string) {\n    this.balancer = new ChemicalEquationBalancer();\n    \n    if (equation) {\n      this.equation = equation;\n      this.initializeFromEquation(equation);\n    }\n  }\n\n  private initializeFromEquation(equation: string) {\n    // First, parse the raw equation (without coefficients) to get species names\n    const rawParser = new EquationParser(equation);\n    const rawData = rawParser.parse();\n    \n    // Balance the equation to get coefficients\n    const balanced = this.balancer.balanceDetailed(equation);\n    this.reactants = rawData.reactants;\n    this.products = rawData.products;\n    this.coefficients = balanced.coefficients;\n  }\n\n  /**\n   * Calculates the molar weight of a chemical formula\n   */\n  calculateMolarWeight(formula: string): number {\n    return calculateMolarWeight(formula);\n  }\n\n  /**\n   * Calculates stoichiometric ratios relative to a selected species\n   */\n  calculateRatios(selectedSpecies: string): number[] {\n    if (!this.equation) {\n      throw new ValidationError(\n        'No equation provided. Initialize with an equation first.',\n        { operation: 'calculateRatios', selectedSpecies },\n        { field: 'equation', value: this.equation, constraint: 'must be initialized' }\n      );\n    }\n\n    const allSpecies = [...this.reactants, ...this.products];\n    const selectedIndex = allSpecies.indexOf(selectedSpecies);\n    \n    if (selectedIndex === -1) {\n      const availableSpecies = allSpecies.join(', ');\n      throw new ValidationError(\n        `Species \"${selectedSpecies}\" not found in the equation. Available species: ${availableSpecies}`,\n        { selectedSpecies, availableSpecies: allSpecies },\n        { field: 'selectedSpecies', value: selectedSpecies, constraint: `must be one of: ${availableSpecies}` }\n      );\n    }\n\n    const selectedCoefficient = this.coefficients[selectedIndex];\n    return this.coefficients.map(coeff => coeff / selectedCoefficient);\n  }\n\n  /**\n   * Performs stoichiometric calculations starting from moles\n   */\n  calculateFromMoles(selectedSpecies: string, moles: number): StoichiometryResult {\n    if (!this.equation) {\n      throw new ValidationError(\n        'No equation provided. Initialize with an equation first.',\n        { operation: 'calculateFromMoles', selectedSpecies, moles },\n        { field: 'equation', value: this.equation, constraint: 'must be initialized' }\n      );\n    }\n\n    const ratios = this.calculateRatios(selectedSpecies);\n    const allSpecies = [...this.reactants, ...this.products];\n    \n    const result: StoichiometryResult = {\n      reactants: {},\n      products: {},\n      totalMolarMass: { reactants: 0, products: 0 }\n    };\n\n    // Calculate for all species\n    allSpecies.forEach((species, index) => {\n      const speciesMoles = ratios[index] * moles;\n      const molarWeight = this.calculateMolarWeight(species);\n      const grams = speciesMoles * molarWeight;\n\n      const speciesData: SpeciesData = {\n        moles: parseFloat(speciesMoles.toFixed(3)),\n        grams: parseFloat(grams.toFixed(3)),\n        molarWeight: molarWeight\n      };\n\n      if (this.reactants.includes(species)) {\n        result.reactants[species] = speciesData;\n        result.totalMolarMass.reactants += grams;\n      } else {\n        result.products[species] = speciesData;\n        result.totalMolarMass.products += grams;\n      }\n    });\n\n    // Round total molar masses\n    result.totalMolarMass.reactants = parseFloat(result.totalMolarMass.reactants.toFixed(3));\n    result.totalMolarMass.products = parseFloat(result.totalMolarMass.products.toFixed(3));\n\n    return result;\n  }\n\n  /**\n   * Performs stoichiometric calculations starting from grams\n   */\n  calculateFromGrams(selectedSpecies: string, grams: number): StoichiometryResult {\n    if (!this.equation) {\n      throw new ValidationError(\n        'No equation provided. Initialize with an equation first.',\n        { operation: 'calculateFromGrams', selectedSpecies, grams },\n        { field: 'equation', value: this.equation, constraint: 'must be initialized' }\n      );\n    }\n\n    const molarWeight = this.calculateMolarWeight(selectedSpecies);\n    const moles = grams / molarWeight;\n    \n    return this.calculateFromMoles(selectedSpecies, moles);\n  }\n\n  /**\n   * Gets the balanced equation\n   */\n  getBalancedEquation(): string {\n    if (!this.equation) {\n      throw new ValidationError(\n        'No equation provided.',\n        { operation: 'getBalancedEquation' },\n        { field: 'equation', value: this.equation, constraint: 'must be initialized' }\n      );\n    }\n    return this.balancer.balance(this.equation);\n  }\n\n  /**\n   * Gets all species in the reaction with their molar weights\n   */\n  getSpeciesInfo(): { [species: string]: { molarWeight: number; type: 'reactant' | 'product' } } {\n    const result: { [species: string]: { molarWeight: number; type: 'reactant' | 'product' } } = {};\n    \n    this.reactants.forEach(species => {\n      result[species] = {\n        molarWeight: this.calculateMolarWeight(species),\n        type: 'reactant'\n      };\n    });\n\n    this.products.forEach(species => {\n      result[species] = {\n        molarWeight: this.calculateMolarWeight(species),\n        type: 'product'\n      };\n    });\n\n    return result;\n  }\n\n  /**\n   * Static method to calculate molar weight without instantiating the class\n   */\n  static calculateMolarWeight(formula: string): number {\n    return calculateMolarWeight(formula);\n  }\n}\n","/**\n * Advanced 2D Molecular Structure Generator\n * Generates chemically accurate 2D coordinates for molecular visualization\n */\n\nexport interface Atom3D {\n  element: string;\n  x: number;\n  y: number;\n  z: number;\n  hybridization?: 'sp' | 'sp2' | 'sp3';\n  aromatic?: boolean;\n}\n\nexport interface Bond3D {\n  atom1: number;\n  atom2: number;\n  order: 1 | 2 | 3;\n  type: 'single' | 'double' | 'triple' | 'aromatic';\n  stereo?: 'up' | 'down' | 'either';\n}\n\nexport interface Ring {\n  atoms: number[];\n  aromatic: boolean;\n  size: number;\n}\n\n/**\n * Professional 2D molecular coordinate generator\n * Following standard chemical drawing conventions\n */\nexport class Molecular2DGenerator {\n  private static readonly BOND_LENGTH = 40; // Standard bond length in pixels\n  private static readonly AROMATIC_RING_RADIUS = 25;\n  private static readonly ANGLE_120 = (2 * Math.PI) / 3; // 120° for aromatic\n  private static readonly ANGLE_109 = 1.9106; // 109.5° tetrahedral angle\n\n  /**\n   * Generate caffeine structure with proper coordinates\n   */\n  static generateCaffeine(): { atoms: Atom3D[]; bonds: Bond3D[]; rings: Ring[] } {\n    const bondLength = this.BOND_LENGTH;\n    \n    // Caffeine: C8H10N4O2 - purine ring system with methyl substituents\n    const atoms: Atom3D[] = [\n      // Purine ring system (6-membered ring fused with 5-membered ring)\n      // 6-membered ring\n      { element: 'N', x: 200, y: 150, z: 0, hybridization: 'sp2', aromatic: true }, // 0\n      { element: 'C', x: 240, y: 130, z: 0, hybridization: 'sp2', aromatic: true }, // 1\n      { element: 'N', x: 280, y: 150, z: 0, hybridization: 'sp2', aromatic: true }, // 2\n      { element: 'C', x: 280, y: 190, z: 0, hybridization: 'sp2', aromatic: true }, // 3\n      { element: 'C', x: 240, y: 210, z: 0, hybridization: 'sp2', aromatic: true }, // 4\n      { element: 'C', x: 200, y: 190, z: 0, hybridization: 'sp2', aromatic: true }, // 5\n      \n      // 5-membered ring (fused)\n      { element: 'N', x: 160, y: 170, z: 0, hybridization: 'sp2', aromatic: true }, // 6\n      { element: 'C', x: 160, y: 210, z: 0, hybridization: 'sp2', aromatic: true }, // 7\n      { element: 'N', x: 200, y: 230, z: 0, hybridization: 'sp2', aromatic: true }, // 8\n      \n      // Carbonyl oxygens\n      { element: 'O', x: 240, y: 100, z: 0, hybridization: 'sp2' }, // 9 (C=O at position 2)\n      { element: 'O', x: 320, y: 200, z: 0, hybridization: 'sp2' }, // 10 (C=O at position 6)\n      \n      // Methyl groups\n      { element: 'C', x: 120, y: 150, z: 0, hybridization: 'sp3' }, // 11 (N1-methyl)\n      { element: 'C', x: 320, y: 130, z: 0, hybridization: 'sp3' }, // 12 (N3-methyl)\n      { element: 'C', x: 240, y: 270, z: 0, hybridization: 'sp3' }, // 13 (N7-methyl)\n      \n      // Hydrogens (implicit in most chemical drawings, but included for completeness)\n      { element: 'H', x: 100, y: 140, z: 0 }, // 14\n      { element: 'H', x: 100, y: 160, z: 0 }, // 15\n      { element: 'H', x: 110, y: 170, z: 0 }, // 16\n      { element: 'H', x: 340, y: 120, z: 0 }, // 17\n      { element: 'H', x: 340, y: 140, z: 0 }, // 18\n      { element: 'H', x: 330, y: 110, z: 0 }, // 19\n      { element: 'H', x: 260, y: 280, z: 0 }, // 20\n      { element: 'H', x: 220, y: 280, z: 0 }, // 21\n      { element: 'H', x: 230, y: 290, z: 0 }, // 22\n      { element: 'H', x: 130, y: 210, z: 0 }  // 23 (H on C8)\n    ];\n\n    const bonds: Bond3D[] = [\n      // 6-membered ring bonds\n      { atom1: 0, atom2: 1, order: 1, type: 'aromatic' },\n      { atom1: 1, atom2: 2, order: 1, type: 'aromatic' },\n      { atom1: 2, atom2: 3, order: 1, type: 'aromatic' },\n      { atom1: 3, atom2: 4, order: 1, type: 'aromatic' },\n      { atom1: 4, atom2: 5, order: 1, type: 'aromatic' },\n      { atom1: 5, atom2: 0, order: 1, type: 'aromatic' },\n      \n      // 5-membered ring bonds\n      { atom1: 5, atom2: 6, order: 1, type: 'aromatic' },\n      { atom1: 6, atom2: 7, order: 1, type: 'aromatic' },\n      { atom1: 7, atom2: 8, order: 1, type: 'aromatic' },\n      { atom1: 8, atom2: 4, order: 1, type: 'aromatic' },\n      \n      // Carbonyl bonds\n      { atom1: 1, atom2: 9, order: 2, type: 'double' }, // C=O\n      { atom1: 3, atom2: 10, order: 2, type: 'double' }, // C=O\n      \n      // Methyl attachments\n      { atom1: 0, atom2: 11, order: 1, type: 'single' }, // N1-methyl\n      { atom1: 2, atom2: 12, order: 1, type: 'single' }, // N3-methyl\n      { atom1: 8, atom2: 13, order: 1, type: 'single' }, // N7-methyl\n      \n      // Hydrogen bonds\n      { atom1: 11, atom2: 14, order: 1, type: 'single' },\n      { atom1: 11, atom2: 15, order: 1, type: 'single' },\n      { atom1: 11, atom2: 16, order: 1, type: 'single' },\n      { atom1: 12, atom2: 17, order: 1, type: 'single' },\n      { atom1: 12, atom2: 18, order: 1, type: 'single' },\n      { atom1: 12, atom2: 19, order: 1, type: 'single' },\n      { atom1: 13, atom2: 20, order: 1, type: 'single' },\n      { atom1: 13, atom2: 21, order: 1, type: 'single' },\n      { atom1: 13, atom2: 22, order: 1, type: 'single' },\n      { atom1: 7, atom2: 23, order: 1, type: 'single' }\n    ];\n\n    const rings: Ring[] = [\n      { atoms: [0, 1, 2, 3, 4, 5], aromatic: true, size: 6 },\n      { atoms: [5, 6, 7, 8, 4], aromatic: true, size: 5 }\n    ];\n\n    return { atoms, bonds, rings };\n  }\n\n  /**\n   * Generate benzene with proper hexagonal geometry\n   */\n  static generateBenzene(): { atoms: Atom3D[]; bonds: Bond3D[]; rings: Ring[] } {\n    const centerX = 200;\n    const centerY = 180;\n    const radius = this.AROMATIC_RING_RADIUS;\n    \n    const atoms: Atom3D[] = [];\n    const bonds: Bond3D[] = [];\n    \n    // Generate hexagonal ring\n    for (let i = 0; i < 6; i++) {\n      const angle = (i * Math.PI) / 3; // 60° intervals\n      const x = centerX + radius * Math.cos(angle);\n      const y = centerY + radius * Math.sin(angle);\n      \n      atoms.push({\n        element: 'C',\n        x: x,\n        y: y,\n        z: 0,\n        hybridization: 'sp2',\n        aromatic: true\n      });\n      \n      // Add bond to next atom (with wraparound)\n      const nextIndex = (i + 1) % 6;\n      bonds.push({\n        atom1: i,\n        atom2: nextIndex,\n        order: 1,\n        type: 'aromatic'\n      });\n    }\n\n    // Add hydrogens\n    for (let i = 0; i < 6; i++) {\n      const angle = (i * Math.PI) / 3;\n      const hRadius = radius + 15; // Hydrogen further out\n      const x = centerX + hRadius * Math.cos(angle);\n      const y = centerY + hRadius * Math.sin(angle);\n      \n      atoms.push({\n        element: 'H',\n        x: x,\n        y: y,\n        z: 0\n      });\n      \n      bonds.push({\n        atom1: i,\n        atom2: 6 + i, // Hydrogen index\n        order: 1,\n        type: 'single'\n      });\n    }\n\n    const rings: Ring[] = [\n      { atoms: [0, 1, 2, 3, 4, 5], aromatic: true, size: 6 }\n    ];\n\n    return { atoms, bonds, rings };\n  }\n\n  /**\n   * Generate water with proper bent geometry\n   */\n  static generateWater(): { atoms: Atom3D[]; bonds: Bond3D[] } {\n    const bondLength = this.BOND_LENGTH;\n    const angle = 1.8326; // 104.5° H-O-H angle\n    \n    const atoms: Atom3D[] = [\n      { element: 'O', x: 200, y: 180, z: 0, hybridization: 'sp3' },\n      { \n        element: 'H', \n        x: 200 - bondLength * Math.cos(angle / 2), \n        y: 180 + bondLength * Math.sin(angle / 2), \n        z: 0 \n      },\n      { \n        element: 'H', \n        x: 200 + bondLength * Math.cos(angle / 2), \n        y: 180 + bondLength * Math.sin(angle / 2), \n        z: 0 \n      }\n    ];\n\n    const bonds: Bond3D[] = [\n      { atom1: 0, atom2: 1, order: 1, type: 'single' },\n      { atom1: 0, atom2: 2, order: 1, type: 'single' }\n    ];\n\n    return { atoms, bonds };\n  }\n\n  /**\n   * Generate methane with tetrahedral geometry\n   */\n  static generateMethane(): { atoms: Atom3D[]; bonds: Bond3D[] } {\n    const bondLength = this.BOND_LENGTH;\n    const centerX = 200;\n    const centerY = 180;\n    \n    // Tetrahedral angles for 2D projection\n    const atoms: Atom3D[] = [\n      { element: 'C', x: centerX, y: centerY, z: 0, hybridization: 'sp3' },\n      { element: 'H', x: centerX - bondLength * 0.6, y: centerY - bondLength * 0.6, z: 0 },\n      { element: 'H', x: centerX + bondLength * 0.6, y: centerY - bondLength * 0.6, z: 0 },\n      { element: 'H', x: centerX - bondLength * 0.6, y: centerY + bondLength * 0.6, z: 0 },\n      { element: 'H', x: centerX + bondLength * 0.6, y: centerY + bondLength * 0.6, z: 0 }\n    ];\n\n    const bonds: Bond3D[] = [\n      { atom1: 0, atom2: 1, order: 1, type: 'single' },\n      { atom1: 0, atom2: 2, order: 1, type: 'single' },\n      { atom1: 0, atom2: 3, order: 1, type: 'single' },\n      { atom1: 0, atom2: 4, order: 1, type: 'single' }\n    ];\n\n    return { atoms, bonds };\n  }\n\n  /**\n   * Generate ethylene with proper double bond geometry\n   */\n  static generateEthylene(): { atoms: Atom3D[]; bonds: Bond3D[] } {\n    const bondLength = this.BOND_LENGTH;\n    const centerX = 200;\n    const centerY = 180;\n    \n    const atoms: Atom3D[] = [\n      // C=C double bond\n      { element: 'C', x: centerX - bondLength/2, y: centerY, z: 0, hybridization: 'sp2' },\n      { element: 'C', x: centerX + bondLength/2, y: centerY, z: 0, hybridization: 'sp2' },\n      \n      // Hydrogens in planar arrangement\n      { element: 'H', x: centerX - bondLength/2 - bondLength * 0.7, y: centerY - bondLength * 0.5, z: 0 },\n      { element: 'H', x: centerX - bondLength/2 - bondLength * 0.7, y: centerY + bondLength * 0.5, z: 0 },\n      { element: 'H', x: centerX + bondLength/2 + bondLength * 0.7, y: centerY - bondLength * 0.5, z: 0 },\n      { element: 'H', x: centerX + bondLength/2 + bondLength * 0.7, y: centerY + bondLength * 0.5, z: 0 }\n    ];\n\n    const bonds: Bond3D[] = [\n      { atom1: 0, atom2: 1, order: 2, type: 'double' },\n      { atom1: 0, atom2: 2, order: 1, type: 'single' },\n      { atom1: 0, atom2: 3, order: 1, type: 'single' },\n      { atom1: 1, atom2: 4, order: 1, type: 'single' },\n      { atom1: 1, atom2: 5, order: 1, type: 'single' }\n    ];\n\n    return { atoms, bonds };\n  }\n\n  /**\n   * Convert molecular structure to Canvas2D format\n   */\n  static toCanvas2DFormat(structure: { atoms: Atom3D[]; bonds: Bond3D[] }): {\n    atoms: Array<{ element: string; position: { x: number; y: number }; bonds: number[] }>;\n    bonds: Array<{ atom1: number; atom2: number; order: number; type: string }>;\n  } {\n    return {\n      atoms: structure.atoms.map((atom, index) => ({\n        element: atom.element,\n        position: { x: atom.x, y: atom.y },\n        bonds: structure.bonds\n          .map((bond, bondIndex) => bond.atom1 === index || bond.atom2 === index ? bondIndex : -1)\n          .filter(bondIndex => bondIndex !== -1)\n      })),\n      bonds: structure.bonds\n    };\n  }\n\n  /**\n   * Enhanced SMILES to 2D converter with proper geometry\n   */\n  static advancedSMILESTo2D(smiles: string): {\n    atoms: Array<{ element: string; position: { x: number; y: number }; bonds: number[] }>;\n    bonds: Array<{ atom1: number; atom2: number; order: number; type: string }>;\n  } {\n    // Handle specific known molecules\n    switch (smiles.toLowerCase()) {\n      case 'o':\n      case 'h2o':\n        return this.toCanvas2DFormat(this.generateWater());\n      \n      case 'c':\n      case 'ch4':\n        return this.toCanvas2DFormat(this.generateMethane());\n      \n      case 'c=c':\n      case 'c2h4':\n        return this.toCanvas2DFormat(this.generateEthylene());\n      \n      case 'c1=cc=cc=c1':\n      case 'c6h6':\n      case 'benzene':\n        return this.toCanvas2DFormat(this.generateBenzene());\n      \n      case 'caffeine':\n      case 'cn1c=nc2c1c(=o)n(c(=o)n2c)c':\n        return this.toCanvas2DFormat(this.generateCaffeine());\n      \n      default:\n        // Fallback to simple structure\n        return this.toCanvas2DFormat(this.generateMethane());\n    }\n  }\n}\n\nexport default Molecular2DGenerator;\n","/**\n * 2D Molecular Structure Renderer\n * Canvas-based 2D molecular structure drawing with proper chemical geometry\n */\n\nimport { Molecular2DGenerator } from './Molecular2DGenerator';\n\nexport interface Canvas2DConfig {\n  width: number;\n  height: number;\n  backgroundColor: string;\n  bondColor: string;\n  atomColors: Record<string, string>;\n  bondWidth: number;\n  atomRadius: number;\n  fontSize: number;\n}\n\nexport interface Point2D {\n  x: number;\n  y: number;\n}\n\nexport interface Atom2D {\n  element: string;\n  position: Point2D;\n  bonds: number[];\n  charge?: number;\n}\n\nexport interface Bond2D {\n  atom1: number;\n  atom2: number;\n  order: number;\n  type: 'single' | 'double' | 'triple' | 'aromatic';\n}\n\nexport interface Molecule2D {\n  atoms: Atom2D[];\n  bonds: Bond2D[];\n  name?: string;\n}\n\nexport class Canvas2DRenderer {\n  private canvas: any; // HTMLCanvasElement - using any for Node.js compatibility\n  private ctx: any; // CanvasRenderingContext2D - using any for Node.js compatibility\n  private config: Canvas2DConfig;\n  private molecule: Molecule2D | null = null;\n  private scale = 1;\n  private offset = { x: 0, y: 0 };\n\n  constructor(canvas: any, config: Partial<Canvas2DConfig> = {}) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    \n    this.config = {\n      width: 600,\n      height: 400,\n      backgroundColor: '#ffffff',\n      bondColor: '#333333',\n      atomColors: {\n        'C': '#000000',\n        'H': '#ffffff',\n        'O': '#ff0000',\n        'N': '#0000ff',\n        'S': '#ffff00',\n        'P': '#ffa500',\n        'Cl': '#00ff00',\n        'Br': '#a52a2a',\n        'I': '#9400d3'\n      },\n      bondWidth: 2,\n      atomRadius: 15,\n      fontSize: 12,\n      ...config\n    };\n\n    this.setupCanvas();\n    this.bindEvents();\n  }\n\n  private setupCanvas(): void {\n    this.canvas.width = this.config.width;\n    this.canvas.height = this.config.height;\n    \n    // Only set styles if we're in browser environment\n    try {\n      if (this.canvas.style) {\n        this.canvas.style.border = '1px solid #ccc';\n        this.canvas.style.borderRadius = '4px';\n      }\n    } catch {\n      // Ignore style errors in non-browser environments\n    }\n  }\n\n  private bindEvents(): void {\n    // Only bind events if we're in browser environment\n    try {\n      if (!this.canvas.addEventListener) {\n        return;\n      }\n    } catch {\n      return;\n    }\n\n    let isMouseDown = false;\n    let lastMousePos = { x: 0, y: 0 };\n\n    this.canvas.addEventListener('mousedown', (e: any) => {\n      isMouseDown = true;\n      lastMousePos = { x: e.clientX, y: e.clientY };\n    });\n\n    this.canvas.addEventListener('mousemove', (e: any) => {\n      if (isMouseDown) {\n        const deltaX = e.clientX - lastMousePos.x;\n        const deltaY = e.clientY - lastMousePos.y;\n        \n        this.offset.x += deltaX;\n        this.offset.y += deltaY;\n        \n        lastMousePos = { x: e.clientX, y: e.clientY };\n        this.render();\n      }\n    });\n\n    this.canvas.addEventListener('mouseup', () => {\n      isMouseDown = false;\n    });\n\n    this.canvas.addEventListener('wheel', (e: any) => {\n      e.preventDefault();\n      const scaleFactor = e.deltaY > 0 ? 0.9 : 1.1;\n      this.scale *= scaleFactor;\n      this.render();\n    });\n  }\n\n  /**\n   * Load and render a molecule\n   */\n  loadMolecule(molecule: Molecule2D): void {\n    this.molecule = molecule;\n    this.centerMolecule();\n    this.render();\n  }\n\n  /**\n   * Center the molecule in the canvas\n   */\n  private centerMolecule(): void {\n    if (!this.molecule || this.molecule.atoms.length === 0) return;\n\n    // Calculate bounding box\n    let minX = Infinity, maxX = -Infinity;\n    let minY = Infinity, maxY = -Infinity;\n\n    this.molecule.atoms.forEach(atom => {\n      minX = Math.min(minX, atom.position.x);\n      maxX = Math.max(maxX, atom.position.x);\n      minY = Math.min(minY, atom.position.y);\n      maxY = Math.max(maxY, atom.position.y);\n    });\n\n    // Calculate center offset\n    const molWidth = maxX - minX;\n    const molHeight = maxY - minY;\n    const molCenterX = (minX + maxX) / 2;\n    const molCenterY = (minY + maxY) / 2;\n\n    // Calculate scale to fit molecule\n    const scaleX = (this.config.width * 0.8) / molWidth;\n    const scaleY = (this.config.height * 0.8) / molHeight;\n    this.scale = Math.min(scaleX, scaleY, 1);\n\n    // Center the molecule\n    this.offset.x = this.config.width / 2 - molCenterX * this.scale;\n    this.offset.y = this.config.height / 2 - molCenterY * this.scale;\n  }\n\n  /**\n   * Render the current molecule\n   */\n  render(): void {\n    this.clear();\n    \n    if (!this.molecule) {\n      this.renderPlaceholder();\n      return;\n    }\n\n    this.renderBonds();\n    this.renderAtoms();\n    this.renderLabels();\n  }\n\n  /**\n   * Clear the canvas\n   */\n  private clear(): void {\n    this.ctx.fillStyle = this.config.backgroundColor;\n    this.ctx.fillRect(0, 0, this.config.width, this.config.height);\n  }\n\n  /**\n   * Render placeholder when no molecule is loaded\n   */\n  private renderPlaceholder(): void {\n    this.ctx.fillStyle = '#f0f0f0';\n    this.ctx.fillRect(0, 0, this.config.width, this.config.height);\n\n    this.ctx.fillStyle = '#999999';\n    this.ctx.font = '24px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillText(\n      '2D Molecular Structure',\n      this.config.width / 2,\n      this.config.height / 2 - 20\n    );\n\n    this.ctx.font = '14px Arial';\n    this.ctx.fillText(\n      'Load a molecule to visualize',\n      this.config.width / 2,\n      this.config.height / 2 + 20\n    );\n  }\n\n  /**\n   * Render molecular bonds\n   */\n  private renderBonds(): void {\n    if (!this.molecule) return;\n\n    this.ctx.strokeStyle = this.config.bondColor;\n    this.ctx.lineWidth = this.config.bondWidth;\n    this.ctx.lineCap = 'round';\n\n    this.molecule.bonds.forEach(bond => {\n      const atom1 = this.molecule!.atoms[bond.atom1];\n      const atom2 = this.molecule!.atoms[bond.atom2];\n\n      const pos1 = this.transformPoint(atom1.position);\n      const pos2 = this.transformPoint(atom2.position);\n\n      this.drawBond(pos1, pos2, bond);\n    });\n  }\n\n  /**\n   * Draw a single bond\n   */\n  private drawBond(pos1: Point2D, pos2: Point2D, bond: Bond2D): void {\n    const dx = pos2.x - pos1.x;\n    const dy = pos2.y - pos1.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const unitX = dx / length;\n    const unitY = dy / length;\n\n    // Offset for multiple bonds\n    const perpX = -unitY * 3;\n    const perpY = unitX * 3;\n\n    switch (bond.order) {\n      case 1:\n        this.drawSingleBond(pos1, pos2);\n        break;\n      case 2:\n        this.drawSingleBond(\n          { x: pos1.x + perpX, y: pos1.y + perpY },\n          { x: pos2.x + perpX, y: pos2.y + perpY }\n        );\n        this.drawSingleBond(\n          { x: pos1.x - perpX, y: pos1.y - perpY },\n          { x: pos2.x - perpX, y: pos2.y - perpY }\n        );\n        break;\n      case 3:\n        this.drawSingleBond(pos1, pos2);\n        this.drawSingleBond(\n          { x: pos1.x + perpX, y: pos1.y + perpY },\n          { x: pos2.x + perpX, y: pos2.y + perpY }\n        );\n        this.drawSingleBond(\n          { x: pos1.x - perpX, y: pos1.y - perpY },\n          { x: pos2.x - perpX, y: pos2.y - perpY }\n        );\n        break;\n    }\n\n    if (bond.type === 'aromatic') {\n      // For aromatic bonds, draw a dashed inner line to indicate aromaticity\n      this.drawAromaticIndicator(pos1, pos2);\n    }\n  }\n\n  /**\n   * Draw a single bond line\n   */\n  private drawSingleBond(pos1: Point2D, pos2: Point2D): void {\n    this.ctx.beginPath();\n    this.ctx.moveTo(pos1.x, pos1.y);\n    this.ctx.lineTo(pos2.x, pos2.y);\n    this.ctx.stroke();\n  }\n\n  /**\n   * Draw aromatic bond indicator (dashed inner line)\n   */\n  private drawAromaticIndicator(pos1: Point2D, pos2: Point2D): void {\n    // Draw a shorter dashed line slightly inside the ring\n    const dx = pos2.x - pos1.x;\n    const dy = pos2.y - pos1.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    \n    // Create inner line (80% of original length, centered)\n    const innerStart = {\n      x: pos1.x + dx * 0.1,\n      y: pos1.y + dy * 0.1\n    };\n    const innerEnd = {\n      x: pos1.x + dx * 0.9,\n      y: pos1.y + dy * 0.9\n    };\n    \n    this.ctx.setLineDash([3, 3]);\n    this.ctx.strokeStyle = this.config.bondColor;\n    this.ctx.lineWidth = this.config.bondWidth * 0.7;\n    this.drawSingleBond(innerStart, innerEnd);\n    this.ctx.setLineDash([]);\n    this.ctx.lineWidth = this.config.bondWidth;\n  }\n\n  /**\n   * Draw aromatic bond (dashed) - legacy method\n   */\n  private drawAromaticBond(pos1: Point2D, pos2: Point2D): void {\n    this.ctx.setLineDash([5, 5]);\n    this.drawSingleBond(pos1, pos2);\n    this.ctx.setLineDash([]);\n  }\n\n  /**\n   * Render atoms\n   */\n  private renderAtoms(): void {\n    if (!this.molecule) return;\n\n    this.molecule.atoms.forEach((atom, index) => {\n      const pos = this.transformPoint(atom.position);\n      this.drawAtom(atom, pos, index);\n    });\n  }\n\n  /**\n   * Draw a single atom\n   */\n  private drawAtom(atom: Atom2D, pos: Point2D, index: number): void {\n    const color = this.config.atomColors[atom.element] || '#999999';\n    const radius = this.config.atomRadius * this.scale;\n\n    // Draw atom circle\n    this.ctx.fillStyle = color;\n    this.ctx.beginPath();\n    this.ctx.arc(pos.x, pos.y, radius, 0, 2 * Math.PI);\n    this.ctx.fill();\n\n    // Draw border\n    this.ctx.strokeStyle = '#333333';\n    this.ctx.lineWidth = 1;\n    this.ctx.stroke();\n\n    // Draw element symbol\n    this.ctx.fillStyle = atom.element === 'H' ? '#000000' : '#ffffff';\n    this.ctx.font = `${this.config.fontSize * this.scale}px Arial`;\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillText(atom.element, pos.x, pos.y);\n  }\n\n  /**\n   * Render atom labels and charges\n   */\n  private renderLabels(): void {\n    if (!this.molecule) return;\n\n    this.ctx.fillStyle = '#333333';\n    this.ctx.font = `${10 * this.scale}px Arial`;\n\n    this.molecule.atoms.forEach((atom, index) => {\n      if (atom.charge && atom.charge !== 0) {\n        const pos = this.transformPoint(atom.position);\n        const chargeText = atom.charge > 0 ? `+${atom.charge}` : `${atom.charge}`;\n        \n        this.ctx.textAlign = 'left';\n        this.ctx.textBaseline = 'top';\n        this.ctx.fillText(\n          chargeText,\n          pos.x + this.config.atomRadius * this.scale,\n          pos.y - this.config.atomRadius * this.scale\n        );\n      }\n    });\n  }\n\n  /**\n   * Transform point from molecule coordinates to canvas coordinates\n   */\n  private transformPoint(point: Point2D): Point2D {\n    return {\n      x: point.x * this.scale + this.offset.x,\n      y: point.y * this.scale + this.offset.y\n    };\n  }\n\n  /**\n   * Convert SMILES to 2D coordinates with proper chemical geometry\n   */\n  static smilesToMolecule2D(smiles: string): Molecule2D {\n    // Use the advanced molecular geometry generator for proper chemical structures\n    const advanced = Molecular2DGenerator.advancedSMILESTo2D(smiles);\n    \n    return {\n      atoms: advanced.atoms,\n      bonds: advanced.bonds.map(bond => ({\n        atom1: bond.atom1,\n        atom2: bond.atom2,\n        order: bond.order,\n        type: bond.type as 'single' | 'double' | 'triple' | 'aromatic'\n      })),\n      name: `SMILES: ${smiles}`\n    };\n  }\n\n  /**\n   * Export canvas as image\n   */\n  exportImage(format: 'png' | 'jpg' | 'svg' = 'png'): string {\n    if (format === 'svg') {\n      return this.exportSVG();\n    }\n    return this.canvas.toDataURL(`image/${format}`);\n  }\n\n  /**\n   * Export current molecule as SVG\n   */\n  exportSVG(options: {\n    interactive?: boolean;\n    animations?: boolean;\n    includeMetadata?: boolean;\n    optimizeSize?: boolean;\n  } = {}): string {\n    if (!this.molecule) {\n      return this.generateEmptySVG();\n    }\n\n    const svgElements: string[] = [];\n    const { width, height } = this.config;\n    \n    // SVG header\n    svgElements.push(`<svg width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\" xmlns=\"http://www.w3.org/2000/svg\">`);\n    \n    if (options.includeMetadata) {\n      svgElements.push(`<title>Molecular Structure - ${this.molecule.atoms.length} atoms</title>`);\n      svgElements.push(`<desc>Generated by CREB-JS Canvas2DRenderer</desc>`);\n    }\n    \n    // Styles\n    svgElements.push('<defs><style type=\"text/css\">');\n    svgElements.push('.atom-circle { stroke: #000; stroke-width: 1; }');\n    svgElements.push('.atom-label { font-family: Arial, sans-serif; font-size: 14px; text-anchor: middle; dominant-baseline: central; }');\n    svgElements.push(`.bond-line { stroke: ${this.config.bondColor}; stroke-width: ${this.config.bondWidth}; stroke-linecap: round; }`);\n    \n    if (options.interactive) {\n      svgElements.push('.atom-group:hover .atom-circle { stroke-width: 2; stroke: #ff6b35; }');\n      svgElements.push('.atom-group { cursor: pointer; }');\n    }\n    \n    svgElements.push('</style></defs>');\n    \n    // Background\n    svgElements.push(`<rect width=\"100%\" height=\"100%\" fill=\"${this.config.backgroundColor}\"/>`);\n    \n    // Bonds\n    svgElements.push('<g id=\"bonds\">');\n    this.molecule.bonds.forEach(bond => {\n      const atom1 = this.molecule!.atoms[bond.atom1];\n      const atom2 = this.molecule!.atoms[bond.atom2];\n      const pos1 = this.transformPoint(atom1.position);\n      const pos2 = this.transformPoint(atom2.position);\n      \n      svgElements.push(`<line x1=\"${pos1.x}\" y1=\"${pos1.y}\" x2=\"${pos2.x}\" y2=\"${pos2.y}\" class=\"bond-line\"/>`);\n    });\n    svgElements.push('</g>');\n    \n    // Atoms\n    svgElements.push('<g id=\"atoms\">');\n    this.molecule.atoms.forEach((atom, index) => {\n      const pos = this.transformPoint(atom.position);\n      const color = this.config.atomColors[atom.element] || '#999999';\n      const radius = this.config.atomRadius * this.scale;\n      \n      svgElements.push('<g class=\"atom-group\">');\n      svgElements.push(`<circle cx=\"${pos.x}\" cy=\"${pos.y}\" r=\"${radius}\" fill=\"${color}\" class=\"atom-circle\"/>`);\n      \n      const textColor = this.getContrastingColor(color);\n      svgElements.push(`<text x=\"${pos.x}\" y=\"${pos.y}\" fill=\"${textColor}\" class=\"atom-label\">${atom.element}</text>`);\n      svgElements.push('</g>');\n    });\n    svgElements.push('</g>');\n    \n    // Metadata\n    if (options.includeMetadata) {\n      svgElements.push('<metadata>');\n      svgElements.push(`<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">`);\n      svgElements.push(`<rdf:Description rdf:about=\"\">`);\n      svgElements.push(`<atomCount>${this.molecule.atoms.length}</atomCount>`);\n      svgElements.push(`<bondCount>${this.molecule.bonds.length}</bondCount>`);\n      svgElements.push(`<generator>CREB-JS Canvas2DRenderer</generator>`);\n      svgElements.push(`<timestamp>${new Date().toISOString()}</timestamp>`);\n      svgElements.push(`</rdf:Description>`);\n      svgElements.push(`</rdf:RDF>`);\n      svgElements.push('</metadata>');\n    }\n    \n    svgElements.push('</svg>');\n    \n    return svgElements.join('\\n');\n  }\n\n  /**\n   * Generate empty SVG placeholder\n   */\n  private generateEmptySVG(): string {\n    const { width, height } = this.config;\n    return `<svg width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"100%\" height=\"100%\" fill=\"${this.config.backgroundColor}\"/>\n      <text x=\"${width/2}\" y=\"${height/2 - 20}\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"24\" fill=\"#999\">2D Molecular Structure</text>\n      <text x=\"${width/2}\" y=\"${height/2 + 20}\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\" fill=\"#999\">Load a molecule to visualize</text>\n    </svg>`;\n  }\n\n  /**\n   * Get contrasting color for text readability\n   */\n  private getContrastingColor(backgroundColor: string): string {\n    const hex = backgroundColor.replace('#', '');\n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n    return brightness > 128 ? '#000000' : '#ffffff';\n  }\n\n  /**\n   * Download SVG as file\n   */\n  downloadSVG(filename: string = 'molecule.svg', options = {}): void {\n    const svgContent = this.exportSVG(options);\n    \n    if (typeof document !== 'undefined') {\n      const blob = new Blob([svgContent], { type: 'image/svg+xml' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      link.click();\n      URL.revokeObjectURL(url);\n    }\n  }\n\n  /**\n   * Reset view to default\n   */\n  resetView(): void {\n    this.scale = 1;\n    this.offset = { x: 0, y: 0 };\n    this.centerMolecule();\n    this.render();\n  }\n\n  /**\n   * Set molecule scale\n   */\n  setScale(scale: number): void {\n    this.scale = Math.max(0.1, Math.min(5, scale));\n    this.render();\n  }\n\n  /**\n   * Get current molecule data\n   */\n  getMolecule(): Molecule2D | null {\n    return this.molecule;\n  }\n}\n\nexport default Canvas2DRenderer;\n","/**\n * SVG Molecular Structure Renderer\n * Vector-based 2D molecular structure export\n */\n\nimport { Point2D, Atom2D, Bond2D, Molecule2D } from './Canvas2DRenderer';\n\nexport interface SVGConfig {\n  width: number;\n  height: number;\n  backgroundColor: string;\n  atomColors: Record<string, string>;\n  bondColor: string;\n  bondWidth: number;\n  fontSize: number;\n  atomRadius: number;\n  includeStyles: boolean;\n  includeInteractivity: boolean;\n}\n\nexport interface SVGExportOptions {\n  format: 'svg' | 'svg-inline' | 'svg-download';\n  filename?: string;\n  includeMetadata?: boolean;\n  optimizeSize?: boolean;\n  interactive?: boolean;\n  animations?: boolean;\n}\n\n/**\n * SVG-based molecular structure renderer\n */\nexport class SVGRenderer {\n  private config: SVGConfig;\n  private molecule: Molecule2D | null = null;\n  private scale = 1;\n  private offset = { x: 0, y: 0 };\n\n  constructor(config: Partial<SVGConfig> = {}) {\n    this.config = {\n      width: 600,\n      height: 400,\n      backgroundColor: '#ffffff',\n      atomColors: {\n        'H': '#ffffff',\n        'C': '#303030',\n        'N': '#3050f8',\n        'O': '#ff0d0d',\n        'F': '#90e050',\n        'P': '#ff8000',\n        'S': '#ffff30',\n        'Cl': '#1ff01f',\n        'Br': '#a62929',\n        'I': '#940094'\n      },\n      bondColor: '#000000',\n      bondWidth: 2,\n      fontSize: 14,\n      atomRadius: 20,\n      includeStyles: true,\n      includeInteractivity: false,\n      ...config\n    };\n  }\n\n  /**\n   * Load a molecule for rendering\n   */\n  loadMolecule(molecule: Molecule2D): void {\n    this.molecule = molecule;\n    this.centerMolecule();\n  }\n\n  /**\n   * Center the molecule in the SVG viewport\n   */\n  private centerMolecule(): void {\n    if (!this.molecule || this.molecule.atoms.length === 0) return;\n\n    // Calculate bounding box\n    let minX = Infinity, maxX = -Infinity;\n    let minY = Infinity, maxY = -Infinity;\n\n    this.molecule.atoms.forEach(atom => {\n      minX = Math.min(minX, atom.position.x);\n      maxX = Math.max(maxX, atom.position.x);\n      minY = Math.min(minY, atom.position.y);\n      maxY = Math.max(maxY, atom.position.y);\n    });\n\n    // Calculate center offset\n    const molWidth = maxX - minX;\n    const molHeight = maxY - minY;\n    const molCenterX = (minX + maxX) / 2;\n    const molCenterY = (minY + maxY) / 2;\n\n    // Calculate scale to fit molecule\n    const scaleX = (this.config.width * 0.8) / molWidth;\n    const scaleY = (this.config.height * 0.8) / molHeight;\n    this.scale = Math.min(scaleX, scaleY, 1);\n\n    // Center the molecule\n    this.offset.x = this.config.width / 2 - molCenterX * this.scale;\n    this.offset.y = this.config.height / 2 - molCenterY * this.scale;\n  }\n\n  /**\n   * Transform point from molecule coordinates to SVG coordinates\n   */\n  private transformPoint(point: Point2D): Point2D {\n    return {\n      x: point.x * this.scale + this.offset.x,\n      y: point.y * this.scale + this.offset.y\n    };\n  }\n\n  /**\n   * Generate SVG string for the current molecule\n   */\n  exportSVG(options: Partial<SVGExportOptions> = {}): string {\n    const opts: SVGExportOptions = {\n      format: 'svg',\n      includeMetadata: true,\n      optimizeSize: false,\n      interactive: this.config.includeInteractivity,\n      animations: false,\n      ...options\n    };\n\n    if (!this.molecule) {\n      return this.generateEmptySVG(opts);\n    }\n\n    const svgElements: string[] = [];\n    \n    // SVG header\n    svgElements.push(this.generateSVGHeader(opts));\n    \n    // Styles\n    if (this.config.includeStyles) {\n      svgElements.push(this.generateStyles(opts));\n    }\n    \n    // Background\n    svgElements.push(this.generateBackground());\n    \n    // Molecular structure\n    svgElements.push(this.generateBonds(opts));\n    svgElements.push(this.generateAtoms(opts));\n    \n    // Metadata\n    if (opts.includeMetadata) {\n      svgElements.push(this.generateMetadata());\n    }\n    \n    // SVG footer\n    svgElements.push('</svg>');\n    \n    return svgElements.join('\\n');\n  }\n\n  /**\n   * Generate SVG header with viewBox and namespaces\n   */\n  private generateSVGHeader(options: SVGExportOptions): string {\n    const { width, height } = this.config;\n    \n    let header = `<svg width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\"`;\n    header += ` xmlns=\"http://www.w3.org/2000/svg\"`;\n    \n    if (options.interactive) {\n      header += ` xmlns:xlink=\"http://www.w3.org/1999/xlink\"`;\n    }\n    \n    header += `>`;\n    \n    if (options.includeMetadata) {\n      header += `\\n<title>Molecular Structure - ${this.molecule?.atoms.length || 0} atoms</title>`;\n      header += `\\n<desc>Generated by CREB-JS Molecular Visualization System</desc>`;\n    }\n    \n    return header;\n  }\n\n  /**\n   * Generate CSS styles for the SVG\n   */\n  private generateStyles(options: SVGExportOptions): string {\n    let styles = '<defs><style type=\"text/css\">\\n';\n    \n    // Base styles\n    styles += `  .atom-circle { stroke: #000; stroke-width: 1; }\\n`;\n    styles += `  .atom-label { font-family: Arial, sans-serif; font-size: ${this.config.fontSize}px; text-anchor: middle; dominant-baseline: central; }\\n`;\n    styles += `  .bond-line { stroke: ${this.config.bondColor}; stroke-width: ${this.config.bondWidth}; stroke-linecap: round; }\\n`;\n    styles += `  .bond-double { stroke-dasharray: none; }\\n`;\n    styles += `  .bond-triple { stroke-width: ${this.config.bondWidth + 1}; }\\n`;\n    \n    // Interactive styles\n    if (options.interactive) {\n      styles += `  .atom-group:hover .atom-circle { stroke-width: 2; stroke: #ff6b35; }\\n`;\n      styles += `  .atom-group:hover .atom-label { font-weight: bold; }\\n`;\n      styles += `  .bond-line:hover { stroke: #ff6b35; stroke-width: ${this.config.bondWidth + 1}; }\\n`;\n      styles += `  .atom-group { cursor: pointer; }\\n`;\n    }\n    \n    // Animation styles\n    if (options.animations) {\n      styles += `  @keyframes atomPulse { 0%, 100% { r: ${this.config.atomRadius}; } 50% { r: ${this.config.atomRadius + 3}; } }\\n`;\n      styles += `  .atom-circle:hover { animation: atomPulse 1s infinite; }\\n`;\n    }\n    \n    styles += '</style></defs>\\n';\n    return styles;\n  }\n\n  /**\n   * Generate background rectangle\n   */\n  private generateBackground(): string {\n    return `<rect width=\"100%\" height=\"100%\" fill=\"${this.config.backgroundColor}\"/>`;\n  }\n\n  /**\n   * Generate SVG elements for bonds\n   */\n  private generateBonds(options: SVGExportOptions): string {\n    if (!this.molecule) return '';\n    \n    const bonds: string[] = [];\n    bonds.push('<g id=\"bonds\">');\n    \n    this.molecule.bonds.forEach((bond, index) => {\n      const atom1 = this.molecule!.atoms[bond.atom1];\n      const atom2 = this.molecule!.atoms[bond.atom2];\n      \n      const pos1 = this.transformPoint(atom1.position);\n      const pos2 = this.transformPoint(atom2.position);\n      \n      bonds.push(this.generateBondSVG(pos1, pos2, bond, index, options));\n    });\n    \n    bonds.push('</g>');\n    return bonds.join('\\n');\n  }\n\n  /**\n   * Generate SVG for a single bond\n   */\n  private generateBondSVG(pos1: Point2D, pos2: Point2D, bond: Bond2D, index: number, options: SVGExportOptions): string {\n    const bondClass = `bond-${bond.type || 'single'}`;\n    let bondElement = '';\n    \n    if (bond.order === 1 || !bond.order) {\n      // Single bond\n      bondElement = `<line x1=\"${pos1.x.toFixed(2)}\" y1=\"${pos1.y.toFixed(2)}\" x2=\"${pos2.x.toFixed(2)}\" y2=\"${pos2.y.toFixed(2)}\" class=\"bond-line ${bondClass}\"`;\n    } else if (bond.order === 2) {\n      // Double bond - two parallel lines\n      const dx = pos2.x - pos1.x;\n      const dy = pos2.y - pos1.y;\n      const length = Math.sqrt(dx * dx + dy * dy);\n      const offsetX = (-dy / length) * 3;\n      const offsetY = (dx / length) * 3;\n      \n      bondElement = `<g class=\"bond-double\">\n        <line x1=\"${(pos1.x + offsetX).toFixed(2)}\" y1=\"${(pos1.y + offsetY).toFixed(2)}\" x2=\"${(pos2.x + offsetX).toFixed(2)}\" y2=\"${(pos2.y + offsetY).toFixed(2)}\" class=\"bond-line\"/>\n        <line x1=\"${(pos1.x - offsetX).toFixed(2)}\" y1=\"${(pos1.y - offsetY).toFixed(2)}\" x2=\"${(pos2.x - offsetX).toFixed(2)}\" y2=\"${(pos2.y - offsetY).toFixed(2)}\" class=\"bond-line\"/>\n      </g>`;\n    } else if (bond.order === 3) {\n      // Triple bond - three parallel lines\n      const dx = pos2.x - pos1.x;\n      const dy = pos2.y - pos1.y;\n      const length = Math.sqrt(dx * dx + dy * dy);\n      const offsetX = (-dy / length) * 3;\n      const offsetY = (dx / length) * 3;\n      \n      bondElement = `<g class=\"bond-triple\">\n        <line x1=\"${pos1.x.toFixed(2)}\" y1=\"${pos1.y.toFixed(2)}\" x2=\"${pos2.x.toFixed(2)}\" y2=\"${pos2.y.toFixed(2)}\" class=\"bond-line\"/>\n        <line x1=\"${(pos1.x + offsetX).toFixed(2)}\" y1=\"${(pos1.y + offsetY).toFixed(2)}\" x2=\"${(pos2.x + offsetX).toFixed(2)}\" y2=\"${(pos2.y + offsetY).toFixed(2)}\" class=\"bond-line\"/>\n        <line x1=\"${(pos1.x - offsetX).toFixed(2)}\" y1=\"${(pos1.y - offsetY).toFixed(2)}\" x2=\"${(pos2.x - offsetX).toFixed(2)}\" y2=\"${(pos2.y - offsetY).toFixed(2)}\" class=\"bond-line\"/>\n      </g>`;\n    }\n    \n    if (options.interactive) {\n      bondElement += ` data-bond-id=\"${index}\" data-atoms=\"${bond.atom1},${bond.atom2}\"`;\n    }\n    \n    if (bondElement.includes('<g')) {\n      return bondElement;\n    } else {\n      return bondElement + '/>';\n    }\n  }\n\n  /**\n   * Generate SVG elements for atoms\n   */\n  private generateAtoms(options: SVGExportOptions): string {\n    if (!this.molecule) return '';\n    \n    const atoms: string[] = [];\n    atoms.push('<g id=\"atoms\">');\n    \n    this.molecule.atoms.forEach((atom, index) => {\n      atoms.push(this.generateAtomSVG(atom, index, options));\n    });\n    \n    atoms.push('</g>');\n    return atoms.join('\\n');\n  }\n\n  /**\n   * Generate SVG for a single atom\n   */\n  private generateAtomSVG(atom: Atom2D, index: number, options: SVGExportOptions): string {\n    const pos = this.transformPoint(atom.position);\n    const color = this.config.atomColors[atom.element] || '#cccccc';\n    const radius = this.config.atomRadius * this.scale;\n    \n    let atomGroup = `<g class=\"atom-group\" data-element=\"${atom.element}\" data-atom-id=\"${index}\">`;\n    \n    // Atom circle\n    atomGroup += `<circle cx=\"${pos.x.toFixed(2)}\" cy=\"${pos.y.toFixed(2)}\" r=\"${radius.toFixed(2)}\" fill=\"${color}\" class=\"atom-circle\"/>`;\n    \n    // Atom label\n    const textColor = this.getContrastingColor(color);\n    atomGroup += `<text x=\"${pos.x.toFixed(2)}\" y=\"${pos.y.toFixed(2)}\" fill=\"${textColor}\" class=\"atom-label\">${atom.element}</text>`;\n    \n    // Interactive elements\n    if (options.interactive) {\n      atomGroup += `<title>${atom.element} - Atom ${index + 1}</title>`;\n    }\n    \n    atomGroup += '</g>';\n    \n    return atomGroup;\n  }\n\n  /**\n   * Generate metadata section\n   */\n  private generateMetadata(): string {\n    if (!this.molecule) return '';\n    \n    const metadata = [\n      '<metadata>',\n      `  <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:creb=\"https://creb.dev/ns#\">`,\n      `    <rdf:Description rdf:about=\"\">`,\n      `      <creb:atomCount>${this.molecule.atoms.length}</creb:atomCount>`,\n      `      <creb:bondCount>${this.molecule.bonds.length}</creb:bondCount>`,\n      `      <creb:generator>CREB-JS v${process.env.npm_package_version || '1.6.0'}</creb:generator>`,\n      `      <creb:timestamp>${new Date().toISOString()}</creb:timestamp>`,\n      `    </rdf:Description>`,\n      `  </rdf:RDF>`,\n      '</metadata>'\n    ];\n    \n    return metadata.join('\\n');\n  }\n\n  /**\n   * Generate empty SVG for when no molecule is loaded\n   */\n  private generateEmptySVG(options: SVGExportOptions): string {\n    const { width, height } = this.config;\n    \n    let svg = `<svg width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\" xmlns=\"http://www.w3.org/2000/svg\">`;\n    svg += `<rect width=\"100%\" height=\"100%\" fill=\"${this.config.backgroundColor}\"/>`;\n    svg += `<text x=\"${width/2}\" y=\"${height/2 - 20}\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"24\" fill=\"#999\">2D Molecular Structure</text>`;\n    svg += `<text x=\"${width/2}\" y=\"${height/2 + 20}\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\" fill=\"#999\">Load a molecule to visualize</text>`;\n    svg += '</svg>';\n    \n    return svg;\n  }\n\n  /**\n   * Get contrasting color for text\n   */\n  private getContrastingColor(backgroundColor: string): string {\n    // Simple contrast calculation\n    const hex = backgroundColor.replace('#', '');\n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n    \n    return brightness > 128 ? '#000000' : '#ffffff';\n  }\n\n  /**\n   * Export as downloadable SVG file\n   */\n  exportAsFile(filename: string = 'molecule.svg', options: Partial<SVGExportOptions> = {}): void {\n    const svgContent = this.exportSVG({ ...options, format: 'svg-download' });\n    \n    // Create download link (browser only)\n    if (typeof document !== 'undefined') {\n      const blob = new Blob([svgContent], { type: 'image/svg+xml' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      link.click();\n      URL.revokeObjectURL(url);\n    } else {\n      // Node.js environment - would need fs module\n      console.log('SVG content:', svgContent);\n    }\n  }\n\n  /**\n   * Get current molecule data\n   */\n  getMolecule(): Molecule2D | null {\n    return this.molecule;\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(config: Partial<SVGConfig>): void {\n    this.config = { ...this.config, ...config };\n    this.centerMolecule();\n  }\n}\n\nexport default SVGRenderer;\n","/**\n * Simplified Molecular Visualization System\n * Node.js and browser compatible implementation\n */\n\nimport { Canvas2DRenderer, type Molecule2D } from './Canvas2DRenderer';\n\nexport interface MolecularVisualizationConfig {\n  container: any; // HTMLElement or string\n  width?: number;\n  height?: number;\n  mode?: '2d' | '3d' | 'both';\n  backgroundColor?: string;\n  interactive?: boolean;\n}\n\nexport interface MolecularStyleOptions {\n  style?: 'stick' | 'sphere' | 'wireframe';\n  colorScheme?: 'element' | 'rainbow' | 'jmol';\n  showLabels?: boolean;\n  atomScale?: number;\n  bondWidth?: number;\n}\n\nexport interface MoleculeVisualizationData {\n  pdb?: string;\n  sdf?: string;\n  smiles?: string;\n  atoms?: Array<{\n    element: string;\n    x: number;\n    y: number;\n    z: number;\n  }>;\n  bonds?: Array<{\n    atom1: number;\n    atom2: number;\n    order: number;\n  }>;\n}\n\n/**\n * Main Molecular Visualization Engine\n */\nexport class MolecularVisualization {\n  private container: any;\n  private config: MolecularVisualizationConfig;\n  private canvas2d?: Canvas2DRenderer;\n  private viewer3d?: any;\n  private currentMolecule?: MoleculeVisualizationData;\n  private styleOptions: MolecularStyleOptions;\n\n  constructor(config: MolecularVisualizationConfig) {\n    this.config = {\n      width: 600,\n      height: 400,\n      mode: 'both',\n      backgroundColor: '#ffffff',\n      interactive: true,\n      ...config\n    };\n\n    this.styleOptions = {\n      style: 'stick',\n      colorScheme: 'element',\n      showLabels: false,\n      atomScale: 1.0,\n      bondWidth: 2\n    };\n\n    this.initializeContainer();\n    this.setupVisualization();\n  }\n\n  /**\n   * Initialize the visualization container\n   */\n  private initializeContainer(): void {\n    // Handle both string selector and direct element\n    if (typeof this.config.container === 'string') {\n      // In browser environment, try to find element\n      try {\n        const element = (globalThis as any)?.document?.getElementById?.(this.config.container);\n        this.container = element || this.createFallbackContainer();\n      } catch {\n        this.container = this.createFallbackContainer();\n      }\n    } else {\n      this.container = this.config.container || this.createFallbackContainer();\n    }\n  }\n\n  /**\n   * Create a fallback container for non-browser environments\n   */\n  private createFallbackContainer(): any {\n    return {\n      width: this.config.width || 600,\n      height: this.config.height || 400,\n      appendChild: () => {},\n      innerHTML: '',\n      style: {}\n    };\n  }\n\n  /**\n   * Setup the visualization components\n   */\n  private setupVisualization(): void {\n    if (this.config.mode === '2d' || this.config.mode === 'both') {\n      this.setup2DVisualization();\n    }\n\n    if (this.config.mode === '3d' || this.config.mode === 'both') {\n      this.setup3DVisualization();\n    }\n  }\n\n  /**\n   * Setup 2D canvas visualization\n   */\n  private setup2DVisualization(): void {\n    try {\n      // Try to create canvas element\n      let canvas: any;\n      \n      if ((globalThis as any)?.document?.createElement) {\n        canvas = (globalThis as any).document.createElement('canvas');\n        canvas.width = this.config.width || 600;\n        canvas.height = this.config.height || 400;\n        \n        if (this.container.appendChild) {\n          this.container.appendChild(canvas);\n        }\n      } else {\n        // Fallback for non-browser environments\n        canvas = {\n          width: this.config.width || 600,\n          height: this.config.height || 400,\n          getContext: () => ({\n            fillStyle: '',\n            strokeStyle: '',\n            lineWidth: 1,\n            lineCap: 'round',\n            font: '12px Arial',\n            textAlign: 'center',\n            textBaseline: 'middle',\n            fillRect: () => {},\n            fillText: () => {},\n            beginPath: () => {},\n            moveTo: () => {},\n            lineTo: () => {},\n            arc: () => {},\n            fill: () => {},\n            stroke: () => {},\n            setLineDash: () => {}\n          }),\n          toDataURL: () => 'data:image/png;base64,',\n          style: {}\n        };\n      }\n\n      this.canvas2d = new Canvas2DRenderer(canvas);\n    } catch (error) {\n      console.warn('Could not initialize 2D visualization:', error);\n    }\n  }\n\n  /**\n   * Setup 3D visualization\n   */\n  private setup3DVisualization(): void {\n    try {\n      // Check if 3Dmol.js is available\n      if ((globalThis as any)?.$3Dmol) {\n        this.initialize3DViewer();\n      } else {\n        this.initializeFallback3D();\n      }\n    } catch (error) {\n      console.warn('Could not initialize 3D visualization:', error);\n      this.initializeFallback3D();\n    }\n  }\n\n  /**\n   * Initialize 3Dmol.js viewer\n   */\n  private initialize3DViewer(): void {\n    try {\n      const $3Dmol = (globalThis as any).$3Dmol;\n      this.viewer3d = $3Dmol.createViewer(this.container, {\n        defaultcolors: $3Dmol.elementColors.defaultColors\n      });\n    } catch (error) {\n      console.warn('Failed to create 3Dmol viewer:', error);\n      this.initializeFallback3D();\n    }\n  }\n\n  /**\n   * Initialize fallback 3D visualization\n   */\n  private initializeFallback3D(): void {\n    this.viewer3d = {\n      addModel: () => ({ setStyle: () => {}, show: () => {} }),\n      setStyle: () => {},\n      zoomTo: () => {},\n      render: () => {},\n      clear: () => {},\n      resize: () => {}\n    };\n  }\n\n  /**\n   * Load and display a molecule\n   */\n  loadMolecule(data: MoleculeVisualizationData): void {\n    this.currentMolecule = data;\n\n    if (this.config.mode === '2d' || this.config.mode === 'both') {\n      this.render2D(data);\n    }\n\n    if (this.config.mode === '3d' || this.config.mode === 'both') {\n      this.render3D(data);\n    }\n  }\n\n  /**\n   * Render molecule in 2D\n   */\n  private render2D(data: MoleculeVisualizationData): void {\n    if (!this.canvas2d) return;\n\n    try {\n      let molecule2d: Molecule2D;\n\n      if (data.smiles) {\n        molecule2d = Canvas2DRenderer.smilesToMolecule2D(data.smiles);\n      } else if (data.atoms && data.bonds) {\n        molecule2d = {\n          atoms: data.atoms.map((atom, i) => ({\n            element: atom.element,\n            position: { x: atom.x * 50 + 100, y: atom.y * 50 + 100 },\n            bonds: data.bonds!\n              .filter(bond => bond.atom1 === i || bond.atom2 === i)\n              .map((_, j) => j)\n          })),\n          bonds: data.bonds.map(bond => ({\n            atom1: bond.atom1,\n            atom2: bond.atom2,\n            order: bond.order,\n            type: bond.order === 1 ? 'single' : bond.order === 2 ? 'double' : 'triple'\n          }))\n        };\n      } else {\n        // Default fallback molecule\n        molecule2d = Canvas2DRenderer.smilesToMolecule2D('C');\n      }\n\n      this.canvas2d.loadMolecule(molecule2d);\n    } catch (error) {\n      console.warn('Error rendering 2D molecule:', error);\n    }\n  }\n\n  /**\n   * Render molecule in 3D\n   */\n  private render3D(data: MoleculeVisualizationData): void {\n    if (!this.viewer3d) return;\n\n    try {\n      this.viewer3d.clear();\n\n      if (data.pdb) {\n        const model = this.viewer3d.addModel(data.pdb, 'pdb');\n        model.setStyle({}, { [this.styleOptions.style || 'stick']: {} });\n        model.show();\n      } else if (data.sdf) {\n        const model = this.viewer3d.addModel(data.sdf, 'sdf');\n        model.setStyle({}, { [this.styleOptions.style || 'stick']: {} });\n        model.show();\n      }\n\n      this.viewer3d.zoomTo();\n      this.viewer3d.render();\n    } catch (error) {\n      console.warn('Error rendering 3D molecule:', error);\n    }\n  }\n\n  /**\n   * Update visualization style\n   */\n  updateStyle(options: Partial<MolecularStyleOptions>): void {\n    this.styleOptions = { ...this.styleOptions, ...options };\n\n    if (this.currentMolecule) {\n      this.loadMolecule(this.currentMolecule);\n    }\n  }\n\n  /**\n   * Export current visualization as image\n   */\n  exportImage(format: 'png' | 'jpg' = 'png'): string {\n    if (this.canvas2d && (this.config.mode === '2d' || this.config.mode === 'both')) {\n      return this.canvas2d.exportImage(format);\n    }\n    return '';\n  }\n\n  /**\n   * Reset visualization to default view\n   */\n  resetView(): void {\n    if (this.canvas2d) {\n      this.canvas2d.resetView();\n    }\n\n    if (this.viewer3d && this.viewer3d.zoomTo) {\n      this.viewer3d.zoomTo();\n      this.viewer3d.render();\n    }\n  }\n\n  /**\n   * Resize the visualization\n   */\n  resize(width: number, height: number): void {\n    this.config.width = width;\n    this.config.height = height;\n\n    if (this.viewer3d && this.viewer3d.resize) {\n      this.viewer3d.resize();\n    }\n\n    // For 2D, would need to recreate canvas\n    if (this.canvas2d) {\n      this.setup2DVisualization();\n      if (this.currentMolecule) {\n        this.render2D(this.currentMolecule);\n      }\n    }\n  }\n\n  /**\n   * Get current molecule data\n   */\n  getMolecule(): MoleculeVisualizationData | undefined {\n    return this.currentMolecule;\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    if (this.viewer3d && this.viewer3d.clear) {\n      this.viewer3d.clear();\n    }\n    \n    this.canvas2d = undefined;\n    this.viewer3d = undefined;\n    this.currentMolecule = undefined;\n  }\n}\n\n/**\n * Utility functions for molecular data conversion\n */\nexport class MolecularDataUtils {\n  /**\n   * Convert PDB string to basic atom/bond data\n   */\n  static parsePDB(pdbString: string): MoleculeVisualizationData {\n    const atoms: Array<{ element: string; x: number; y: number; z: number }> = [];\n    const bonds: Array<{ atom1: number; atom2: number; order: number }> = [];\n\n    const lines = pdbString.split('\\n');\n    \n    for (const line of lines) {\n      if (line.startsWith('ATOM') || line.startsWith('HETATM')) {\n        const element = line.substring(76, 78).trim() || line.substring(12, 16).trim().charAt(0);\n        const x = parseFloat(line.substring(30, 38));\n        const y = parseFloat(line.substring(38, 46));\n        const z = parseFloat(line.substring(46, 54));\n        \n        if (!isNaN(x) && !isNaN(y) && !isNaN(z)) {\n          atoms.push({ element, x, y, z });\n        }\n      }\n    }\n\n    // Simple bond detection based on distance\n    for (let i = 0; i < atoms.length; i++) {\n      for (let j = i + 1; j < atoms.length; j++) {\n        const dx = atoms[i].x - atoms[j].x;\n        const dy = atoms[i].y - atoms[j].y;\n        const dz = atoms[i].z - atoms[j].z;\n        const distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n        \n        // Typical bond distance thresholds\n        if (distance < 2.0) {\n          bonds.push({ atom1: i, atom2: j, order: 1 });\n        }\n      }\n    }\n\n    return { pdb: pdbString, atoms, bonds };\n  }\n\n  /**\n   * Generate sample molecules for testing\n   */\n  static generateSampleMolecule(type: 'water' | 'methane' | 'benzene' = 'water'): MoleculeVisualizationData {\n    switch (type) {\n      case 'water':\n        return {\n          smiles: 'O',\n          atoms: [\n            { element: 'O', x: 0, y: 0, z: 0 },\n            { element: 'H', x: 0.757, y: 0.587, z: 0 },\n            { element: 'H', x: -0.757, y: 0.587, z: 0 }\n          ],\n          bonds: [\n            { atom1: 0, atom2: 1, order: 1 },\n            { atom1: 0, atom2: 2, order: 1 }\n          ]\n        };\n\n      case 'methane':\n        return {\n          smiles: 'C',\n          atoms: [\n            { element: 'C', x: 0, y: 0, z: 0 },\n            { element: 'H', x: 1.089, y: 0, z: 0 },\n            { element: 'H', x: -0.363, y: 1.027, z: 0 },\n            { element: 'H', x: -0.363, y: -0.513, z: 0.889 },\n            { element: 'H', x: -0.363, y: -0.513, z: -0.889 }\n          ],\n          bonds: [\n            { atom1: 0, atom2: 1, order: 1 },\n            { atom1: 0, atom2: 2, order: 1 },\n            { atom1: 0, atom2: 3, order: 1 },\n            { atom1: 0, atom2: 4, order: 1 }\n          ]\n        };\n\n      case 'benzene':\n        return {\n          smiles: 'c1ccccc1',\n          atoms: [\n            { element: 'C', x: 1.4, y: 0, z: 0 },\n            { element: 'C', x: 0.7, y: 1.2, z: 0 },\n            { element: 'C', x: -0.7, y: 1.2, z: 0 },\n            { element: 'C', x: -1.4, y: 0, z: 0 },\n            { element: 'C', x: -0.7, y: -1.2, z: 0 },\n            { element: 'C', x: 0.7, y: -1.2, z: 0 }\n          ],\n          bonds: [\n            { atom1: 0, atom2: 1, order: 1 },\n            { atom1: 1, atom2: 2, order: 2 },\n            { atom1: 2, atom2: 3, order: 1 },\n            { atom1: 3, atom2: 4, order: 2 },\n            { atom1: 4, atom2: 5, order: 1 },\n            { atom1: 5, atom2: 0, order: 2 }\n          ]\n        };\n\n      default:\n        return this.generateSampleMolecule('water');\n    }\n  }\n}\n\nexport default MolecularVisualization;\n","/**\n * RDKit.js Wrapper for CREB Molecular Visualization\n * Provides unified API for advanced molecular structure processing and generation\n * \n * Features:\n * - SMILES/SMARTS parsing and validation\n * - 2D coordinate generation with RDKit algorithms\n * - Molecular descriptors and properties calculation\n * - Substructure searching and matching\n * - Chemical transformation operations\n * - SVG generation with RDKit's advanced rendering\n */\n\nexport interface RDKitMolecule {\n  smiles: string;\n  molblock?: string;\n  atoms: RDKitAtom[];\n  bonds: RDKitBond[];\n  properties: MolecularProperties;\n}\n\nexport interface RDKitAtom {\n  atomicNum: number;\n  symbol: string;\n  x: number;\n  y: number;\n  z?: number;\n  charge: number;\n  hybridization: string;\n  aromantic: boolean;\n  inRing: boolean;\n}\n\nexport interface RDKitBond {\n  beginAtomIdx: number;\n  endAtomIdx: number;\n  bondType: 'SINGLE' | 'DOUBLE' | 'TRIPLE' | 'AROMATIC';\n  isInRing: boolean;\n  isConjugated: boolean;\n}\n\nexport interface MolecularProperties {\n  molecularWeight: number;\n  logP: number;\n  tpsa: number; // Topological Polar Surface Area\n  hbd: number;  // Hydrogen Bond Donors\n  hba: number;  // Hydrogen Bond Acceptors\n  rotatableBonds: number;\n  aromaticRings: number;\n  aliphaticRings: number;\n  formula: string;\n  inchi: string;\n  inchiKey: string;\n}\n\nexport interface RDKitConfig {\n  kekulize: boolean;\n  addCoords: boolean;\n  removeHs: boolean;\n  sanitize: boolean;\n  useCoordGen: boolean;\n  width: number;\n  height: number;\n  offsetx: number;\n  offsety: number;\n}\n\nexport interface SubstructureMatch {\n  atomIds: number[];\n  bondIds: number[];\n  matched: boolean;\n}\n\nexport interface ChemicalTransformation {\n  reactant: string;\n  product: string;\n  reactionSmarts: string;\n}\n\n/**\n * RDKit.js Wrapper Class\n * Provides simplified access to RDKit functionality within CREB\n */\nexport class RDKitWrapper {\n  private rdkit: any = null;\n  private initialized = false;\n  private config: RDKitConfig;\n\n  constructor(config: Partial<RDKitConfig> = {}) {\n    this.config = {\n      kekulize: true,\n      addCoords: true,\n      removeHs: true,\n      sanitize: true,\n      useCoordGen: true,\n      width: 600,\n      height: 400,\n      offsetx: 0,\n      offsety: 0,\n      ...config\n    };\n  }\n\n  /**\n   * Initialize RDKit.js library using the official pattern\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Browser environment - use official initRDKitModule\n      if (typeof window !== 'undefined') {\n        // Check if initRDKitModule is available globally (official method)\n        if (typeof (window as any).initRDKitModule === 'function') {\n          console.log('Initializing RDKit using official initRDKitModule...');\n          this.rdkit = await (window as any).initRDKitModule();\n          this.initialized = true;\n          console.log('RDKit initialized successfully, version:', this.rdkit.version());\n          return;\n        }\n\n        // Fallback: check if RDKit is already available globally\n        if ((window as any).RDKit) {\n          console.log('Using pre-loaded RDKit instance...');\n          this.rdkit = (window as any).RDKit;\n          this.initialized = true;\n          return;\n        }\n\n        // Try dynamic import as last resort\n        try {\n          // Use string-based import to avoid build-time type checking\n          const rdkitModule = await import('@' + 'rdkit' + '/' + 'rdkit');\n          this.rdkit = await (rdkitModule as any).initRDKitModule();\n          this.initialized = true;\n          return;\n        } catch (importError) {\n          console.warn('Dynamic import failed:', importError);\n        }\n\n        throw new Error('RDKit.js not available - please ensure RDKit.js is loaded via script tag');\n      } else {\n        // Node.js environment\n        console.warn('RDKit.js not available in Node.js environment. Using fallback implementations.');\n        this.rdkit = this.createFallbackRDKit();\n        this.initialized = true;\n      }\n      \n      this.initialized = true;\n    } catch (error) {\n      console.warn('RDKit.js initialization failed:', error);\n      this.rdkit = this.createFallbackRDKit();\n      this.initialized = true;\n    }\n  }\n\n  /**\n   * Parse SMILES string and generate molecule object\n   */\n  async parseSMILES(smiles: string): Promise<RDKitMolecule | null> {\n    await this.initialize();\n\n    try {\n      if (!this.rdkit.get_mol) {\n        return this.fallbackParseSMILES(smiles);\n      }\n\n      const mol = this.rdkit.get_mol(smiles);\n      if (!mol || !mol.is_valid()) {\n        throw new Error(`Invalid SMILES: ${smiles}`);\n      }\n\n      // Generate 2D coordinates\n      if (this.config.addCoords) {\n        mol.generate_2d_coords();\n      }\n\n      // Extract molecule data\n      const molData = this.extractMoleculeData(mol);\n      \n      // Cleanup RDKit object\n      mol.delete();\n\n      return molData;\n    } catch (error) {\n      console.error('SMILES parsing failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Generate SVG representation of molecule\n   */\n  async generateSVG(smiles: string, options: Partial<RDKitConfig> = {}): Promise<string> {\n    await this.initialize();\n\n    const config = { ...this.config, ...options };\n\n    try {\n      if (!this.rdkit.get_mol) {\n        return this.fallbackGenerateSVG(smiles, config);\n      }\n\n      const mol = this.rdkit.get_mol(smiles);\n      if (!mol || !mol.is_valid()) {\n        throw new Error(`Invalid SMILES: ${smiles}`);\n      }\n\n      // Generate SVG\n      const svg = mol.get_svg_with_highlights(\n        JSON.stringify({\n          width: config.width,\n          height: config.height,\n          offsetx: config.offsetx,\n          offsety: config.offsety\n        })\n      );\n\n      mol.delete();\n      return svg;\n    } catch (error) {\n      console.error('SVG generation failed:', error);\n      return this.fallbackGenerateSVG(smiles, config);\n    }\n  }\n\n  /**\n   * Calculate molecular descriptors\n   */\n  async calculateDescriptors(smiles: string): Promise<MolecularProperties> {\n    await this.initialize();\n\n    try {\n      if (!this.rdkit.get_mol) {\n        return this.fallbackCalculateDescriptors(smiles);\n      }\n\n      const mol = this.rdkit.get_mol(smiles);\n      if (!mol || !mol.is_valid()) {\n        throw new Error(`Invalid SMILES: ${smiles}`);\n      }\n\n      const descriptors = JSON.parse(mol.get_descriptors());\n      const properties: MolecularProperties = {\n        molecularWeight: descriptors.amw || 0,\n        logP: descriptors.clogp || 0,\n        tpsa: descriptors.tpsa || 0,\n        hbd: descriptors.lipinskiHBD || 0,\n        hba: descriptors.lipinskiHBA || 0,\n        rotatableBonds: descriptors.NumRotatableBonds || 0,\n        aromaticRings: descriptors.NumAromaticRings || 0,\n        aliphaticRings: descriptors.NumAliphaticRings || 0,\n        formula: mol.get_molformula() || '',\n        inchi: mol.get_inchi() || '',\n        inchiKey: mol.get_inchi_key() || ''\n      };\n\n      mol.delete();\n      return properties;\n    } catch (error) {\n      console.error('Descriptor calculation failed:', error);\n      return this.fallbackCalculateDescriptors(smiles);\n    }\n  }\n\n  /**\n   * Perform substructure search\n   */\n  async findSubstructure(moleculeSmiles: string, querySmarts: string): Promise<SubstructureMatch[]> {\n    await this.initialize();\n\n    try {\n      if (!this.rdkit.get_mol) {\n        return this.fallbackFindSubstructure(moleculeSmiles, querySmarts);\n      }\n\n      const mol = this.rdkit.get_mol(moleculeSmiles);\n      const query = this.rdkit.get_qmol(querySmarts);\n\n      if (!mol || !mol.is_valid() || !query || !query.is_valid()) {\n        throw new Error('Invalid molecule or query structure');\n      }\n\n      const matches = JSON.parse(mol.get_substruct_matches(query));\n      \n      mol.delete();\n      query.delete();\n\n      return matches.map((match: any) => ({\n        atomIds: match.atoms || [],\n        bondIds: match.bonds || [],\n        matched: true\n      }));\n    } catch (error) {\n      console.error('Substructure search failed:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Apply chemical transformation\n   */\n  async applyTransformation(smiles: string, reactionSmarts: string): Promise<string[]> {\n    await this.initialize();\n\n    try {\n      if (!this.rdkit.get_mol) {\n        return this.fallbackApplyTransformation(smiles, reactionSmarts);\n      }\n\n      const mol = this.rdkit.get_mol(smiles);\n      const rxn = this.rdkit.get_rxn(reactionSmarts);\n\n      if (!mol || !mol.is_valid() || !rxn || !rxn.is_valid()) {\n        throw new Error('Invalid molecule or reaction');\n      }\n\n      const products = JSON.parse(rxn.run_reactants([mol]));\n      \n      mol.delete();\n      rxn.delete();\n\n      return products.map((product: any) => product.smiles || '');\n    } catch (error) {\n      console.error('Chemical transformation failed:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Validate SMILES string\n   */\n  async validateSMILES(smiles: string): Promise<boolean> {\n    await this.initialize();\n\n    try {\n      if (!this.rdkit.get_mol) {\n        return this.fallbackValidateSMILES(smiles);\n      }\n\n      const mol = this.rdkit.get_mol(smiles);\n      const isValid = mol && mol.is_valid();\n      \n      if (mol) mol.delete();\n      return isValid;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Extract detailed molecule data from RDKit molecule object\n   */\n  private extractMoleculeData(mol: any): RDKitMolecule {\n    const molblock = mol.get_molblock();\n    const smiles = mol.get_smiles();\n    \n    // Get atom and bond information\n    const atoms: RDKitAtom[] = [];\n    const bonds: RDKitBond[] = [];\n\n    try {\n      const molData = JSON.parse(mol.get_json());\n      \n      // Extract atoms\n      if (molData.atoms) {\n        molData.atoms.forEach((atom: any, index: number) => {\n          atoms.push({\n            atomicNum: atom.z || 0,\n            symbol: atom.l || 'C',\n            x: atom.x || 0,\n            y: atom.y || 0,\n            z: atom.z || 0,\n            charge: atom.c || 0,\n            hybridization: atom.h || 'sp3',\n            aromantic: atom.a || false,\n            inRing: atom.r || false\n          });\n        });\n      }\n\n      // Extract bonds\n      if (molData.bonds) {\n        molData.bonds.forEach((bond: any) => {\n          bonds.push({\n            beginAtomIdx: bond.b || 0,\n            endAtomIdx: bond.e || 0,\n            bondType: this.mapBondType(bond.o || 1),\n            isInRing: bond.r || false,\n            isConjugated: bond.c || false\n          });\n        });\n      }\n    } catch (error) {\n      console.warn('Failed to extract detailed molecule data:', error);\n    }\n\n    return {\n      smiles,\n      molblock,\n      atoms,\n      bonds,\n      properties: {\n        molecularWeight: 0,\n        logP: 0,\n        tpsa: 0,\n        hbd: 0,\n        hba: 0,\n        rotatableBonds: 0,\n        aromaticRings: 0,\n        aliphaticRings: 0,\n        formula: mol.get_molformula() || '',\n        inchi: mol.get_inchi() || '',\n        inchiKey: mol.get_inchi_key() || ''\n      }\n    };\n  }\n\n  /**\n   * Map RDKit bond order to bond type\n   */\n  private mapBondType(order: number): 'SINGLE' | 'DOUBLE' | 'TRIPLE' | 'AROMATIC' {\n    switch (order) {\n      case 1: return 'SINGLE';\n      case 2: return 'DOUBLE';\n      case 3: return 'TRIPLE';\n      case 12: return 'AROMATIC';\n      default: return 'SINGLE';\n    }\n  }\n\n  /**\n   * Create fallback RDKit implementation for environments where RDKit.js is not available\n   */\n  private createFallbackRDKit(): any {\n    return {\n      get_mol: null,\n      get_qmol: null,\n      get_rxn: null\n    };\n  }\n\n  /**\n   * Fallback implementations for when RDKit.js is not available\n   */\n  private fallbackParseSMILES(smiles: string): RDKitMolecule {\n    // Simple SMILES parsing fallback\n    const atomCount = smiles.length; // Simplified\n    return {\n      smiles,\n      atoms: [],\n      bonds: [],\n      properties: {\n        molecularWeight: atomCount * 12, // Rough estimate\n        logP: 0,\n        tpsa: 0,\n        hbd: 0,\n        hba: 0,\n        rotatableBonds: 0,\n        aromaticRings: 0,\n        aliphaticRings: 0,\n        formula: smiles,\n        inchi: '',\n        inchiKey: ''\n      }\n    };\n  }\n\n  private fallbackGenerateSVG(smiles: string, config: RDKitConfig): string {\n    return `<svg width=\"${config.width}\" height=\"${config.height}\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"100%\" height=\"100%\" fill=\"white\"/>\n      <text x=\"${config.width/2}\" y=\"${config.height/2}\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"16\">\n        ${smiles}\n      </text>\n      <text x=\"${config.width/2}\" y=\"${config.height/2 + 25}\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"12\" fill=\"#666\">\n        (RDKit.js not available - showing SMILES)\n      </text>\n    </svg>`;\n  }\n\n  private fallbackCalculateDescriptors(smiles: string): MolecularProperties {\n    return {\n      molecularWeight: smiles.length * 12, // Very rough estimate\n      logP: 0,\n      tpsa: 0,\n      hbd: 0,\n      hba: 0,\n      rotatableBonds: 0,\n      aromaticRings: 0,\n      aliphaticRings: 0,\n      formula: smiles,\n      inchi: '',\n      inchiKey: ''\n    };\n  }\n\n  private fallbackFindSubstructure(moleculeSmiles: string, querySmarts: string): SubstructureMatch[] {\n    // Simple substring search as fallback\n    const matched = moleculeSmiles.includes(querySmarts);\n    return matched ? [{ atomIds: [], bondIds: [], matched: true }] : [];\n  }\n\n  private fallbackApplyTransformation(smiles: string, reactionSmarts: string): string[] {\n    // No transformation capability in fallback\n    return [smiles];\n  }\n\n  private fallbackValidateSMILES(smiles: string): boolean {\n    // Basic validation - check for common SMILES characters\n    const smilesPattern = /^[A-Za-z0-9@+\\-\\[\\]()=#:/\\\\%*.]+$/;\n    return smilesPattern.test(smiles) && smiles.length > 0;\n  }\n\n  /**\n   * Cleanup resources\n   */\n  dispose(): void {\n    // RDKit.js cleanup if needed\n    this.initialized = false;\n  }\n}\n\n/**\n * Static utility methods for RDKit operations\n */\nexport class RDKitUtils {\n  /**\n   * Convert CREB molecule format to RDKit-compatible format\n   */\n  static crebToRDKit(crebMolecule: any): RDKitMolecule {\n    // Implementation for converting CREB format to RDKit format\n    return {\n      smiles: crebMolecule.formula || '',\n      atoms: [],\n      bonds: [],\n      properties: {\n        molecularWeight: 0,\n        logP: 0,\n        tpsa: 0,\n        hbd: 0,\n        hba: 0,\n        rotatableBonds: 0,\n        aromaticRings: 0,\n        aliphaticRings: 0,\n        formula: crebMolecule.formula || '',\n        inchi: '',\n        inchiKey: ''\n      }\n    };\n  }\n\n  /**\n   * Convert RDKit molecule to CREB format\n   */\n  static rdkitToCreb(rdkitMolecule: RDKitMolecule): any {\n    return {\n      formula: rdkitMolecule.properties.formula,\n      elements: rdkitMolecule.atoms.map(atom => atom.symbol),\n      smiles: rdkitMolecule.smiles,\n      molecularWeight: rdkitMolecule.properties.molecularWeight\n    };\n  }\n\n  /**\n   * Generate common chemical patterns for substructure searching\n   */\n  static getCommonPatterns(): Record<string, string> {\n    return {\n      benzene: 'c1ccccc1',\n      alcohol: '[OH]',\n      carbonyl: 'C=O',\n      carboxyl: 'C(=O)O',\n      amine: 'N',\n      ester: 'C(=O)O',\n      ether: 'COC',\n      alkene: 'C=C',\n      alkyne: 'C#C',\n      phenol: 'c1ccc(O)cc1'\n    };\n  }\n}\n\nexport default RDKitWrapper;\n","/**\n * 3Dmol.js Wrapper for CREB Molecular Visualization\n * Provides unified API for advanced 3D molecular structure visualization\n * \n * Features:\n * - Interactive 3D molecular visualization with WebGL\n * - Multiple rendering styles (ball-and-stick, space-filling, cartoon, etc.)\n * - Animation and transition effects\n * - Chemical property visualization (electrostatic, hydrophobic surfaces)\n * - Multi-molecule scene management\n * - Export capabilities (PNG, WebM, molecular formats)\n * - Event handling for molecular interactions\n */\n\nexport interface Mol3DConfig {\n  backgroundColor: string;\n  width: number;\n  height: number;\n  antialias: boolean;\n  alpha: boolean;\n  preserveDrawingBuffer: boolean;\n  premultipliedAlpha: boolean;\n  camera: CameraConfig;\n  lighting: LightingConfig;\n  fog: FogConfig;\n}\n\nexport interface CameraConfig {\n  fov: number;\n  near: number;\n  far: number;\n  position: { x: number; y: number; z: number };\n  target: { x: number; y: number; z: number };\n  up: { x: number; y: number; z: number };\n}\n\nexport interface LightingConfig {\n  ambient: string;\n  directional: Array<{\n    color: string;\n    intensity: number;\n    position: { x: number; y: number; z: number };\n  }>;\n}\n\nexport interface FogConfig {\n  enabled: boolean;\n  color: string;\n  near: number;\n  far: number;\n}\n\nexport interface Mol3DStyle {\n  stick?: StickStyle;\n  sphere?: SphereStyle;\n  cartoon?: CartoonStyle;\n  surface?: SurfaceStyle;\n  line?: LineStyle;\n  cross?: CrossStyle;\n}\n\nexport interface StickStyle {\n  radius?: number;\n  colorscheme?: string;\n  colors?: Record<string, string>;\n  hidden?: boolean;\n  opacity?: number;\n}\n\nexport interface SphereStyle {\n  radius?: number;\n  scale?: number;\n  colorscheme?: string;\n  colors?: Record<string, string>;\n  hidden?: boolean;\n  opacity?: number;\n}\n\nexport interface CartoonStyle {\n  color?: string;\n  style?: 'trace' | 'oval' | 'tube' | 'ribbon' | 'arrow';\n  ribbon?: boolean;\n  arrows?: boolean;\n  tubes?: boolean;\n  opacity?: number;\n  thickness?: number;\n}\n\nexport interface SurfaceStyle {\n  opacity?: number;\n  colorscheme?: string;\n  map?: any;\n  material?: 'basic' | 'lambert' | 'phong';\n  wireframe?: boolean;\n  linewidth?: number;\n  smooth?: number;\n}\n\nexport interface LineStyle {\n  linewidth?: number;\n  colorscheme?: string;\n  colors?: Record<string, string>;\n  hidden?: boolean;\n}\n\nexport interface CrossStyle {\n  radius?: number;\n  scale?: number;\n  colorscheme?: string;\n  colors?: Record<string, string>;\n  hidden?: boolean;\n}\n\nexport interface Mol3DAtom {\n  elem: string;\n  x: number;\n  y: number;\n  z: number;\n  serial?: number;\n  atom?: string;\n  resn?: string;\n  chain?: string;\n  resi?: number;\n  b?: number;\n  pdbline?: string;\n  bonds?: number[];\n  bondOrder?: number[];\n  properties?: Record<string, any>;\n}\n\nexport interface Mol3DMolecule {\n  atoms: Mol3DAtom[];\n  title?: string;\n  format?: 'pdb' | 'sdf' | 'mol2' | 'xyz' | 'cml';\n  data?: string;\n}\n\nexport interface AnimationOptions {\n  duration: number;\n  easing?: 'linear' | 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out';\n  loop?: boolean;\n  autoplay?: boolean;\n  direction?: 'forward' | 'reverse' | 'alternate';\n}\n\nexport interface ExportOptions {\n  format: 'png' | 'webm' | 'pdb' | 'sdf' | 'mol2';\n  width?: number;\n  height?: number;\n  quality?: number;\n  fps?: number; // For WebM export\n  duration?: number; // For WebM export\n}\n\nexport interface InteractionEvent {\n  type: 'click' | 'hover' | 'select' | 'drag';\n  atom?: Mol3DAtom;\n  atoms?: Mol3DAtom[];\n  position: { x: number; y: number; z: number };\n  screenPosition: { x: number; y: number };\n}\n\n/**\n * 3Dmol.js Wrapper Class\n * Provides simplified access to 3Dmol.js functionality within CREB\n */\nexport class Mol3DWrapper {\n  private viewer: any = null;\n  private container: HTMLElement | null = null;\n  private initialized = false;\n  private config: Mol3DConfig;\n  private molecules: Map<string, Mol3DMolecule> = new Map();\n  private eventHandlers: Map<string, Function[]> = new Map();\n\n  constructor(container: HTMLElement | string, config: Partial<Mol3DConfig> = {}) {\n    this.container = typeof container === 'string' \n      ? document.getElementById(container) \n      : container;\n      \n    this.config = {\n      backgroundColor: '#ffffff',\n      width: 600,\n      height: 400,\n      antialias: true,\n      alpha: false,\n      preserveDrawingBuffer: true,\n      premultipliedAlpha: false,\n      camera: {\n        fov: 45,\n        near: 0.1,\n        far: 1000,\n        position: { x: 0, y: 0, z: 50 },\n        target: { x: 0, y: 0, z: 0 },\n        up: { x: 0, y: 1, z: 0 }\n      },\n      lighting: {\n        ambient: '#404040',\n        directional: [\n          {\n            color: '#ffffff',\n            intensity: 1.0,\n            position: { x: 1, y: 1, z: 1 }\n          }\n        ]\n      },\n      fog: {\n        enabled: false,\n        color: '#ffffff',\n        near: 50,\n        far: 100\n      },\n      ...config\n    };\n  }\n\n  /**\n   * Initialize 3Dmol.js viewer\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized || !this.container) return;\n\n    try {\n      // Dynamic import for 3Dmol.js\n      let $3Dmol: any;\n      \n      if (typeof window !== 'undefined') {\n        // Browser environment - try different import methods\n        try {\n          // Use string-based import to avoid build-time type checking\n          $3Dmol = await import('3' + 'dmol');\n        } catch {\n          // Fallback to global $3Dmol if module import fails\n          $3Dmol = (window as any).$3Dmol;\n        }\n      }\n\n      if (!$3Dmol) {\n        console.warn('3Dmol.js not available. Using fallback implementation.');\n        this.viewer = this.createFallbackViewer();\n      } else {\n        // Create 3Dmol viewer\n        this.viewer = $3Dmol.createViewer(this.container, {\n          backgroundColor: this.config.backgroundColor,\n          antialias: this.config.antialias,\n          alpha: this.config.alpha,\n          preserveDrawingBuffer: this.config.preserveDrawingBuffer,\n          premultipliedAlpha: this.config.premultipliedAlpha\n        });\n\n        // Configure camera\n        this.viewer.setCameraParameters({\n          fov: this.config.camera.fov,\n          near: this.config.camera.near,\n          far: this.config.camera.far\n        });\n\n        // Set initial camera position\n        this.viewer.setViewStyle({\n          style: 'outline',\n          color: 'black',\n          width: 0.1\n        });\n      }\n\n      this.initialized = true;\n      this.setupEventHandlers();\n    } catch (error) {\n      console.warn('3Dmol.js initialization failed:', error);\n      this.viewer = this.createFallbackViewer();\n      this.initialized = true;\n    }\n  }\n\n  /**\n   * Get the 3Dmol viewer instance\n   */\n  getViewer(): any {\n    return this.viewer;\n  }\n\n  /**\n   * Add molecule to the scene\n   */\n  async addMolecule(\n    id: string, \n    moleculeData: string | Mol3DMolecule, \n    format: 'pdb' | 'sdf' | 'mol2' | 'xyz' | 'cml' = 'pdb'\n  ): Promise<void> {\n    await this.initialize();\n\n    try {\n      let molecule: Mol3DMolecule;\n\n      if (typeof moleculeData === 'string') {\n        // Parse molecule data\n        molecule = this.parseMoleculeData(moleculeData, format);\n        if (this.viewer.addModel) {\n          this.viewer.addModel(moleculeData, format);\n        }\n      } else {\n        molecule = moleculeData;\n        if (this.viewer.addModel && molecule.data) {\n          this.viewer.addModel(molecule.data, molecule.format || format);\n        }\n      }\n\n      this.molecules.set(id, molecule);\n      this.render();\n    } catch (error) {\n      console.error('Failed to add molecule:', error);\n    }\n  }\n\n  /**\n   * Remove molecule from the scene\n   */\n  removeMolecule(id: string): void {\n    if (this.molecules.has(id)) {\n      this.molecules.delete(id);\n      // Remove from 3Dmol viewer\n      if (this.viewer.removeAllModels) {\n        this.viewer.removeAllModels();\n        // Re-add remaining molecules\n        this.molecules.forEach((molecule, moleculeId) => {\n          if (molecule.data && moleculeId !== id) {\n            this.viewer.addModel(molecule.data, molecule.format || 'pdb');\n          }\n        });\n      }\n      this.render();\n    }\n  }\n\n  /**\n   * Set visualization style for molecules\n   */\n  setStyle(style: Mol3DStyle, selector?: any): void {\n    if (!this.viewer.setStyle) {\n      console.warn('Style setting not available in fallback mode');\n      return;\n    }\n\n    try {\n      this.viewer.setStyle(selector || {}, style);\n      this.render();\n    } catch (error) {\n      console.error('Failed to set style:', error);\n    }\n  }\n\n  /**\n   * Add surface to molecule\n   */\n  addSurface(\n    surfaceType: 'VDW' | 'SAS' | 'MS' | 'SES' = 'VDW',\n    style: SurfaceStyle = {},\n    selector?: any\n  ): void {\n    if (!this.viewer.addSurface) {\n      console.warn('Surface rendering not available in fallback mode');\n      return;\n    }\n\n    try {\n      this.viewer.addSurface(surfaceType, style, selector);\n      this.render();\n    } catch (error) {\n      console.error('Failed to add surface:', error);\n    }\n  }\n\n  /**\n   * Animate camera movement\n   */\n  animateCamera(\n    targetPosition: { x: number; y: number; z: number },\n    options: AnimationOptions = { duration: 1000 }\n  ): Promise<void> {\n    return new Promise((resolve) => {\n      if (!this.viewer.animate) {\n        console.warn('Animation not available in fallback mode');\n        resolve();\n        return;\n      }\n\n      try {\n        this.viewer.animate({\n          camera: targetPosition,\n          duration: options.duration,\n          easing: options.easing || 'ease'\n        });\n\n        setTimeout(resolve, options.duration);\n      } catch (error) {\n        console.error('Camera animation failed:', error);\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Animate molecular properties\n   */\n  animateMolecule(\n    properties: Record<string, any>,\n    options: AnimationOptions = { duration: 1000 }\n  ): Promise<void> {\n    return new Promise((resolve) => {\n      if (!this.viewer.animate) {\n        console.warn('Animation not available in fallback mode');\n        resolve();\n        return;\n      }\n\n      try {\n        this.viewer.animate({\n          ...properties,\n          duration: options.duration,\n          easing: options.easing || 'ease'\n        });\n\n        setTimeout(resolve, options.duration);\n      } catch (error) {\n        console.error('Molecule animation failed:', error);\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Export scene as image or animation\n   */\n  async exportScene(options: ExportOptions): Promise<string | Blob> {\n    if (!this.viewer) {\n      throw new Error('Viewer not initialized');\n    }\n\n    switch (options.format) {\n      case 'png':\n        return this.exportPNG(options);\n      case 'webm':\n        return this.exportWebM(options);\n      case 'pdb':\n      case 'sdf':\n      case 'mol2':\n        return this.exportMoleculeData(options.format);\n      default:\n        throw new Error(`Unsupported export format: ${options.format}`);\n    }\n  }\n\n  /**\n   * Add event listener for molecular interactions\n   */\n  addEventListener(event: string, handler: (event: InteractionEvent) => void): void {\n    if (!this.eventHandlers.has(event)) {\n      this.eventHandlers.set(event, []);\n    }\n    this.eventHandlers.get(event)!.push(handler);\n  }\n\n  /**\n   * Remove event listener\n   */\n  removeEventListener(event: string, handler: (event: InteractionEvent) => void): void {\n    const handlers = this.eventHandlers.get(event);\n    if (handlers) {\n      const index = handlers.indexOf(handler);\n      if (index > -1) {\n        handlers.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Center and fit all molecules in view\n   */\n  zoomToFit(): void {\n    if (this.viewer.zoomTo) {\n      this.viewer.zoomTo();\n      this.render();\n    }\n  }\n\n  /**\n   * Set camera position\n   */\n  setCameraPosition(position: { x: number; y: number; z: number }): void {\n    if (this.viewer.setCameraPosition) {\n      this.viewer.setCameraPosition(position);\n      this.render();\n    }\n  }\n\n  /**\n   * Get current camera position\n   */\n  getCameraPosition(): { x: number; y: number; z: number } {\n    if (this.viewer.getCameraPosition) {\n      return this.viewer.getCameraPosition();\n    }\n    return { x: 0, y: 0, z: 50 };\n  }\n\n  /**\n   * Clear all molecules from scene\n   */\n  clear(): void {\n    this.molecules.clear();\n    if (this.viewer.removeAllModels) {\n      this.viewer.removeAllModels();\n      this.render();\n    }\n  }\n\n  /**\n   * Render the scene\n   */\n  render(): void {\n    if (this.viewer.render) {\n      this.viewer.render();\n    }\n  }\n\n  /**\n   * Resize viewer\n   */\n  resize(width?: number, height?: number): void {\n    if (width) this.config.width = width;\n    if (height) this.config.height = height;\n\n    if (this.viewer.resize) {\n      this.viewer.resize();\n    }\n  }\n\n  /**\n   * Parse molecule data string into structured format\n   */\n  private parseMoleculeData(data: string, format: string): Mol3DMolecule {\n    const atoms: Mol3DAtom[] = [];\n    \n    try {\n      switch (format.toLowerCase()) {\n        case 'pdb':\n          return this.parsePDB(data);\n        case 'sdf':\n        case 'mol':\n          return this.parseSDF(data);\n        case 'xyz':\n          return this.parseXYZ(data);\n        default:\n          console.warn(`Unsupported format: ${format}`);\n          break;\n      }\n    } catch (error) {\n      console.error('Failed to parse molecule data:', error);\n    }\n\n    return {\n      atoms,\n      format: format as any,\n      data\n    };\n  }\n\n  /**\n   * Parse PDB format\n   */\n  private parsePDB(data: string): Mol3DMolecule {\n    const atoms: Mol3DAtom[] = [];\n    const lines = data.split('\\n');\n\n    for (const line of lines) {\n      if (line.startsWith('ATOM') || line.startsWith('HETATM')) {\n        const atom: Mol3DAtom = {\n          elem: line.substring(76, 78).trim() || line.substring(12, 16).trim().charAt(0),\n          x: parseFloat(line.substring(30, 38)),\n          y: parseFloat(line.substring(38, 46)),\n          z: parseFloat(line.substring(46, 54)),\n          serial: parseInt(line.substring(6, 11)),\n          atom: line.substring(12, 16).trim(),\n          resn: line.substring(17, 20).trim(),\n          chain: line.substring(21, 22),\n          resi: parseInt(line.substring(22, 26)),\n          b: parseFloat(line.substring(60, 66)),\n          pdbline: line\n        };\n        atoms.push(atom);\n      }\n    }\n\n    return {\n      atoms,\n      format: 'pdb',\n      data\n    };\n  }\n\n  /**\n   * Parse SDF format\n   */\n  private parseSDF(data: string): Mol3DMolecule {\n    const atoms: Mol3DAtom[] = [];\n    const lines = data.split('\\n');\n    \n    // Find the counts line (typically line 3)\n    const countsLine = lines[3];\n    if (countsLine) {\n      const atomCount = parseInt(countsLine.substring(0, 3));\n      \n      // Parse atom block (starts at line 4)\n      for (let i = 4; i < 4 + atomCount && i < lines.length; i++) {\n        const line = lines[i];\n        const parts = line.trim().split(/\\s+/);\n        \n        if (parts.length >= 4) {\n          atoms.push({\n            elem: parts[3],\n            x: parseFloat(parts[0]),\n            y: parseFloat(parts[1]),\n            z: parseFloat(parts[2])\n          });\n        }\n      }\n    }\n\n    return {\n      atoms,\n      format: 'sdf',\n      data\n    };\n  }\n\n  /**\n   * Parse XYZ format\n   */\n  private parseXYZ(data: string): Mol3DMolecule {\n    const atoms: Mol3DAtom[] = [];\n    const lines = data.split('\\n');\n    \n    if (lines.length < 2) return { atoms, format: 'xyz', data };\n    \n    const atomCount = parseInt(lines[0]);\n    \n    // Parse atoms (start from line 2)\n    for (let i = 2; i < 2 + atomCount && i < lines.length; i++) {\n      const parts = lines[i].trim().split(/\\s+/);\n      \n      if (parts.length >= 4) {\n        atoms.push({\n          elem: parts[0],\n          x: parseFloat(parts[1]),\n          y: parseFloat(parts[2]),\n          z: parseFloat(parts[3])\n        });\n      }\n    }\n\n    return {\n      atoms,\n      format: 'xyz',\n      data\n    };\n  }\n\n  /**\n   * Setup event handlers for viewer interactions\n   */\n  private setupEventHandlers(): void {\n    if (!this.viewer.setClickCallback) return;\n\n    // Click events\n    this.viewer.setClickCallback((event: any) => {\n      const handlers = this.eventHandlers.get('click');\n      if (handlers) {\n        const interactionEvent: InteractionEvent = {\n          type: 'click',\n          atom: event.atom,\n          position: event.position || { x: 0, y: 0, z: 0 },\n          screenPosition: event.screenPosition || { x: 0, y: 0 }\n        };\n        handlers.forEach(handler => handler(interactionEvent));\n      }\n    });\n\n    // Hover events\n    this.viewer.setHoverCallback((event: any) => {\n      const handlers = this.eventHandlers.get('hover');\n      if (handlers) {\n        const interactionEvent: InteractionEvent = {\n          type: 'hover',\n          atom: event.atom,\n          position: event.position || { x: 0, y: 0, z: 0 },\n          screenPosition: event.screenPosition || { x: 0, y: 0 }\n        };\n        handlers.forEach(handler => handler(interactionEvent));\n      }\n    });\n  }\n\n  /**\n   * Export as PNG image\n   */\n  private exportPNG(options: ExportOptions): Promise<string> {\n    return new Promise((resolve, reject) => {\n      if (!this.viewer.pngURI) {\n        reject(new Error('PNG export not available in fallback mode'));\n        return;\n      }\n\n      try {\n        const uri = this.viewer.pngURI({\n          width: options.width || this.config.width,\n          height: options.height || this.config.height\n        });\n        resolve(uri);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Export as WebM animation\n   */\n  private exportWebM(options: ExportOptions): Promise<Blob> {\n    return new Promise((resolve, reject) => {\n      // WebM export would require additional implementation\n      reject(new Error('WebM export not yet implemented'));\n    });\n  }\n\n  /**\n   * Export molecule data in specified format\n   */\n  private exportMoleculeData(format: string): string {\n    const molecules = Array.from(this.molecules.values());\n    if (molecules.length === 0) {\n      return '';\n    }\n\n    // Return the first molecule's data or convert to requested format\n    const molecule = molecules[0];\n    return molecule.data || this.convertMoleculeFormat(molecule, format);\n  }\n\n  /**\n   * Convert molecule to different format\n   */\n  private convertMoleculeFormat(molecule: Mol3DMolecule, targetFormat: string): string {\n    // Basic format conversion (would need more sophisticated implementation)\n    switch (targetFormat.toLowerCase()) {\n      case 'xyz':\n        return this.moleculeToXYZ(molecule);\n      case 'pdb':\n        return this.moleculeToPDB(molecule);\n      default:\n        return molecule.data || '';\n    }\n  }\n\n  /**\n   * Convert molecule to XYZ format\n   */\n  private moleculeToXYZ(molecule: Mol3DMolecule): string {\n    const lines = [\n      molecule.atoms.length.toString(),\n      molecule.title || 'Generated by CREB'\n    ];\n\n    molecule.atoms.forEach(atom => {\n      lines.push(`${atom.elem} ${atom.x.toFixed(6)} ${atom.y.toFixed(6)} ${atom.z.toFixed(6)}`);\n    });\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Convert molecule to PDB format\n   */\n  private moleculeToPDB(molecule: Mol3DMolecule): string {\n    const lines: string[] = [];\n\n    molecule.atoms.forEach((atom, index) => {\n      const line = [\n        'ATOM  ',\n        (index + 1).toString().padStart(5),\n        '  ',\n        atom.atom?.padEnd(4) || atom.elem.padEnd(4),\n        ' ',\n        'UNK',\n        ' ',\n        'A',\n        '   1    ',\n        atom.x.toFixed(3).padStart(8),\n        atom.y.toFixed(3).padStart(8),\n        atom.z.toFixed(3).padStart(8),\n        '  1.00',\n        '  0.00',\n        '          ',\n        atom.elem.padStart(2)\n      ].join('');\n      \n      lines.push(line);\n    });\n\n    lines.push('END');\n    return lines.join('\\n');\n  }\n\n  /**\n   * Create fallback viewer for environments where 3Dmol.js is not available\n   */\n  private createFallbackViewer(): any {\n    return {\n      addModel: () => console.warn('3Dmol.js not available - addModel disabled'),\n      removeAllModels: () => console.warn('3Dmol.js not available - removeAllModels disabled'),\n      setStyle: () => console.warn('3Dmol.js not available - setStyle disabled'),\n      addSurface: () => console.warn('3Dmol.js not available - addSurface disabled'),\n      render: () => console.warn('3Dmol.js not available - render disabled'),\n      zoomTo: () => console.warn('3Dmol.js not available - zoomTo disabled'),\n      resize: () => console.warn('3Dmol.js not available - resize disabled'),\n      animate: () => console.warn('3Dmol.js not available - animate disabled'),\n      pngURI: () => { throw new Error('PNG export not available without 3Dmol.js'); }\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  dispose(): void {\n    this.clear();\n    this.eventHandlers.clear();\n    \n    if (this.viewer && this.viewer.removeAllModels) {\n      this.viewer.removeAllModels();\n    }\n    \n    this.initialized = false;\n  }\n}\n\n/**\n * Static utility methods for 3Dmol operations\n */\nexport class Mol3DUtils {\n  /**\n   * Convert CREB molecule format to 3Dmol-compatible format\n   */\n  static crebToMol3D(crebMolecule: any): Mol3DMolecule {\n    const atoms: Mol3DAtom[] = [];\n\n    if (crebMolecule.atoms) {\n      crebMolecule.atoms.forEach((atom: any, index: number) => {\n        atoms.push({\n          elem: atom.element || atom.symbol || 'C',\n          x: atom.x || atom.position?.x || 0,\n          y: atom.y || atom.position?.y || 0,\n          z: atom.z || atom.position?.z || 0,\n          serial: index + 1\n        });\n      });\n    } else if (crebMolecule.elements) {\n      // Generate 3D coordinates for elements-only molecules\n      crebMolecule.elements.forEach((element: string, index: number) => {\n        atoms.push({\n          elem: element,\n          x: Math.random() * 10 - 5,\n          y: Math.random() * 10 - 5,\n          z: Math.random() * 10 - 5,\n          serial: index + 1\n        });\n      });\n    }\n\n    return {\n      atoms,\n      title: crebMolecule.name || crebMolecule.formula || 'Unknown'\n    };\n  }\n\n  /**\n   * Get predefined molecular styles\n   */\n  static getPresetStyles(): Record<string, Mol3DStyle> {\n    return {\n      'ball-and-stick': {\n        stick: { radius: 0.2 },\n        sphere: { scale: 0.3 }\n      },\n      'space-filling': {\n        sphere: { scale: 1.0 }\n      },\n      'wireframe': {\n        line: { linewidth: 2 }\n      },\n      'cartoon': {\n        cartoon: { style: 'trace' }\n      },\n      'surface': {\n        surface: { opacity: 0.8 }\n      }\n    };\n  }\n\n  /**\n   * Generate molecular surfaces\n   */\n  static getSurfaceTypes(): Record<string, string> {\n    return {\n      'van-der-waals': 'VDW',\n      'solvent-accessible': 'SAS',\n      'molecular': 'MS',\n      'solvent-excluded': 'SES'\n    };\n  }\n\n  /**\n   * Get common color schemes\n   */\n  static getColorSchemes(): Record<string, string> {\n    return {\n      'element': 'default',\n      'amino': 'amino',\n      'secondary': 'ss',\n      'residue': 'residue',\n      'chain': 'chain',\n      'temperature': 'b',\n      'hydrophobic': 'hydrophobic'\n    };\n  }\n}\n\nexport default Mol3DWrapper;\n","/**\n * PubChem Integration Module for CREB Molecular Visualization\n * Connects PubChem database with RDKit.js and 3Dmol.js visualization pipeline\n */\n\nimport { Compound } from '../../packages/pubchem-js/src/core/Compound';\n\nexport interface PubChemCompound {\n  cid: number;\n  name: string;\n  molecularFormula: string;\n  molecularWeight: number;\n  smiles?: string;\n  inchi?: string;\n  inchiKey?: string;\n  synonyms?: string[];\n  properties?: Record<string, any>;\n}\n\nexport interface CompoundSearchOptions {\n  searchType: 'name' | 'cid' | 'smiles' | 'formula' | 'inchi';\n  limit?: number;\n  maxResults?: number; // Alias for limit\n  includeProperties?: boolean;\n  includeSynonyms?: boolean;\n  include3D?: boolean;\n}\n\nexport interface PubChemSearchResult {\n  success: boolean;\n  compounds: PubChemCompound[];\n  totalFound: number;\n  source: 'pubchem';\n  timestamp: Date;\n  error?: string;\n}\n\nexport interface PubChemMolecularData {\n  compound: PubChemCompound;\n  structure2D?: string; // SDF format\n  structure3D?: string; // SDF format with 3D coordinates\n  conformers?: Array<{\n    id: number;\n    energy: number;\n    coordinates: Array<{ x: number; y: number; z: number }>;\n  }>;\n}\n\n/**\n * PubChem Integration Class\n * Provides unified access to PubChem database for molecular visualization\n */\nexport class PubChemIntegration {\n  private baseUrl = 'https://pubchem.ncbi.nlm.nih.gov/rest/pug';\n  private requestDelay = 200; // Rate limiting: 5 requests per second\n  private lastRequestTime = 0;\n\n  constructor() {\n    // Initialize with default settings\n  }\n\n  /**\n   * Search for compounds by various criteria\n   */\n  async searchCompounds(\n    query: string, \n    options: CompoundSearchOptions = { searchType: 'name' }\n  ): Promise<PubChemSearchResult> {\n    try {\n      await this.enforceRateLimit();\n\n      let searchUrl = '';\n      const limit = options.limit || options.maxResults || 10;\n\n      switch (options.searchType) {\n        case 'name':\n          searchUrl = `${this.baseUrl}/compound/name/${encodeURIComponent(query)}/cids/JSON?cids_type=flat`;\n          break;\n        case 'cid':\n          searchUrl = `${this.baseUrl}/compound/cid/${query}/cids/JSON`;\n          break;\n        case 'smiles':\n          searchUrl = `${this.baseUrl}/compound/smiles/${encodeURIComponent(query)}/cids/JSON`;\n          break;\n        case 'formula':\n          searchUrl = `${this.baseUrl}/compound/formula/${encodeURIComponent(query)}/cids/JSON`;\n          break;\n        case 'inchi':\n          searchUrl = `${this.baseUrl}/compound/inchi/${encodeURIComponent(query)}/cids/JSON`;\n          break;\n      }\n\n      const response = await fetch(searchUrl);\n      if (!response.ok) {\n        throw new Error(`PubChem search failed: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const cids = data.IdentifierList?.CID || [];\n      \n      if (cids.length === 0) {\n        return {\n          success: true,\n          compounds: [],\n          totalFound: 0,\n          source: 'pubchem',\n          timestamp: new Date()\n        };\n      }\n\n      // Get detailed compound information for found CIDs\n      const limitedCids = cids.slice(0, limit);\n      const compounds = await this.getCompoundDetails(limitedCids, options);\n\n      return {\n        success: true,\n        compounds,\n        totalFound: cids.length,\n        source: 'pubchem',\n        timestamp: new Date()\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        compounds: [],\n        totalFound: 0,\n        source: 'pubchem',\n        timestamp: new Date(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Get detailed compound information by CID\n   */\n  async getCompoundByCid(cid: number, options: CompoundSearchOptions = { searchType: 'cid' }): Promise<PubChemCompound | null> {\n    try {\n      await this.enforceRateLimit();\n\n      const propertiesUrl = `${this.baseUrl}/compound/cid/${cid}/property/MolecularFormula,MolecularWeight,CanonicalSMILES,InChI,InChIKey/JSON`;\n      \n      const response = await fetch(propertiesUrl);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch compound ${cid}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const properties = data.PropertyTable?.Properties?.[0];\n\n      if (!properties) {\n        return null;\n      }\n\n      const compound: PubChemCompound = {\n        cid,\n        name: `CID ${cid}`, // Will be updated if synonyms are requested\n        molecularFormula: properties.MolecularFormula || '',\n        molecularWeight: properties.MolecularWeight || 0,\n        smiles: properties.CanonicalSMILES || '',\n        inchi: properties.InChI || '',\n        inchiKey: properties.InChIKey || '',\n        properties: properties\n      };\n\n      // Get synonyms if requested\n      if (options.includeSynonyms) {\n        const synonyms = await this.getCompoundSynonyms(cid);\n        if (synonyms.length > 0) {\n          compound.name = synonyms[0]; // Use first synonym as primary name\n          compound.synonyms = synonyms;\n        }\n      }\n\n      return compound;\n\n    } catch (error) {\n      console.error(`Error fetching compound ${cid}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Get molecular structure data (2D/3D SDF)\n   */\n  async getMolecularData(cid: number, include3D = false): Promise<PubChemMolecularData | null> {\n    try {\n      const compound = await this.getCompoundByCid(cid, { searchType: 'cid', includeSynonyms: true });\n      if (!compound) {\n        return null;\n      }\n\n      await this.enforceRateLimit();\n\n      // Get 2D SDF structure\n      const sdf2DUrl = `${this.baseUrl}/compound/cid/${cid}/SDF`;\n      const sdf2DResponse = await fetch(sdf2DUrl);\n      const structure2D = sdf2DResponse.ok ? await sdf2DResponse.text() : undefined;\n\n      let structure3D: string | undefined;\n      let conformers: Array<{ id: number; energy: number; coordinates: Array<{ x: number; y: number; z: number }> }> | undefined;\n\n      if (include3D) {\n        await this.enforceRateLimit();\n        \n        // Get 3D SDF structure\n        const sdf3DUrl = `${this.baseUrl}/compound/cid/${cid}/SDF?record_type=3d`;\n        const sdf3DResponse = await fetch(sdf3DUrl);\n        structure3D = sdf3DResponse.ok ? await sdf3DResponse.text() : undefined;\n\n        // Get conformer data if available\n        await this.enforceRateLimit();\n        try {\n          const conformerUrl = `${this.baseUrl}/compound/cid/${cid}/conformers/JSON`;\n          const conformerResponse = await fetch(conformerUrl);\n          if (conformerResponse.ok) {\n            const conformerData = await conformerResponse.json();\n            conformers = this.parseConformerData(conformerData);\n          }\n        } catch (error) {\n          // Conformer data not available for all compounds\n          console.warn(`Conformer data not available for CID ${cid}`);\n        }\n      }\n\n      return {\n        compound,\n        structure2D,\n        structure3D,\n        conformers\n      };\n\n    } catch (error) {\n      console.error(`Error fetching molecular data for CID ${cid}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Search and get the best matching compound with full molecular data\n   */\n  async searchAndGetMolecularData(\n    query: string, \n    options: CompoundSearchOptions = { searchType: 'name' }\n  ): Promise<PubChemMolecularData | null> {\n    const searchResult = await this.searchCompounds(query, { ...options, limit: 1 });\n    \n    if (!searchResult.success || searchResult.compounds.length === 0) {\n      return null;\n    }\n\n    const compound = searchResult.compounds[0];\n    return this.getMolecularData(compound.cid, options.include3D);\n  }\n\n  /**\n   * Get compound synonyms\n   */\n  private async getCompoundSynonyms(cid: number): Promise<string[]> {\n    try {\n      await this.enforceRateLimit();\n\n      const synonymsUrl = `${this.baseUrl}/compound/cid/${cid}/synonyms/JSON`;\n      const response = await fetch(synonymsUrl);\n      \n      if (!response.ok) {\n        return [];\n      }\n\n      const data = await response.json();\n      return data.InformationList?.Information?.[0]?.Synonym || [];\n\n    } catch (error) {\n      return [];\n    }\n  }\n\n  /**\n   * Get detailed compound information for multiple CIDs\n   */\n  private async getCompoundDetails(\n    cids: number[], \n    options: CompoundSearchOptions\n  ): Promise<PubChemCompound[]> {\n    const compounds: PubChemCompound[] = [];\n    \n    // Process in batches to respect rate limits\n    const batchSize = 5;\n    for (let i = 0; i < cids.length; i += batchSize) {\n      const batch = cids.slice(i, i + batchSize);\n      const batchPromises = batch.map(cid => this.getCompoundByCid(cid, options));\n      \n      const batchResults = await Promise.all(batchPromises);\n      compounds.push(...batchResults.filter(compound => compound !== null) as PubChemCompound[]);\n      \n      // Add delay between batches\n      if (i + batchSize < cids.length) {\n        await new Promise(resolve => setTimeout(resolve, this.requestDelay * batch.length));\n      }\n    }\n\n    return compounds;\n  }\n\n  /**\n   * Parse conformer data from PubChem response\n   */\n  private parseConformerData(conformerData: any): Array<{ id: number; energy: number; coordinates: Array<{ x: number; y: number; z: number }> }> {\n    // Implementation would parse the conformer JSON structure\n    // This is a simplified version\n    return [];\n  }\n\n  /**\n   * Enforce rate limiting for PubChem API\n   */\n  private async enforceRateLimit(): Promise<void> {\n    const now = Date.now();\n    const timeSinceLastRequest = now - this.lastRequestTime;\n    \n    if (timeSinceLastRequest < this.requestDelay) {\n      const waitTime = this.requestDelay - timeSinceLastRequest;\n      await new Promise(resolve => setTimeout(resolve, waitTime));\n    }\n    \n    this.lastRequestTime = Date.now();\n  }\n\n  /**\n   * Convert PubChem compound to SMILES for RDKit processing\n   */\n  getCompoundSMILES(compound: PubChemCompound): string | null {\n    return compound.smiles || null;\n  }\n\n  /**\n   * Get compound 3D structure in SDF format for 3Dmol.js\n   */\n  async getCompound3DSDF(cid: number): Promise<string | null> {\n    const molecularData = await this.getMolecularData(cid, true);\n    return molecularData?.structure3D || molecularData?.structure2D || null;\n  }\n\n  /**\n   * Validate if PubChem API is accessible\n   */\n  async validateConnection(): Promise<boolean> {\n    try {\n      await this.enforceRateLimit();\n      \n      const testUrl = `${this.baseUrl}/compound/cid/2244/property/MolecularFormula/JSON`; // Aspirin\n      const response = await fetch(testUrl);\n      return response.ok;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\nexport default PubChemIntegration;\n","/**\n * Enhanced Molecular Visualization with RDKit.js, 3Dmol.js, and PubChem Integration\n * Unified API for advanced 2D/3D molecular structure visualization and processing\n * \n * This module integrates RDKit.js, 3Dmol.js, and PubChem wrappers with the existing CREB\n * visualization system to provide comprehensive molecular visualization capabilities.\n */\n\nimport { Canvas2DRenderer, type Molecule2D } from './Canvas2DRenderer';\nimport { SVGRenderer } from './SVGRenderer';\nimport { RDKitWrapper, type RDKitMolecule, type MolecularProperties } from './RDKitWrapper';\nimport { Mol3DWrapper, type Mol3DMolecule, type Mol3DStyle } from './Mol3DWrapper';\nimport { PubChemIntegration, type PubChemCompound, type CompoundSearchOptions, type PubChemSearchResult } from './PubChemIntegration';\n\nexport interface EnhancedVisualizationConfig {\n  // 2D Configuration\n  canvas2D?: {\n    width: number;\n    height: number;\n    backgroundColor: string;\n    interactive: boolean;\n  };\n  \n  // 3D Configuration\n  mol3D?: {\n    width: number;\n    height: number;\n    backgroundColor: string;\n    style: string;\n    interactive: boolean;\n  };\n  \n  // RDKit Configuration\n  rdkit?: {\n    generateCoords: boolean;\n    sanitize: boolean;\n    removeHs: boolean;\n  };\n  \n  // Export Configuration\n  export?: {\n    formats: ('png' | 'jpg' | 'svg' | 'pdb' | 'sdf')[];\n    quality: number;\n  };\n}\n\nexport interface MolecularAnalysisResult {\n  molecule: RDKitMolecule;\n  properties: MolecularProperties;\n  validation: {\n    isValid: boolean;\n    errors: string[];\n    warnings: string[];\n  };\n  visualization: {\n    svg2D: string;\n    hasCoordinates: boolean;\n    canRender3D: boolean;\n  };\n}\n\nexport interface VisualizationExports {\n  png2D?: string;\n  jpg2D?: string;\n  svg2D?: string;\n  png3D?: string;\n  pdb?: string;\n  sdf?: string;\n}\n\n/**\n * Enhanced Molecular Visualization Class\n * Combines Canvas2D, RDKit.js, 3Dmol.js, and PubChem for comprehensive molecular visualization\n */\nexport class EnhancedMolecularVisualization {\n  private canvas2DRenderer: Canvas2DRenderer | null = null;\n  private svgRenderer: SVGRenderer | null = null;\n  private rdkitWrapper: RDKitWrapper;\n  private mol3DWrapper: Mol3DWrapper | null = null;\n  private pubchemIntegration: PubChemIntegration;\n  private config: EnhancedVisualizationConfig;\n  private currentMolecule: RDKitMolecule | null = null;\n  private currentPubChemCompound: PubChemCompound | null = null;\n\n  constructor(config: Partial<EnhancedVisualizationConfig> = {}) {\n    this.config = {\n      canvas2D: {\n        width: 600,\n        height: 400,\n        backgroundColor: '#ffffff',\n        interactive: true,\n        ...config.canvas2D\n      },\n      mol3D: {\n        width: 600,\n        height: 400,\n        backgroundColor: '#ffffff',\n        style: 'ball-and-stick',\n        interactive: true,\n        ...config.mol3D\n      },\n      rdkit: {\n        generateCoords: true,\n        sanitize: true,\n        removeHs: true,\n        ...config.rdkit\n      },\n      export: {\n        formats: ['png', 'svg'],\n        quality: 0.9,\n        ...config.export\n      }\n    };\n\n    this.rdkitWrapper = new RDKitWrapper(this.config.rdkit);\n    this.pubchemIntegration = new PubChemIntegration();\n  }\n\n  /**\n   * Initialize all visualization components\n   */\n  async initialize(\n    canvas2DElement?: HTMLCanvasElement,\n    mol3DContainer?: HTMLElement | string\n  ): Promise<void> {\n    // Initialize RDKit wrapper\n    await this.rdkitWrapper.initialize();\n\n    // Initialize 2D Canvas renderer if element provided\n    if (canvas2DElement) {\n      this.canvas2DRenderer = new Canvas2DRenderer(canvas2DElement, this.config.canvas2D);\n      this.svgRenderer = new SVGRenderer(this.config.canvas2D);\n    }\n\n    // Initialize 3D viewer if container provided\n    if (mol3DContainer) {\n      this.mol3DWrapper = new Mol3DWrapper(mol3DContainer, this.config.mol3D);\n      await this.mol3DWrapper.initialize();\n    }\n  }\n\n  /**\n   * Load and analyze molecule from SMILES string\n   */\n  async loadMoleculeFromSMILES(smiles: string): Promise<MolecularAnalysisResult> {\n    // Validate SMILES\n    const isValid = await this.rdkitWrapper.validateSMILES(smiles);\n    if (!isValid) {\n      throw new Error(`Invalid SMILES: ${smiles}`);\n    }\n\n    // Parse molecule with RDKit\n    const molecule = await this.rdkitWrapper.parseSMILES(smiles);\n    if (!molecule) {\n      throw new Error(`Failed to parse SMILES: ${smiles}`);\n    }\n\n    // Calculate molecular properties\n    const properties = await this.rdkitWrapper.calculateDescriptors(smiles);\n\n    // Generate 2D SVG representation\n    const svg2D = await this.rdkitWrapper.generateSVG(smiles, {\n      width: this.config.canvas2D!.width,\n      height: this.config.canvas2D!.height\n    });\n\n    this.currentMolecule = molecule;\n\n    const result: MolecularAnalysisResult = {\n      molecule,\n      properties,\n      validation: {\n        isValid: true,\n        errors: [],\n        warnings: []\n      },\n      visualization: {\n        svg2D,\n        hasCoordinates: molecule.atoms.length > 0,\n        canRender3D: molecule.atoms.length > 0 && molecule.atoms.some(a => a.z !== undefined)\n      }\n    };\n\n    // Load into visualization components\n    await this.updateVisualizations(molecule);\n\n    return result;\n  }\n\n  /**\n   * Load molecule from molecular data formats (PDB, SDF, MOL2, etc.)\n   */\n  async loadMoleculeFromData(\n    data: string,\n    format: 'pdb' | 'sdf' | 'mol2' | 'xyz' = 'pdb'\n  ): Promise<void> {\n    // Load into 3D viewer\n    if (this.mol3DWrapper) {\n      await this.mol3DWrapper.addMolecule('main', data, format);\n    }\n\n    // Convert to 2D if needed for Canvas2D renderer\n    if (this.canvas2DRenderer) {\n      const molecule2D = this.convertTo2DMolecule(data, format);\n      if (molecule2D) {\n        this.canvas2DRenderer.loadMolecule(molecule2D);\n      }\n    }\n  }\n\n  /**\n   * Search and load molecule from PubChem by compound name\n   */\n  async loadMoleculeFromPubChemName(compoundName: string): Promise<MolecularAnalysisResult | null> {\n    try {\n      const molecularData = await this.pubchemIntegration.searchAndGetMolecularData(\n        compoundName, \n        { searchType: 'name', includeSynonyms: true, include3D: true }\n      );\n\n      if (!molecularData) {\n        throw new Error(`Compound \"${compoundName}\" not found in PubChem database`);\n      }\n\n      this.currentPubChemCompound = molecularData.compound;\n\n      // Load molecule using SMILES from PubChem\n      if (molecularData.compound.smiles) {\n        const result = await this.loadMoleculeFromSMILES(molecularData.compound.smiles);\n        \n        // Enhance result with PubChem data\n        if (result) {\n          result.validation.warnings = result.validation.warnings || [];\n          result.validation.warnings.push(`Data sourced from PubChem CID ${molecularData.compound.cid}`);\n          \n          // Update properties with PubChem data\n          result.properties = {\n            ...result.properties,\n            molecularWeight: molecularData.compound.molecularWeight,\n            formula: molecularData.compound.molecularFormula\n          };\n        }\n\n        // Load 3D structure if available\n        if (molecularData.structure3D && this.mol3DWrapper) {\n          await this.mol3DWrapper.addMolecule('pubchem', molecularData.structure3D, 'sdf');\n        } else if (molecularData.structure2D && this.mol3DWrapper) {\n          await this.mol3DWrapper.addMolecule('pubchem', molecularData.structure2D, 'sdf');\n        }\n\n        return result;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('PubChem search failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Load molecule from PubChem by CID\n   */\n  async loadMoleculeFromPubChemCID(cid: number): Promise<MolecularAnalysisResult | null> {\n    try {\n      const molecularData = await this.pubchemIntegration.getMolecularData(cid, true);\n\n      if (!molecularData) {\n        throw new Error(`Compound with CID ${cid} not found in PubChem database`);\n      }\n\n      this.currentPubChemCompound = molecularData.compound;\n\n      // Load molecule using SMILES from PubChem\n      if (molecularData.compound.smiles) {\n        const result = await this.loadMoleculeFromSMILES(molecularData.compound.smiles);\n        \n        // Enhance result with PubChem data\n        if (result) {\n          result.validation.warnings = result.validation.warnings || [];\n          result.validation.warnings.push(`Data sourced from PubChem CID ${cid}`);\n          \n          // Update properties with PubChem data\n          result.properties = {\n            ...result.properties,\n            molecularWeight: molecularData.compound.molecularWeight,\n            formula: molecularData.compound.molecularFormula\n          };\n        }\n\n        // Load 3D structure if available\n        if (molecularData.structure3D && this.mol3DWrapper) {\n          await this.mol3DWrapper.addMolecule('pubchem', molecularData.structure3D, 'sdf');\n        } else if (molecularData.structure2D && this.mol3DWrapper) {\n          await this.mol3DWrapper.addMolecule('pubchem', molecularData.structure2D, 'sdf');\n        }\n\n        return result;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('PubChem CID search failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Search PubChem compounds without loading\n   */\n  async searchPubChemCompounds(\n    query: string, \n    options: CompoundSearchOptions = { searchType: 'name', limit: 10 }\n  ): Promise<PubChemSearchResult> {\n    return await this.pubchemIntegration.searchCompounds(query, options);\n  }\n\n  /**\n   * Load a compound from PubChem by CID\n   */\n  async loadPubChemCompound(cid: string): Promise<PubChemCompound> {\n    const cidNumber = parseInt(cid, 10);\n    if (isNaN(cidNumber)) {\n      throw new Error(`Invalid CID: ${cid}`);\n    }\n    \n    const compound = await this.pubchemIntegration.getCompoundByCid(cidNumber);\n    if (!compound) {\n      throw new Error(`Compound not found for CID: ${cid}`);\n    }\n    \n    this.currentPubChemCompound = compound;\n    return compound;\n  }\n\n  /**\n   * Analyze a molecule using RDKit\n   */\n  async analyzeMolecule(smiles: string): Promise<MolecularAnalysisResult> {\n    const molecule = await this.rdkitWrapper.parseSMILES(smiles);\n    if (!molecule) {\n      throw new Error('Failed to parse SMILES');\n    }\n\n    this.currentMolecule = molecule;\n    \n    return {\n      molecule,\n      properties: molecule.properties,\n      validation: {\n        isValid: true,\n        errors: [],\n        warnings: []\n      },\n      visualization: {\n        svg2D: await this.rdkitWrapper.generateSVG(smiles),\n        hasCoordinates: molecule.atoms.length > 0,\n        canRender3D: molecule.atoms.length > 0\n      }\n    };\n  }\n\n  /**\n   * Export molecule as SVG\n   */\n  async exportSVG(smiles: string, options: any = {}): Promise<string> {\n    return await this.rdkitWrapper.generateSVG(smiles, options);\n  }\n\n  /**\n   * Export molecular data\n   */\n  async exportMolecularData(smiles: string): Promise<VisualizationExports> {\n    const analysis = await this.analyzeMolecule(smiles);\n    \n    return {\n      svg2D: analysis.visualization.svg2D,\n      // Other formats could be implemented later\n      png2D: undefined,\n      jpg2D: undefined,\n      png3D: undefined,\n      pdb: undefined,\n      sdf: undefined\n    };\n  }\n\n  /**\n   * Get current PubChem compound information\n   */\n  getCurrentPubChemCompound(): PubChemCompound | null {\n    return this.currentPubChemCompound;\n  }\n\n  /**\n   * Validate PubChem connection\n   */\n  async validatePubChemConnection(): Promise<boolean> {\n    return await this.pubchemIntegration.validateConnection();\n  }\n\n  /**\n   * Update all visualization components with current molecule\n   */\n  private async updateVisualizations(molecule: RDKitMolecule): Promise<void> {\n    // Update 2D Canvas renderer\n    if (this.canvas2DRenderer && molecule.atoms.length > 0) {\n      const molecule2D = this.convertRDKitToCanvas2D(molecule);\n      this.canvas2DRenderer.loadMolecule(molecule2D);\n    }\n\n    // Update SVG renderer\n    if (this.svgRenderer && molecule.atoms.length > 0) {\n      const molecule2D = this.convertRDKitToCanvas2D(molecule);\n      this.svgRenderer.loadMolecule(molecule2D);\n    }\n\n    // Update 3D viewer\n    if (this.mol3DWrapper && molecule.atoms.length > 0) {\n      const molecule3D = this.convertRDKitToMol3D(molecule);\n      await this.mol3DWrapper.addMolecule('main', molecule3D);\n    }\n  }\n\n  /**\n   * Set 3D visualization style\n   */\n  set3DStyle(style: string | Mol3DStyle): void {\n    if (!this.mol3DWrapper) {\n      console.warn('3D viewer not initialized');\n      return;\n    }\n\n    if (typeof style === 'string') {\n      const presetStyles: Record<string, Mol3DStyle> = {\n        'ball-and-stick': { stick: { radius: 0.2 }, sphere: { scale: 0.3 } },\n        'space-filling': { sphere: { scale: 1.0 } },\n        'wireframe': { line: { linewidth: 2 } },\n        'cartoon': { cartoon: { style: 'trace' as const } }\n      };\n\n      const presetStyle = presetStyles[style];\n      if (presetStyle) {\n        this.mol3DWrapper.setStyle(presetStyle);\n      }\n    } else {\n      this.mol3DWrapper.setStyle(style);\n    }\n  }\n\n  /**\n   * Add molecular surface to 3D visualization\n   */\n  add3DSurface(\n    surfaceType: 'VDW' | 'SAS' | 'MS' | 'SES' = 'VDW',\n    opacity: number = 0.7\n  ): void {\n    if (!this.mol3DWrapper) {\n      console.warn('3D viewer not initialized');\n      return;\n    }\n\n    this.mol3DWrapper.addSurface(surfaceType, { opacity });\n  }\n\n  /**\n   * Perform substructure search and highlight matches\n   */\n  async searchSubstructure(querySmarts: string): Promise<void> {\n    if (!this.currentMolecule) {\n      throw new Error('No molecule loaded');\n    }\n\n    const matches = await this.rdkitWrapper.findSubstructure(\n      this.currentMolecule.smiles,\n      querySmarts\n    );\n\n    if (matches.length > 0) {\n      // Highlight matches in 2D visualization\n      this.highlightAtoms2D(matches[0].atomIds);\n      \n      // Highlight matches in 3D visualization\n      if (this.mol3DWrapper) {\n        this.highlightAtoms3D(matches[0].atomIds);\n      }\n    }\n  }\n\n  /**\n   * Export visualizations in multiple formats\n   */\n  async exportAll(): Promise<VisualizationExports> {\n    const exports: VisualizationExports = {};\n\n    // Export 2D visualizations\n    if (this.canvas2DRenderer) {\n      if (this.config.export!.formats.includes('png')) {\n        exports.png2D = this.canvas2DRenderer.exportImage('png');\n      }\n      if (this.config.export!.formats.includes('jpg')) {\n        exports.jpg2D = this.canvas2DRenderer.exportImage('jpg');\n      }\n      if (this.config.export!.formats.includes('svg')) {\n        exports.svg2D = this.canvas2DRenderer.exportImage('svg');\n      }\n    }\n\n    // Export 3D visualizations\n    if (this.mol3DWrapper) {\n      if (this.config.export!.formats.includes('png')) {\n        try {\n          exports.png3D = await this.mol3DWrapper.exportScene({ format: 'png' }) as string;\n        } catch (error) {\n          console.warn('3D PNG export failed:', error);\n        }\n      }\n      if (this.config.export!.formats.includes('pdb')) {\n        try {\n          exports.pdb = await this.mol3DWrapper.exportScene({ format: 'pdb' }) as string;\n        } catch (error) {\n          console.warn('PDB export failed:', error);\n        }\n      }\n      if (this.config.export!.formats.includes('sdf')) {\n        try {\n          exports.sdf = await this.mol3DWrapper.exportScene({ format: 'sdf' }) as string;\n        } catch (error) {\n          console.warn('SDF export failed:', error);\n        }\n      }\n    }\n\n    return exports;\n  }\n\n  /**\n   * Get molecular properties of current molecule\n   */\n  getMolecularProperties(): MolecularProperties | null {\n    return this.currentMolecule?.properties || null;\n  }\n\n  /**\n   * Apply chemical transformation to current molecule\n   */\n  async applyTransformation(reactionSmarts: string): Promise<string[]> {\n    if (!this.currentMolecule) {\n      throw new Error('No molecule loaded');\n    }\n\n    return await this.rdkitWrapper.applyTransformation(\n      this.currentMolecule.smiles,\n      reactionSmarts\n    );\n  }\n\n  /**\n   * Convert RDKit molecule to Canvas2D format\n   */\n  private convertRDKitToCanvas2D(rdkitMolecule: RDKitMolecule): Molecule2D {\n    const atoms = rdkitMolecule.atoms.map((atom, index) => ({\n      element: atom.symbol,\n      position: { x: atom.x * 20, y: atom.y * 20 }, // Scale coordinates\n      bonds: [] as number[],\n      charge: atom.charge\n    }));\n\n    const bonds = rdkitMolecule.bonds.map(bond => ({\n      atom1: bond.beginAtomIdx,\n      atom2: bond.endAtomIdx,\n      order: this.mapBondTypeToOrder(bond.bondType),\n      type: bond.bondType.toLowerCase() as any\n    }));\n\n    // Update atom bonds references\n    bonds.forEach((bond, bondIndex) => {\n      if (atoms[bond.atom1]) {\n        atoms[bond.atom1].bonds.push(bondIndex);\n      }\n      if (atoms[bond.atom2]) {\n        atoms[bond.atom2].bonds.push(bondIndex);\n      }\n    });\n\n    return {\n      atoms,\n      bonds,\n      name: rdkitMolecule.properties.formula\n    };\n  }\n\n  /**\n   * Convert RDKit molecule to Mol3D format\n   */\n  private convertRDKitToMol3D(rdkitMolecule: RDKitMolecule): Mol3DMolecule {\n    const atoms = rdkitMolecule.atoms.map(atom => ({\n      elem: atom.symbol,\n      x: atom.x,\n      y: atom.y,\n      z: atom.z || 0\n    }));\n\n    return {\n      atoms,\n      title: rdkitMolecule.properties.formula\n    };\n  }\n\n  /**\n   * Convert molecular data to Canvas2D format\n   */\n  private convertTo2DMolecule(data: string, format: string): Molecule2D | null {\n    // Basic conversion - would need more sophisticated parsing\n    // For now, return null and rely on RDKit conversion\n    return null;\n  }\n\n  /**\n   * Highlight atoms in 2D visualization\n   */\n  private highlightAtoms2D(atomIds: number[]): void {\n    // Implementation would depend on Canvas2DRenderer having highlight functionality\n    console.log('Highlighting 2D atoms:', atomIds);\n  }\n\n  /**\n   * Highlight atoms in 3D visualization\n   */\n  private highlightAtoms3D(atomIds: number[]): void {\n    if (!this.mol3DWrapper) return;\n\n    // Create selection and apply highlighting style\n    const selector = { atom: atomIds };\n    this.mol3DWrapper.setStyle({ sphere: { colors: { 'default': 'red' }, scale: 1.2 } }, selector);\n  }\n\n  /**\n   * Map bond type to numerical order\n   */\n  private mapBondTypeToOrder(bondType: string): number {\n    switch (bondType.toUpperCase()) {\n      case 'SINGLE': return 1;\n      case 'DOUBLE': return 2;\n      case 'TRIPLE': return 3;\n      case 'AROMATIC': return 1.5;\n      default: return 1;\n    }\n  }\n\n  /**\n   * Cleanup resources\n   */\n  dispose(): void {\n    if (this.rdkitWrapper) {\n      this.rdkitWrapper.dispose();\n    }\n    if (this.mol3DWrapper) {\n      this.mol3DWrapper.dispose();\n    }\n    this.currentMolecule = null;\n  }\n}\n\n/**\n * Factory function to create enhanced molecular visualization\n */\nexport function createEnhancedVisualization(\n  config: Partial<EnhancedVisualizationConfig> = {}\n): EnhancedMolecularVisualization {\n  return new EnhancedMolecularVisualization(config);\n}\n\n/**\n * Utility functions for enhanced visualization\n */\nexport class EnhancedVisualizationUtils {\n  /**\n   * Get available molecular file formats\n   */\n  static getSupportedFormats(): Record<string, string[]> {\n    return {\n      '2D': ['svg', 'png', 'jpg'],\n      '3D': ['pdb', 'sdf', 'mol2', 'xyz', 'cml', 'png'],\n      'input': ['smiles', 'pdb', 'sdf', 'mol2', 'xyz', 'inchi']\n    };\n  }\n\n  /**\n   * Get common chemical transformation patterns\n   */\n  static getTransformationPatterns(): Record<string, string> {\n    return {\n      'hydroxylation': '[C:1]>>[C:1]O',\n      'methylation': '[N:1]>>[N:1]C',\n      'oxidation': '[C:1][OH]>>[C:1]=O',\n      'reduction': '[C:1]=[O:2]>>[C:1][OH:2]',\n      'halogenation': '[C:1][H]>>[C:1]Cl'\n    };\n  }\n\n  /**\n   * Get substructure search patterns\n   */\n  static getSearchPatterns(): Record<string, string> {\n    return {\n      'benzene': 'c1ccccc1',\n      'phenol': 'c1ccc(O)cc1',\n      'alcohol': '[OH]',\n      'ketone': 'C=O',\n      'ester': 'C(=O)O',\n      'amine': 'N',\n      'carboxyl': 'C(=O)O',\n      'amide': 'C(=O)N'\n    };\n  }\n\n  /**\n   * Validate visualization configuration\n   */\n  static validateConfig(config: Partial<EnhancedVisualizationConfig>): {\n    isValid: boolean;\n    errors: string[];\n    warnings: string[];\n  } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    if (config.canvas2D) {\n      if (config.canvas2D.width <= 0 || config.canvas2D.height <= 0) {\n        errors.push('Canvas2D dimensions must be positive');\n      }\n    }\n\n    if (config.mol3D) {\n      if (config.mol3D.width <= 0 || config.mol3D.height <= 0) {\n        errors.push('Mol3D dimensions must be positive');\n      }\n    }\n\n    if (config.export?.formats) {\n      const validFormats = ['png', 'jpg', 'svg', 'pdb', 'sdf'];\n      const invalidFormats = config.export.formats.filter(f => !validFormats.includes(f));\n      if (invalidFormats.length > 0) {\n        warnings.push(`Unsupported export formats: ${invalidFormats.join(', ')}`);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n}\n\n// Re-export wrapper classes for direct use\nexport { RDKitWrapper, Mol3DWrapper, PubChemIntegration };\nexport type { RDKitMolecule, MolecularProperties, Mol3DMolecule, Mol3DStyle, PubChemCompound, PubChemSearchResult, CompoundSearchOptions };\n\nexport default EnhancedMolecularVisualization;\n","/**\n * Integration with CREB Core Types and Systems\n * Enhanced with SVG Export Capabilities and Advanced Molecular Visualization\n * Now includes RDKit.js and 3Dmol.js wrappers for comprehensive molecular processing\n */\n\nimport type { ElementCount } from '../types';\nimport { Canvas2DRenderer } from './Canvas2DRenderer';\nimport { SVGRenderer } from './SVGRenderer';\nimport { MolecularVisualization, MolecularDataUtils } from './SimplifiedMolecularVisualization';\n\n// Export new enhanced visualization components\nexport { RDKitWrapper, type RDKitMolecule, type MolecularProperties } from './RDKitWrapper';\nexport { Mol3DWrapper, type Mol3DMolecule, type Mol3DStyle } from './Mol3DWrapper';\nexport { PubChemIntegration, type PubChemCompound, type PubChemSearchResult, type CompoundSearchOptions } from './PubChemIntegration';\nexport { \n  EnhancedMolecularVisualization, \n  createEnhancedVisualization,\n  EnhancedVisualizationUtils,\n  type EnhancedVisualizationConfig,\n  type MolecularAnalysisResult,\n  type VisualizationExports\n} from './EnhancedMolecularVisualization';\n\n/**\n * Simple molecule interface for visualization\n */\nexport interface MoleculeForVisualization {\n  elements: string[];\n  formula?: string;\n}\n\n/**\n * Convert CREB-style molecule to visualization format\n */\nexport function convertMoleculeToVisualization(molecule: MoleculeForVisualization) {\n  const atoms = molecule.elements.map((element: string, index: number) => ({\n    element,\n    x: Math.random() * 4 - 2, // Random coordinates for now\n    y: Math.random() * 4 - 2,\n    z: Math.random() * 4 - 2\n  }));\n\n  // Simple bond generation based on element count\n  const bonds = [];\n  for (let i = 0; i < atoms.length - 1; i++) {\n    bonds.push({\n      atom1: i,\n      atom2: i + 1,\n      order: 1\n    });\n  }\n\n  return {\n    atoms,\n    bonds,\n    smiles: molecule.formula || `${molecule.elements.join('')}`\n  };\n}\n\n/**\n * Create molecular visualization from molecule data\n */\nexport function createMolecularVisualization(\n  container: any,\n  molecule: MoleculeForVisualization,\n  options?: any\n) {\n  const config = {\n    container,\n    width: 600,\n    height: 400,\n    mode: 'both' as const,\n    ...options\n  };\n\n  const visualization = new MolecularVisualization(config);\n  const moleculeData = convertMoleculeToVisualization(molecule);\n  \n  visualization.loadMolecule(moleculeData);\n  \n  return visualization;\n}\n\n/**\n * Enhanced visualization utilities for CREB\n */\nexport class CREBVisualizationUtils {\n  /**\n   * Create 2D structure from molecule data with SVG export support\n   */\n  static create2DStructure(molecule: MoleculeForVisualization, canvas?: any) {\n    if (!canvas) {\n      // Create fallback canvas\n      canvas = {\n        width: 400,\n        height: 300,\n        getContext: () => ({\n          fillStyle: '',\n          strokeStyle: '',\n          lineWidth: 1,\n          lineCap: 'round',\n          font: '12px Arial',\n          textAlign: 'center',\n          textBaseline: 'middle',\n          fillRect: () => {},\n          fillText: () => {},\n          beginPath: () => {},\n          moveTo: () => {},\n          lineTo: () => {},\n          arc: () => {},\n          fill: () => {},\n          stroke: () => {},\n          setLineDash: () => {}\n        }),\n        toDataURL: () => 'data:image/png;base64,',\n        style: {}\n      };\n    }\n\n    const renderer = new Canvas2DRenderer(canvas);\n    \n    // Convert molecule to 2D format\n    const molecule2d = Canvas2DRenderer.smilesToMolecule2D(molecule.formula || 'C');\n    renderer.loadMolecule(molecule2d);\n    \n    return renderer;\n  }\n\n  /**\n   * Create SVG renderer for molecule\n   */\n  static createSVGStructure(\n    molecule: MoleculeForVisualization,\n    options?: {\n      width?: number;\n      height?: number;\n      interactive?: boolean;\n      backgroundColor?: string;\n    }\n  ) {\n    const svgRenderer = new SVGRenderer({\n      width: options?.width || 400,\n      height: options?.height || 300,\n      backgroundColor: options?.backgroundColor || '#ffffff',\n      includeInteractivity: options?.interactive || false\n    });\n\n    const molecule2d = Canvas2DRenderer.smilesToMolecule2D(molecule.formula || 'C');\n    svgRenderer.loadMolecule(molecule2d);\n    \n    return svgRenderer;\n  }\n\n  /**\n   * Export molecule in multiple formats\n   */\n  static exportMolecule(\n    molecule: MoleculeForVisualization,\n    formats: ('png' | 'jpg' | 'svg')[] = ['svg'],\n    canvas?: any\n  ): Record<string, string> {\n    return multiFormatExport(molecule, canvas, { formats });\n  }\n\n  /**\n   * Generate sample molecules for different chemical reactions\n   */\n  static generateReactionMolecules() {\n    return {\n      reactants: [\n        MolecularDataUtils.generateSampleMolecule('water'),\n        MolecularDataUtils.generateSampleMolecule('methane')\n      ],\n      products: [\n        MolecularDataUtils.generateSampleMolecule('benzene')\n      ]\n    };\n  }\n\n  /**\n   * Visualize chemical reaction\n   */\n  static visualizeReaction(\n    container: any,\n    reactants: MoleculeForVisualization[],\n    products: MoleculeForVisualization[]\n  ) {\n    const visualization = new MolecularVisualization({\n      container,\n      width: 800,\n      height: 400,\n      mode: '2d'\n    });\n\n    // For now, just show the first reactant\n    if (reactants.length > 0) {\n      const moleculeData = convertMoleculeToVisualization(reactants[0]);\n      visualization.loadMolecule(moleculeData);\n    }\n\n    return visualization;\n  }\n\n  /**\n   * Create molecule from element count data\n   */\n  static createMoleculeFromElementCount(elementCount: ElementCount): MoleculeForVisualization {\n    const elements: string[] = [];\n    let formula = '';\n\n    for (const [element, count] of Object.entries(elementCount)) {\n      for (let i = 0; i < count; i++) {\n        elements.push(element);\n      }\n      formula += count > 1 ? `${element}${count}` : element;\n    }\n\n    return { elements, formula };\n  }\n}\n\nexport { Canvas2DRenderer, SVGRenderer, MolecularVisualization, MolecularDataUtils };\n\n/**\n * Quick SVG Export Function\n * Convenience function for quick SVG generation\n */\nexport function quickSVGExport(\n  molecule: MoleculeForVisualization,\n  options?: {\n    width?: number;\n    height?: number;\n    interactive?: boolean;\n    includeMetadata?: boolean;\n  }\n): string {\n  const svgRenderer = new SVGRenderer({\n    width: options?.width || 600,\n    height: options?.height || 400,\n    includeInteractivity: options?.interactive || false\n  });\n\n  // Convert CREB molecule to 2D format\n  const molecule2d = Canvas2DRenderer.smilesToMolecule2D(molecule.formula || 'C');\n  svgRenderer.loadMolecule(molecule2d);\n  \n  return svgRenderer.exportSVG({\n    interactive: options?.interactive,\n    includeMetadata: options?.includeMetadata\n  });\n}\n\n/**\n * Multi-format Export Function\n * Export molecule in multiple formats simultaneously\n */\nexport function multiFormatExport(\n  molecule: MoleculeForVisualization,\n  canvas?: any,\n  options?: {\n    formats?: ('png' | 'jpg' | 'svg')[];\n    svgOptions?: {\n      interactive?: boolean;\n      includeMetadata?: boolean;\n      animations?: boolean;\n    };\n  }\n): Record<string, string> {\n  const results: Record<string, string> = {};\n  const formats = options?.formats || ['png', 'svg'];\n\n  // Canvas-based exports (PNG, JPG)\n  if (canvas && (formats.includes('png') || formats.includes('jpg'))) {\n    const canvasRenderer = new Canvas2DRenderer(canvas);\n    const molecule2d = Canvas2DRenderer.smilesToMolecule2D(molecule.formula || 'C');\n    canvasRenderer.loadMolecule(molecule2d);\n\n    if (formats.includes('png')) {\n      results.png = canvasRenderer.exportImage('png');\n    }\n    if (formats.includes('jpg')) {\n      results.jpg = canvasRenderer.exportImage('jpg');\n    }\n  }\n\n  // SVG export\n  if (formats.includes('svg')) {\n    results.svg = quickSVGExport(molecule, {\n      interactive: options?.svgOptions?.interactive,\n      includeMetadata: options?.svgOptions?.includeMetadata\n    });\n  }\n\n  return results;\n}\n\n/**\n * SVG Export Features and Version\n */\nexport const SVG_FEATURES = {\n  INTERACTIVE: true,\n  ANIMATIONS: true,\n  METADATA: true,\n  SCALABLE: true,\n  PUBLICATION_READY: true\n} as const;\n\nexport const VISUALIZATION_VERSION = '1.6.0-svg';\n","/**\n * Advanced TypeScript Support for CREB Library\n * Enhanced type definitions with generic constraints and branded types\n * Provides superior IntelliSense and type safety for chemical data structures\n */\n\n// ============================================================================\n// Branded Types for Enhanced Type Safety\n// ============================================================================\n\n/**\n * Branded type for chemical formulas ensuring compile-time validation\n */\nexport type ChemicalFormula = string & { readonly __brand: 'ChemicalFormula' };\n\n/**\n * Branded type for valid element symbols\n */\nexport type ElementSymbol = string & { readonly __brand: 'ElementSymbol' };\n\n/**\n * Branded type for balanced chemical equations\n */\nexport type BalancedEquationString = string & { readonly __brand: 'BalancedEquation' };\n\n/**\n * Branded type for SMILES notation\n */\nexport type SMILESNotation = string & { readonly __brand: 'SMILES' };\n\n/**\n * Branded type for InChI notation\n */\nexport type InChINotation = string & { readonly __brand: 'InChI' };\n\n/**\n * Branded type for CAS numbers\n */\nexport type CASNumber = string & { readonly __brand: 'CAS' };\n\n// ============================================================================\n// Generic Constraints for Chemical Formulas\n// ============================================================================\n\n/**\n * Type constraint for valid chemical elements (Periodic Table)\n */\nexport type ValidElement = \n  | 'H' | 'He' | 'Li' | 'Be' | 'B' | 'C' | 'N' | 'O' | 'F' | 'Ne'\n  | 'Na' | 'Mg' | 'Al' | 'Si' | 'P' | 'S' | 'Cl' | 'Ar' | 'K' | 'Ca'\n  | 'Sc' | 'Ti' | 'V' | 'Cr' | 'Mn' | 'Fe' | 'Co' | 'Ni' | 'Cu' | 'Zn'\n  | 'Ga' | 'Ge' | 'As' | 'Se' | 'Br' | 'Kr' | 'Rb' | 'Sr' | 'Y' | 'Zr'\n  | 'Nb' | 'Mo' | 'Tc' | 'Ru' | 'Rh' | 'Pd' | 'Ag' | 'Cd' | 'In' | 'Sn'\n  | 'Sb' | 'Te' | 'I' | 'Xe' | 'Cs' | 'Ba' | 'La' | 'Ce' | 'Pr' | 'Nd'\n  | 'Pm' | 'Sm' | 'Eu' | 'Gd' | 'Tb' | 'Dy' | 'Ho' | 'Er' | 'Tm' | 'Yb'\n  | 'Lu' | 'Hf' | 'Ta' | 'W' | 'Re' | 'Os' | 'Ir' | 'Pt' | 'Au' | 'Hg'\n  | 'Tl' | 'Pb' | 'Bi' | 'Po' | 'At' | 'Rn' | 'Fr' | 'Ra' | 'Ac' | 'Th'\n  | 'Pa' | 'U' | 'Np' | 'Pu' | 'Am' | 'Cm' | 'Bk' | 'Cf' | 'Es' | 'Fm'\n  | 'Md' | 'No' | 'Lr' | 'Rf' | 'Db' | 'Sg' | 'Bh' | 'Hs' | 'Mt' | 'Ds'\n  | 'Rg' | 'Cn' | 'Nh' | 'Fl' | 'Mc' | 'Lv' | 'Ts' | 'Og';\n\n/**\n * Generic element count with typed element symbols\n */\n/**\n * Type-safe element count with generic constraints for elements\n */\nexport type TypedElementCount<T extends ValidElement = ValidElement> = {\n  [K in T]?: number;\n};\n\n/**\n * Generic compound composition with strict typing\n */\nexport type CompoundComposition<T extends ValidElement = ValidElement> = {\n  readonly elements: TypedElementCount<T>;\n  readonly molecularWeight: number;\n  readonly formula: ChemicalFormula;\n};\n\n// ============================================================================\n// Advanced Type Guards and Validation\n// ============================================================================\n\n/**\n * Type guard for chemical formulas\n */\nexport function isChemicalFormula(value: string): value is ChemicalFormula {\n  // More permissive validation - basic pattern for chemical formulas\n  const pattern = /^[A-Z][a-z]?(?:\\d*\\(?[A-Z][a-z]?\\d*\\)?)*\\d*$/;\n  return typeof value === 'string' && value.length > 0 && /[A-Z]/.test(value);\n}\n\n/**\n * Type guard for element symbols\n */\nexport function isElementSymbol(value: string): value is ElementSymbol {\n  const validElements: ReadonlySet<string> = new Set([\n    'H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne',\n    'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca',\n    'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn',\n    'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr',\n    'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn',\n    'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd',\n    'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb',\n    'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg',\n    'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th',\n    'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm',\n    'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds',\n    'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og'\n  ]);\n  return validElements.has(value);\n}\n\n/**\n * Type guard for balanced equations\n */\nexport function isBalancedEquation(value: string): value is BalancedEquationString {\n  return value.includes('->') || value.includes('→');\n}\n\n// ============================================================================\n// Type-Safe Chemical Data Structures\n// ============================================================================\n\n/**\n * Enhanced equation data with strict typing\n */\nexport interface TypedEquationData<TElements extends ValidElement = ValidElement> {\n  readonly reactants: readonly ChemicalFormula[];\n  readonly products: readonly ChemicalFormula[];\n  readonly parsedReactants: Record<ChemicalFormula, TypedElementCount<TElements>>;\n  readonly parsedProducts: Record<ChemicalFormula, TypedElementCount<TElements>>;\n  readonly elements: readonly TElements[];\n}\n\n/**\n * Enhanced balanced equation with type safety\n */\nexport interface TypedBalancedEquation<TElements extends ValidElement = ValidElement> {\n  readonly equation: BalancedEquationString;\n  readonly coefficients: readonly number[];\n  readonly reactants: readonly ChemicalFormula[];\n  readonly products: readonly ChemicalFormula[];\n  readonly elementalBalance: Record<TElements, number>;\n  readonly isBalanced: true; // Literal type for compile-time guarantee\n}\n\n/**\n * Type-safe species data with enhanced properties\n */\nexport interface TypedSpeciesData<TFormula extends ChemicalFormula = ChemicalFormula> {\n  readonly formula: TFormula;\n  readonly moles: number;\n  readonly grams: number;\n  readonly molarWeight: number;\n  readonly percentage: number;\n  readonly composition: CompoundComposition;\n}\n\n/**\n * Enhanced stoichiometry result with strict typing\n */\nexport interface TypedStoichiometryResult<\n  TReactants extends ChemicalFormula = ChemicalFormula,\n  TProducts extends ChemicalFormula = ChemicalFormula\n> {\n  readonly reactants: Record<TReactants, TypedSpeciesData<TReactants>>;\n  readonly products: Record<TProducts, TypedSpeciesData<TProducts>>;\n  readonly totalMolarMass: {\n    readonly reactants: number;\n    readonly products: number;\n  };\n  readonly massBalance: number; // Should be 1.0 for balanced equations\n  readonly equation: TypedBalancedEquation;\n}\n\n// ============================================================================\n// Advanced Reaction Types\n// ============================================================================\n\n/**\n * Reaction type classification with literal types\n */\nexport type ReactionType = \n  | 'synthesis'\n  | 'decomposition'\n  | 'single-replacement'\n  | 'double-replacement'\n  | 'combustion'\n  | 'acid-base'\n  | 'redox'\n  | 'precipitation'\n  | 'complex-formation';\n\n/**\n * Phase state with literal types\n */\nexport type PhaseState = 'solid' | 'liquid' | 'gas' | 'aqueous' | 'plasma';\n\n/**\n * Enhanced compound with phase information\n */\nexport interface TypedCompound<TFormula extends ChemicalFormula = ChemicalFormula> {\n  readonly formula: TFormula;\n  readonly name?: string;\n  readonly phase?: PhaseState;\n  readonly coefficient: number;\n  readonly composition: CompoundComposition;\n  readonly properties?: Readonly<{\n    molarMass: number;\n    density?: number;\n    meltingPoint?: number;\n    boilingPoint?: number;\n  }>;\n}\n\n/**\n * Type-safe reaction with enhanced metadata\n */\nexport interface TypedReaction<\n  TReactants extends ChemicalFormula = ChemicalFormula,\n  TProducts extends ChemicalFormula = ChemicalFormula\n> {\n  readonly reactants: readonly TypedCompound<TReactants>[];\n  readonly products: readonly TypedCompound<TProducts>[];\n  readonly type: ReactionType;\n  readonly isBalanced: boolean;\n  readonly balancedEquation?: TypedBalancedEquation;\n  readonly conditions?: Readonly<{\n    temperature?: number;\n    pressure?: number;\n    catalyst?: string;\n    solvent?: string;\n  }>;\n}\n\n// ============================================================================\n// Utility Types for Enhanced IntelliSense\n// ============================================================================\n\n/**\n * Extract element types from a chemical formula (compile-time)\n */\nexport type ExtractElements<T extends string> = \n  T extends `${infer Element}${infer Rest}`\n    ? Element extends ValidElement\n      ? Element | ExtractElements<Rest>\n      : ExtractElements<Rest>\n    : never;\n\n/**\n * Conditional type for organic vs inorganic compounds\n */\nexport type CompoundCategory<T extends ChemicalFormula> = \n  T extends ChemicalFormula\n    ? ExtractElements<T> extends 'C'\n      ? 'organic'\n      : 'inorganic'\n    : never;\n\n/**\n * Helper type for reaction participants\n */\nexport type ReactionParticipants<T extends TypedReaction> = \n  T extends TypedReaction<infer R, infer P> ? R | P : never;\n\n// ============================================================================\n// Factory Functions with Type Safety\n// ============================================================================\n\n/**\n * Create a chemical formula with compile-time validation\n */\nexport function createChemicalFormula(formula: string): ChemicalFormula {\n  if (!isChemicalFormula(formula)) {\n    throw new Error(`Invalid chemical formula: ${formula}`);\n  }\n  return formula;\n}\n\n/**\n * Create an element symbol with validation\n */\nexport function createElementSymbol(symbol: string): ElementSymbol {\n  if (!isElementSymbol(symbol)) {\n    throw new Error(`Invalid element symbol: ${symbol}`);\n  }\n  return symbol as ElementSymbol;\n}\n\n// ============================================================================\n// Template Literal Types for Formula Parsing\n// ============================================================================\n\n/**\n * Template literal type for common chemical formulas\n */\nexport type CommonFormulas = \n  | 'H2O' | 'CO2' | 'O2' | 'N2' | 'H2' | 'CH4' | 'C2H6' | 'C2H4' | 'C2H2'\n  | 'NH3' | 'HCl' | 'H2SO4' | 'NaOH' | 'Ca(OH)2' | 'CaCO3' | 'NaCl'\n  | 'C6H12O6' | 'C6H6' | 'C2H5OH' | 'CH3COOH' | 'C8H18';\n\n/**\n * Auto-completion helper for common chemical formulas\n */\nexport type FormulaAutoComplete<T extends string> = \n  T extends CommonFormulas ? T : T extends `${CommonFormulas}${string}` ? T : string;\n\n// ============================================================================\n// Advanced Generic Constraints\n// ============================================================================\n\n/**\n * Constraint for balanced chemical equations\n */\nexport interface BalancedEquationConstraint<T extends TypedReaction> {\n  readonly reaction: T;\n  readonly verify: T['isBalanced'] extends true ? true : false;\n}\n\n/**\n * Constraint for mass conservation\n */\nexport interface MassConservationConstraint<T extends TypedStoichiometryResult> {\n  readonly result: T;\n  readonly conserved: T['massBalance'] extends 1.0 ? true : false;\n}\n\n// ============================================================================\n// Utility Functions for Type-Safe Operations\n// ============================================================================\n\n/**\n * Parse a chemical formula into element counts\n */\nexport function parseFormula(formula: ChemicalFormula): TypedElementCount {\n  const result: TypedElementCount = {};\n  \n  // Handle parentheses first by expanding them\n  let expandedFormula = formula as string;\n  \n  // Find patterns like (OH)2 and expand them\n  const parenthesesPattern = /\\(([^)]+)\\)(\\d*)/g;\n  expandedFormula = expandedFormula.replace(parenthesesPattern, (match, group, multiplier) => {\n    const mult = multiplier ? parseInt(multiplier, 10) : 1;\n    let expanded = '';\n    for (let i = 0; i < mult; i++) {\n      expanded += group;\n    }\n    return expanded;\n  });\n  \n  // Now parse the expanded formula\n  const matches = expandedFormula.match(/([A-Z][a-z]?)(\\d*)/g);\n  if (matches) {\n    for (const match of matches) {\n      const elementMatch = match.match(/([A-Z][a-z]?)(\\d*)/);\n      if (elementMatch) {\n        const element = elementMatch[1];\n        const count = elementMatch[2] ? parseInt(elementMatch[2], 10) : 1;\n        \n        if (isElementSymbol(element)) {\n          result[element as ValidElement] = (result[element as ValidElement] || 0) + count;\n        }\n      }\n    }\n  }\n  \n  return result;\n}\n\n// ============================================================================\n// Enhanced Error Types\n// ============================================================================\n\n/**\n * Type-safe error for chemical formula validation\n */\nexport class ChemicalFormulaError extends Error {\n  constructor(\n    public readonly formula: string,\n    public readonly reason: 'invalid-syntax' | 'unknown-element' | 'invalid-structure'\n  ) {\n    super(`Invalid chemical formula \"${formula}\": ${reason}`);\n    this.name = 'ChemicalFormulaError';\n  }\n}\n\n/**\n * Type-safe error for equation balancing\n */\nexport class EquationBalancingError extends Error {\n  constructor(\n    public readonly equation: string,\n    public readonly reason: 'impossible-balance' | 'invalid-reactants' | 'invalid-products'\n  ) {\n    super(`Cannot balance equation \"${equation}\": ${reason}`);\n    this.name = 'EquationBalancingError';\n  }\n}\n\n// ============================================================================\n// Exports for Enhanced IntelliSense\n// ============================================================================\n\nexport {\n  // Re-export all types for better IntelliSense\n  type TypedElementCount as ElementCount,\n  type TypedEquationData as EquationData,\n  type TypedBalancedEquation as BalancedEquation,\n  type TypedSpeciesData as SpeciesData,\n  type TypedStoichiometryResult as StoichiometryResult,\n  type TypedCompound as Compound,\n  type TypedReaction as Reaction\n};\n","/**\n * Enhanced Chemical Equation Balancer with Advanced TypeScript Support\n * Simplified version that provides compound analysis and type safety\n */\n\nimport { ChemicalEquationBalancer } from './balancer';\nimport { ElementCounter } from './utils';\nimport { \n  ChemicalFormula, \n  ElementSymbol, \n  ValidElement,\n  TypedElementCount,\n  isChemicalFormula,\n  isElementSymbol,\n  parseFormula,\n  createChemicalFormula\n} from './advancedTypes';\n\n/**\n * Enhanced chemical compound information\n */\nexport interface EnhancedCompoundInfo {\n  formula: string;\n  molarMass: number;\n  elements: string[];\n  elementCount: Record<string, number>;\n}\n\n/**\n * Enhanced balanced equation result with compound analysis\n */\nexport interface EnhancedBalanceResult {\n  equation: string;\n  isBalanced: boolean;\n  compounds: EnhancedCompoundInfo[];\n  coefficients?: number[];\n  reactants?: string[];\n  products?: string[];\n}\n\n/**\n * Enhanced balancer with type-safe compound analysis\n */\nexport class EnhancedBalancer {\n  private balancer: ChemicalEquationBalancer;\n\n  constructor() {\n    this.balancer = new ChemicalEquationBalancer();\n  }\n\n  /**\n   * Balance equation with enhanced compound information\n   */\n  balance(equation: string): EnhancedBalanceResult {\n    try {\n      // Use the detailed balancer for more information\n      const result = this.balancer.balanceDetailed(equation);\n      \n      // Extract all unique formulas from reactants and products\n      const allFormulas = new Set<string>();\n      \n      // Add formulas from the result structure\n      if (result.reactants && result.reactants.length > 0) {\n        result.reactants.forEach((formula: string) => allFormulas.add(formula));\n      }\n      if (result.products && result.products.length > 0) {\n        result.products.forEach((formula: string) => allFormulas.add(formula));\n      }\n\n      // Analyze each compound\n      const compounds = Array.from(allFormulas).map(formula => \n        this.analyzeCompound(formula)\n      ).filter(compound => compound.formula !== ''); // Filter out empty results\n\n      // Determine if the equation was balanced by checking if it changed OR if coefficients are all 1 (already balanced)\n      const coefficientsAllOne = result.coefficients && result.coefficients.every(coeff => coeff === 1);\n      const wasBalanced = result.equation !== equation || coefficientsAllOne;\n\n      return {\n        equation: result.equation,\n        isBalanced: wasBalanced,\n        compounds,\n        coefficients: result.coefficients,\n        reactants: result.reactants,\n        products: result.products\n      };\n\n    } catch (error) {\n      // Note: Error in enhanced balancer - using fallback\n      return {\n        equation,\n        isBalanced: false,\n        compounds: [],\n        coefficients: [],\n        reactants: [],\n        products: []\n      };\n    }\n  }\n\n  /**\n   * Analyze a single compound for detailed information\n   */\n  private analyzeCompound(formula: string): EnhancedCompoundInfo {\n    try {\n      const elementCounter = new ElementCounter(formula);\n      const elementCount = elementCounter.parseFormula();\n      \n      const elements = Object.keys(elementCount);\n      const molarMass = this.calculateMolarMass(elementCount);\n\n      return {\n        formula,\n        molarMass,\n        elements,\n        elementCount\n      };\n    } catch (error) {\n      return {\n        formula,\n        molarMass: 0,\n        elements: [],\n        elementCount: {}\n      };\n    }\n  }\n\n  /**\n   * Calculate molar mass from element count\n   */\n  private calculateMolarMass(elementCount: Record<string, number>): number {\n    // Atomic masses (simplified)\n    const atomicMasses: Record<string, number> = {\n      'H': 1.008, 'He': 4.003, 'Li': 6.941, 'Be': 9.012, 'B': 10.811,\n      'C': 12.011, 'N': 14.007, 'O': 15.999, 'F': 18.998, 'Ne': 20.180,\n      'Na': 22.990, 'Mg': 24.305, 'Al': 26.982, 'Si': 28.086, 'P': 30.974,\n      'S': 32.065, 'Cl': 35.453, 'Ar': 39.948, 'K': 39.098, 'Ca': 40.078,\n      'Fe': 55.845, 'Cu': 63.546, 'Zn': 65.38, 'Ag': 107.868, 'Au': 196.966\n      // Add more as needed\n    };\n\n    let totalMass = 0;\n    for (const [element, count] of Object.entries(elementCount)) {\n      const atomicMass = atomicMasses[element];\n      if (atomicMass) {\n        totalMass += atomicMass * (count || 0);\n      }\n    }\n\n    return totalMass;\n  }\n\n  /**\n   * Simple formula validation\n   */\n  private isValidFormula(formula: string): boolean {\n    // Basic validation - contains at least one capital letter\n    return /[A-Z]/.test(formula) && formula.length > 0;\n  }\n}\n","/**\n * Cache Eviction Policies for CREB-JS\n * \n * Implements various cache eviction strategies including LRU, LFU, FIFO, TTL, and Random.\n * Each policy provides different trade-offs between performance and memory efficiency.\n */\n\nimport { EvictionPolicy, EvictionStrategy, CacheEntry, AdvancedCacheConfig } from './types';\n\n/**\n * Least Recently Used (LRU) eviction policy\n * Evicts entries that haven't been accessed for the longest time\n */\nexport class LRUEvictionPolicy implements EvictionPolicy {\n  readonly strategy: EvictionStrategy = 'lru';\n\n  selectEvictionCandidates<T>(\n    entries: Map<string, CacheEntry<T>>,\n    config: AdvancedCacheConfig,\n    targetCount: number\n  ): string[] {\n    const candidates: Array<{ key: string; lastAccessed: number }> = [];\n    \n    for (const [key, entry] of entries.entries()) {\n      candidates.push({ key, lastAccessed: entry.lastAccessed });\n    }\n    \n    // Sort by last accessed time (oldest first)\n    candidates.sort((a, b) => a.lastAccessed - b.lastAccessed);\n    \n    return candidates.slice(0, targetCount).map(c => c.key);\n  }\n\n  onAccess<T>(entry: CacheEntry<T>): void {\n    entry.lastAccessed = Date.now();\n    entry.accessCount++;\n  }\n\n  onInsert<T>(entry: CacheEntry<T>): void {\n    const now = Date.now();\n    entry.lastAccessed = now;\n    entry.accessCount = 1;\n  }\n}\n\n/**\n * Least Frequently Used (LFU) eviction policy\n * Evicts entries with the lowest access frequency\n */\nexport class LFUEvictionPolicy implements EvictionPolicy {\n  readonly strategy: EvictionStrategy = 'lfu';\n\n  selectEvictionCandidates<T>(\n    entries: Map<string, CacheEntry<T>>,\n    config: AdvancedCacheConfig,\n    targetCount: number\n  ): string[] {\n    const candidates: Array<{ key: string; accessCount: number; lastAccessed: number }> = [];\n    \n    for (const [key, entry] of entries.entries()) {\n      candidates.push({ \n        key, \n        accessCount: entry.accessCount,\n        lastAccessed: entry.lastAccessed \n      });\n    }\n    \n    // Sort by access count (lowest first), then by last accessed for ties\n    candidates.sort((a, b) => {\n      if (a.accessCount !== b.accessCount) {\n        return a.accessCount - b.accessCount;\n      }\n      return a.lastAccessed - b.lastAccessed;\n    });\n    \n    return candidates.slice(0, targetCount).map(c => c.key);\n  }\n\n  onAccess<T>(entry: CacheEntry<T>): void {\n    entry.lastAccessed = Date.now();\n    entry.accessCount++;\n  }\n\n  onInsert<T>(entry: CacheEntry<T>): void {\n    const now = Date.now();\n    entry.lastAccessed = now;\n    entry.accessCount = 1;\n  }\n}\n\n/**\n * First In, First Out (FIFO) eviction policy\n * Evicts entries in the order they were inserted\n */\nexport class FIFOEvictionPolicy implements EvictionPolicy {\n  readonly strategy: EvictionStrategy = 'fifo';\n\n  selectEvictionCandidates<T>(\n    entries: Map<string, CacheEntry<T>>,\n    config: AdvancedCacheConfig,\n    targetCount: number\n  ): string[] {\n    const candidates: Array<{ key: string; insertionOrder: number }> = [];\n    \n    for (const [key, entry] of entries.entries()) {\n      candidates.push({ key, insertionOrder: entry.insertionOrder });\n    }\n    \n    // Sort by insertion order (oldest first)\n    candidates.sort((a, b) => a.insertionOrder - b.insertionOrder);\n    \n    return candidates.slice(0, targetCount).map(c => c.key);\n  }\n\n  onAccess<T>(entry: CacheEntry<T>): void {\n    entry.lastAccessed = Date.now();\n    entry.accessCount++;\n  }\n\n  onInsert<T>(entry: CacheEntry<T>): void {\n    const now = Date.now();\n    entry.lastAccessed = now;\n    entry.accessCount = 1;\n  }\n}\n\n/**\n * Time To Live (TTL) eviction policy\n * Evicts expired entries first, then falls back to LRU\n */\nexport class TTLEvictionPolicy implements EvictionPolicy {\n  readonly strategy: EvictionStrategy = 'ttl';\n\n  selectEvictionCandidates<T>(\n    entries: Map<string, CacheEntry<T>>,\n    config: AdvancedCacheConfig,\n    targetCount: number\n  ): string[] {\n    const now = Date.now();\n    const expired: string[] = [];\n    const nonExpired: Array<{ key: string; lastAccessed: number }> = [];\n    \n    for (const [key, entry] of entries.entries()) {\n      if (entry.ttl > 0 && now >= entry.expiresAt) {\n        expired.push(key);\n      } else {\n        nonExpired.push({ key, lastAccessed: entry.lastAccessed });\n      }\n    }\n    \n    // Return expired entries first\n    if (expired.length >= targetCount) {\n      return expired.slice(0, targetCount);\n    }\n    \n    // If not enough expired entries, use LRU for the rest\n    const remaining = targetCount - expired.length;\n    nonExpired.sort((a, b) => a.lastAccessed - b.lastAccessed);\n    \n    return [...expired, ...nonExpired.slice(0, remaining).map(c => c.key)];\n  }\n\n  onAccess<T>(entry: CacheEntry<T>): void {\n    entry.lastAccessed = Date.now();\n    entry.accessCount++;\n  }\n\n  onInsert<T>(entry: CacheEntry<T>): void {\n    const now = Date.now();\n    entry.lastAccessed = now;\n    entry.accessCount = 1;\n  }\n}\n\n/**\n * Random eviction policy\n * Evicts random entries (useful for testing and as fallback)\n */\nexport class RandomEvictionPolicy implements EvictionPolicy {\n  readonly strategy: EvictionStrategy = 'random';\n\n  selectEvictionCandidates<T>(\n    entries: Map<string, CacheEntry<T>>,\n    config: AdvancedCacheConfig,\n    targetCount: number\n  ): string[] {\n    const keys = Array.from(entries.keys());\n    const candidates: string[] = [];\n    \n    // Fisher-Yates shuffle to get random keys\n    for (let i = 0; i < targetCount && i < keys.length; i++) {\n      const randomIndex = Math.floor(Math.random() * (keys.length - i)) + i;\n      [keys[i], keys[randomIndex]] = [keys[randomIndex], keys[i]];\n      candidates.push(keys[i]);\n    }\n    \n    return candidates;\n  }\n\n  onAccess<T>(entry: CacheEntry<T>): void {\n    entry.lastAccessed = Date.now();\n    entry.accessCount++;\n  }\n\n  onInsert<T>(entry: CacheEntry<T>): void {\n    const now = Date.now();\n    entry.lastAccessed = now;\n    entry.accessCount = 1;\n  }\n}\n\n/**\n * Eviction policy factory\n */\nexport class EvictionPolicyFactory {\n  private static policies = new Map<EvictionStrategy, EvictionPolicy>([\n    ['lru', new LRUEvictionPolicy()],\n    ['lfu', new LFUEvictionPolicy()],\n    ['fifo', new FIFOEvictionPolicy()],\n    ['ttl', new TTLEvictionPolicy()],\n    ['random', new RandomEvictionPolicy()]\n  ]);\n\n  /**\n   * Get eviction policy instance\n   */\n  static getPolicy(strategy: EvictionStrategy): EvictionPolicy {\n    const policy = this.policies.get(strategy);\n    if (!policy) {\n      throw new Error(`Unknown eviction strategy: ${strategy}`);\n    }\n    return policy;\n  }\n\n  /**\n   * Register custom eviction policy\n   */\n  static registerPolicy(policy: EvictionPolicy): void {\n    this.policies.set(policy.strategy, policy);\n  }\n\n  /**\n   * Get all available strategies\n   */\n  static getAvailableStrategies(): EvictionStrategy[] {\n    return Array.from(this.policies.keys());\n  }\n}\n\n/**\n * Adaptive eviction policy that switches strategies based on access patterns\n */\nexport class AdaptiveEvictionPolicy implements EvictionPolicy {\n  readonly strategy: EvictionStrategy = 'lru'; // Default fallback\n  \n  private currentPolicy: EvictionPolicy;\n  private performanceHistory: Map<EvictionStrategy, number[]> = new Map();\n  private evaluationWindow = 100; // Number of operations to evaluate\n  private operationCount = 0;\n  \n  constructor(private fallbackStrategy: EvictionStrategy = 'lru') {\n    this.currentPolicy = EvictionPolicyFactory.getPolicy(fallbackStrategy);\n    \n    // Initialize performance tracking\n    for (const strategy of EvictionPolicyFactory.getAvailableStrategies()) {\n      this.performanceHistory.set(strategy, []);\n    }\n  }\n\n  selectEvictionCandidates<T>(\n    entries: Map<string, CacheEntry<T>>,\n    config: AdvancedCacheConfig,\n    targetCount: number\n  ): string[] {\n    this.operationCount++;\n    \n    // Periodically evaluate and potentially switch strategies\n    if (this.operationCount % this.evaluationWindow === 0) {\n      this.evaluateAndAdapt(entries, config);\n    }\n    \n    return this.currentPolicy.selectEvictionCandidates(entries, config, targetCount);\n  }\n\n  onAccess<T>(entry: CacheEntry<T>): void {\n    this.currentPolicy.onAccess(entry);\n  }\n\n  onInsert<T>(entry: CacheEntry<T>): void {\n    this.currentPolicy.onInsert(entry);\n  }\n\n  /**\n   * Evaluate current performance and adapt strategy if needed\n   */\n  private evaluateAndAdapt<T>(\n    entries: Map<string, CacheEntry<T>>,\n    config: AdvancedCacheConfig\n  ): void {\n    // Calculate access pattern metrics\n    const now = Date.now();\n    let totalAccesses = 0;\n    let recentAccesses = 0;\n    let accessVariance = 0;\n    let meanAccess = 0;\n    \n    const accessCounts: number[] = [];\n    \n    for (const entry of entries.values()) {\n      totalAccesses += entry.accessCount;\n      accessCounts.push(entry.accessCount);\n      \n      // Count recent accesses (last hour)\n      if (now - entry.lastAccessed < 3600000) {\n        recentAccesses++;\n      }\n    }\n    \n    if (accessCounts.length > 0) {\n      meanAccess = totalAccesses / accessCounts.length;\n      accessVariance = accessCounts.reduce((sum, count) => sum + Math.pow(count - meanAccess, 2), 0) / accessCounts.length;\n    }\n    \n    // Determine optimal strategy based on patterns\n    let optimalStrategy: EvictionStrategy;\n    \n    if (accessVariance > meanAccess * 2) {\n      // High variance suggests some items are much more popular -> LFU\n      optimalStrategy = 'lfu';\n    } else if (recentAccesses / entries.size > 0.8) {\n      // Most items accessed recently -> LRU\n      optimalStrategy = 'lru';\n    } else if (totalAccesses / entries.size < 2) {\n      // Low overall access -> FIFO\n      optimalStrategy = 'fifo';\n    } else {\n      // Mixed pattern -> TTL\n      optimalStrategy = 'ttl';\n    }\n    \n    // Switch strategy if different from current\n    if (optimalStrategy !== this.currentPolicy.strategy) {\n      this.currentPolicy = EvictionPolicyFactory.getPolicy(optimalStrategy);\n    }\n  }\n\n  /**\n   * Get current strategy being used\n   */\n  getCurrentStrategy(): EvictionStrategy {\n    return this.currentPolicy.strategy;\n  }\n}\n","/**\n * Cache Metrics Collection and Analysis for CREB-JS\n * \n * Provides comprehensive metrics collection, analysis, and reporting for cache performance.\n * Includes real-time monitoring, historical analysis, and performance recommendations.\n */\n\nimport { \n  CacheStats, \n  CacheMetrics, \n  EvictionStrategy, \n  CacheEvent, \n  CacheEventType \n} from './types';\n\n/**\n * Real-time cache metrics collector\n */\nexport class CacheMetricsCollector {\n  private stats!: CacheStats;\n  private history: CacheStats[] = [];\n  private maxHistorySize = 100;\n  private eventCounts = new Map<CacheEventType, number>();\n  private accessTimes: number[] = [];\n  private maxAccessTimeSamples = 1000;\n  \n  constructor() {\n    this.resetStats();\n  }\n\n  /**\n   * Reset all statistics\n   */\n  resetStats(): void {\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      size: 0,\n      memoryUsage: 0,\n      memoryUtilization: 0,\n      evictions: 0,\n      expirations: 0,\n      averageAccessTime: 0,\n      evictionBreakdown: {\n        'lru': 0,\n        'lfu': 0,\n        'fifo': 0,\n        'ttl': 0,\n        'random': 0\n      },\n      lastUpdated: Date.now()\n    };\n    this.eventCounts.clear();\n    this.accessTimes = [];\n  }\n\n  /**\n   * Record a cache event\n   */\n  recordEvent(event: CacheEvent): void {\n    const currentCount = this.eventCounts.get(event.type) || 0;\n    this.eventCounts.set(event.type, currentCount + 1);\n\n    switch (event.type) {\n      case 'hit':\n        this.stats.hits++;\n        break;\n      case 'miss':\n        this.stats.misses++;\n        break;\n      case 'eviction':\n        this.stats.evictions++;\n        if (event.metadata?.strategy) {\n          this.stats.evictionBreakdown[event.metadata.strategy]++;\n        }\n        break;\n      case 'expiration':\n        this.stats.expirations++;\n        break;\n    }\n\n    // Record access time if available\n    if (event.metadata?.latency !== undefined) {\n      this.accessTimes.push(event.metadata.latency);\n      if (this.accessTimes.length > this.maxAccessTimeSamples) {\n        this.accessTimes.shift(); // Remove oldest sample\n      }\n    }\n\n    this.updateComputedStats();\n  }\n\n  /**\n   * Update cache size and memory usage\n   */\n  updateCacheInfo(size: number, memoryUsage: number, maxMemory: number): void {\n    this.stats.size = size;\n    this.stats.memoryUsage = memoryUsage;\n    this.stats.memoryUtilization = maxMemory > 0 ? (memoryUsage / maxMemory) * 100 : 0;\n    this.stats.lastUpdated = Date.now();\n  }\n\n  /**\n   * Get current statistics\n   */\n  getStats(): CacheStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * Get comprehensive metrics with historical data and trends\n   */\n  getMetrics(): CacheMetrics {\n    const current = this.getStats();\n    \n    // Calculate trends\n    const trends = this.calculateTrends();\n    \n    // Calculate peaks\n    const peaks = this.calculatePeaks();\n    \n    return {\n      current,\n      history: [...this.history],\n      trends,\n      peaks\n    };\n  }\n\n  /**\n   * Take a snapshot of current stats for historical tracking\n   */\n  takeSnapshot(): void {\n    const snapshot = this.getStats();\n    this.history.push(snapshot);\n    \n    if (this.history.length > this.maxHistorySize) {\n      this.history.shift(); // Remove oldest snapshot\n    }\n  }\n\n  /**\n   * Get event counts\n   */\n  getEventCounts(): Map<CacheEventType, number> {\n    return new Map(this.eventCounts);\n  }\n\n  /**\n   * Get access time percentiles\n   */\n  getAccessTimePercentiles(): { p50: number; p90: number; p95: number; p99: number } {\n    if (this.accessTimes.length === 0) {\n      return { p50: 0, p90: 0, p95: 0, p99: 0 };\n    }\n\n    const sorted = [...this.accessTimes].sort((a, b) => a - b);\n    const n = sorted.length;\n\n    return {\n      p50: this.getPercentile(sorted, 50),\n      p90: this.getPercentile(sorted, 90),\n      p95: this.getPercentile(sorted, 95),\n      p99: this.getPercentile(sorted, 99)\n    };\n  }\n\n  /**\n   * Update computed statistics\n   */\n  private updateComputedStats(): void {\n    const total = this.stats.hits + this.stats.misses;\n    this.stats.hitRate = total > 0 ? (this.stats.hits / total) * 100 : 0;\n    \n    if (this.accessTimes.length > 0) {\n      this.stats.averageAccessTime = this.accessTimes.reduce((sum, time) => sum + time, 0) / this.accessTimes.length;\n    }\n    \n    this.stats.lastUpdated = Date.now();\n  }\n\n  /**\n   * Calculate performance trends\n   */\n  private calculateTrends(): CacheMetrics['trends'] {\n    if (this.history.length < 3) {\n      return {\n        hitRateTrend: 'stable',\n        memoryTrend: 'stable',\n        latencyTrend: 'stable'\n      };\n    }\n\n    const recent = this.history.slice(-3);\n    \n    // Hit rate trend\n    const hitRateChange = recent[2].hitRate - recent[0].hitRate;\n    const hitRateTrend = Math.abs(hitRateChange) < 1 ? 'stable' : \n                        hitRateChange > 0 ? 'improving' : 'declining';\n    \n    // Memory trend\n    const memoryChange = recent[2].memoryUtilization - recent[0].memoryUtilization;\n    const memoryTrend = Math.abs(memoryChange) < 5 ? 'stable' :\n                        memoryChange > 0 ? 'increasing' : 'decreasing';\n    \n    // Latency trend\n    const latencyChange = recent[2].averageAccessTime - recent[0].averageAccessTime;\n    const latencyTrend = Math.abs(latencyChange) < 0.1 ? 'stable' :\n                         latencyChange < 0 ? 'improving' : 'degrading';\n\n    return {\n      hitRateTrend,\n      memoryTrend,\n      latencyTrend\n    };\n  }\n\n  /**\n   * Calculate peak performance metrics\n   */\n  private calculatePeaks(): CacheMetrics['peaks'] {\n    if (this.history.length === 0) {\n      return {\n        maxHitRate: this.stats.hitRate,\n        maxMemoryUsage: this.stats.memoryUsage,\n        minLatency: this.stats.averageAccessTime\n      };\n    }\n\n    const allStats = [...this.history, this.stats];\n    \n    return {\n      maxHitRate: Math.max(...allStats.map(s => s.hitRate)),\n      maxMemoryUsage: Math.max(...allStats.map(s => s.memoryUsage)),\n      minLatency: Math.min(...allStats.map(s => s.averageAccessTime))\n    };\n  }\n\n  /**\n   * Get percentile value from sorted array\n   */\n  private getPercentile(sorted: number[], percentile: number): number {\n    const index = Math.ceil((percentile / 100) * sorted.length) - 1;\n    return sorted[Math.max(0, Math.min(index, sorted.length - 1))];\n  }\n}\n\n/**\n * Cache performance analyzer\n */\nexport class CachePerformanceAnalyzer {\n  /**\n   * Analyze cache performance and provide recommendations\n   */\n  static analyze(metrics: CacheMetrics): {\n    score: number;\n    issues: string[];\n    recommendations: string[];\n    insights: string[];\n  } {\n    const { current, trends, history } = metrics;\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    const insights: string[] = [];\n    let score = 100;\n\n    // Analyze hit rate\n    if (current.hitRate < 50) {\n      score -= 30;\n      issues.push('Low cache hit rate');\n      recommendations.push('Consider increasing cache size or optimizing access patterns');\n    } else if (current.hitRate < 70) {\n      score -= 15;\n      issues.push('Moderate cache hit rate');\n      recommendations.push('Review cache eviction strategy');\n    }\n\n    // Analyze memory utilization\n    if (current.memoryUtilization > 90) {\n      score -= 20;\n      issues.push('High memory utilization');\n      recommendations.push('Increase memory limit or improve eviction policy');\n    } else if (current.memoryUtilization < 30) {\n      insights.push('Low memory utilization - cache size could be reduced');\n    }\n\n    // Analyze access time\n    if (current.averageAccessTime > 5) {\n      score -= 15;\n      issues.push('High average access time');\n      recommendations.push('Check for lock contention or optimize data structures');\n    }\n\n    // Analyze trends\n    if (trends.hitRateTrend === 'declining') {\n      score -= 10;\n      issues.push('Declining hit rate trend');\n      recommendations.push('Monitor access patterns and consider adaptive caching');\n    }\n\n    if (trends.latencyTrend === 'degrading') {\n      score -= 10;\n      issues.push('Increasing access latency');\n      recommendations.push('Profile cache operations for performance bottlenecks');\n    }\n\n    // Analyze eviction distribution\n    const totalEvictions = Object.values(current.evictionBreakdown).reduce((sum, count) => sum + count, 0);\n    if (totalEvictions > 0) {\n      const dominantStrategy = Object.entries(current.evictionBreakdown)\n        .reduce((max, [strategy, count]) => count > max.count ? { strategy, count } : max, { strategy: '', count: 0 });\n      \n      if (dominantStrategy.count / totalEvictions > 0.8) {\n        insights.push(`Cache primarily using ${dominantStrategy.strategy} eviction`);\n      } else {\n        insights.push('Cache using mixed eviction strategies - consider adaptive policy');\n      }\n    }\n\n    // Historical comparison\n    if (history.length > 0) {\n      const baseline = history[0];\n      const hitRateImprovement = current.hitRate - baseline.hitRate;\n      if (hitRateImprovement > 10) {\n        insights.push('Significant hit rate improvement observed');\n      } else if (hitRateImprovement < -10) {\n        issues.push('Hit rate has declined significantly');\n        recommendations.push('Review recent changes to access patterns or cache configuration');\n      }\n    }\n\n    return {\n      score: Math.max(0, score),\n      issues,\n      recommendations,\n      insights\n    };\n  }\n\n  /**\n   * Generate performance report\n   */\n  static generateReport(metrics: CacheMetrics): string {\n    const analysis = this.analyze(metrics);\n    const { current } = metrics;\n\n    let report = '# Cache Performance Report\\n\\n';\n    \n    report += `## Overall Score: ${analysis.score}/100\\n\\n`;\n    \n    report += '## Current Statistics\\n';\n    report += `- Hit Rate: ${current.hitRate.toFixed(2)}%\\n`;\n    report += `- Cache Size: ${current.size} entries\\n`;\n    report += `- Memory Usage: ${(current.memoryUsage / 1024 / 1024).toFixed(2)} MB (${current.memoryUtilization.toFixed(1)}%)\\n`;\n    report += `- Average Access Time: ${current.averageAccessTime.toFixed(2)}ms\\n`;\n    report += `- Evictions: ${current.evictions}\\n`;\n    report += `- Expirations: ${current.expirations}\\n\\n`;\n\n    report += '## Trends\\n';\n    report += `- Hit Rate: ${metrics.trends.hitRateTrend}\\n`;\n    report += `- Memory Usage: ${metrics.trends.memoryTrend}\\n`;\n    report += `- Latency: ${metrics.trends.latencyTrend}\\n\\n`;\n\n    if (analysis.issues.length > 0) {\n      report += '## Issues\\n';\n      analysis.issues.forEach(issue => {\n        report += `- ${issue}\\n`;\n      });\n      report += '\\n';\n    }\n\n    if (analysis.recommendations.length > 0) {\n      report += '## Recommendations\\n';\n      analysis.recommendations.forEach(rec => {\n        report += `- ${rec}\\n`;\n      });\n      report += '\\n';\n    }\n\n    if (analysis.insights.length > 0) {\n      report += '## Insights\\n';\n      analysis.insights.forEach(insight => {\n        report += `- ${insight}\\n`;\n      });\n      report += '\\n';\n    }\n\n    return report;\n  }\n}\n","/**\n * Advanced Cache Implementation for CREB-JS\n * \n * Production-ready cache with TTL, multiple eviction policies, metrics,\n * memory management, and thread safety.\n */\n\nimport { \n  IAdvancedCache, \n  CacheEntry, \n  AdvancedCacheConfig, \n  CacheResult, \n  CacheStats, \n  CacheMetrics,\n  CacheEvent,\n  CacheEventType,\n  CacheEventListener,\n  EvictionStrategy\n} from './types';\nimport { EvictionPolicyFactory } from './EvictionPolicies';\nimport { CacheMetricsCollector, CachePerformanceAnalyzer } from './CacheMetrics';\nimport { Injectable } from '../../core/decorators/Injectable';\n\n/**\n * Default cache configuration\n */\nconst DEFAULT_CONFIG: AdvancedCacheConfig = {\n  maxSize: 1000,\n  defaultTtl: 3600000, // 1 hour\n  evictionStrategy: 'lru',\n  fallbackStrategy: 'fifo',\n  maxMemoryBytes: 100 * 1024 * 1024, // 100MB\n  enableMetrics: true,\n  metricsInterval: 60000, // 1 minute\n  autoCleanup: true,\n  cleanupInterval: 300000, // 5 minutes\n  threadSafe: true\n};\n\n/**\n * Advanced cache implementation with comprehensive features\n */\n@Injectable()\nexport class AdvancedCache<T = any> implements IAdvancedCache<T> {\n  private entries = new Map<string, CacheEntry<T>>();\n  private config: AdvancedCacheConfig;\n  private metrics: CacheMetricsCollector;\n  private listeners = new Map<CacheEventType, Set<CacheEventListener<T>>>();\n  private insertionCounter = 0;\n  private cleanupTimer?: NodeJS.Timeout;\n  private metricsTimer?: NodeJS.Timeout;\n  private mutex = new AsyncMutex();\n\n  constructor(config: Partial<AdvancedCacheConfig> = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n    this.metrics = new CacheMetricsCollector();\n    \n    // Start background tasks\n    if (this.config.autoCleanup) {\n      this.startCleanupTimer();\n    }\n    \n    if (this.config.enableMetrics) {\n      this.startMetricsTimer();\n    }\n  }\n\n  /**\n   * Get value from cache\n   */\n  async get(key: string): Promise<CacheResult<T>> {\n    const startTime = Date.now();\n    \n    if (this.config.threadSafe) {\n      return this.mutex.runExclusive(() => this.getInternal(key, startTime));\n    } else {\n      return this.getInternal(key, startTime);\n    }\n  }\n\n  /**\n   * Set value in cache\n   */\n  async set(key: string, value: T, ttl?: number): Promise<CacheResult<void>> {\n    const startTime = Date.now();\n    \n    if (this.config.threadSafe) {\n      return this.mutex.runExclusive(() => this.setInternal(key, value, ttl, startTime));\n    } else {\n      return this.setInternal(key, value, ttl, startTime);\n    }\n  }\n\n  /**\n   * Check if key exists in cache\n   */\n  async has(key: string): Promise<boolean> {\n    const entry = this.entries.get(key);\n    if (!entry) return false;\n    \n    // Check if expired\n    const now = Date.now();\n    if (entry.ttl > 0 && now >= entry.expiresAt) {\n      await this.deleteInternal(key);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Delete entry from cache\n   */\n  async delete(key: string): Promise<boolean> {\n    if (this.config.threadSafe) {\n      return this.mutex.runExclusive(() => this.deleteInternal(key));\n    } else {\n      return this.deleteInternal(key);\n    }\n  }\n\n  /**\n   * Clear all entries\n   */\n  async clear(): Promise<void> {\n    if (this.config.threadSafe) {\n      return this.mutex.runExclusive(() => this.clearInternal());\n    } else {\n      return this.clearInternal();\n    }\n  }\n\n  /**\n   * Get current cache statistics\n   */\n  getStats(): CacheStats {\n    this.updateMetrics();\n    return this.metrics.getStats();\n  }\n\n  /**\n   * Get detailed metrics\n   */\n  getMetrics(): CacheMetrics {\n    this.metrics.takeSnapshot();\n    return this.metrics.getMetrics();\n  }\n\n  /**\n   * Force cleanup of expired entries\n   */\n  async cleanup(): Promise<number> {\n    if (this.config.threadSafe) {\n      return this.mutex.runExclusive(() => this.cleanupInternal());\n    } else {\n      return this.cleanupInternal();\n    }\n  }\n\n  /**\n   * Add event listener\n   */\n  addEventListener(type: CacheEventType, listener: CacheEventListener<T>): void {\n    if (!this.listeners.has(type)) {\n      this.listeners.set(type, new Set());\n    }\n    this.listeners.get(type)!.add(listener);\n  }\n\n  /**\n   * Remove event listener\n   */\n  removeEventListener(type: CacheEventType, listener: CacheEventListener<T>): void {\n    const typeListeners = this.listeners.get(type);\n    if (typeListeners) {\n      typeListeners.delete(listener);\n    }\n  }\n\n  /**\n   * Get all keys\n   */\n  keys(): string[] {\n    return Array.from(this.entries.keys());\n  }\n\n  /**\n   * Get cache size\n   */\n  size(): number {\n    return this.entries.size;\n  }\n\n  /**\n   * Get memory usage in bytes\n   */\n  memoryUsage(): number {\n    let total = 0;\n    for (const entry of this.entries.values()) {\n      total += entry.sizeBytes;\n    }\n    return total;\n  }\n\n  /**\n   * Check if cache is healthy\n   */\n  async healthCheck(): Promise<{\n    healthy: boolean;\n    issues: string[];\n    recommendations: string[];\n  }> {\n    const metrics = this.getMetrics();\n    const analysis = CachePerformanceAnalyzer.analyze(metrics);\n    \n    return {\n      healthy: analysis.score >= 70,\n      issues: analysis.issues,\n      recommendations: analysis.recommendations\n    };\n  }\n\n  /**\n   * Shutdown cache and cleanup resources\n   */\n  shutdown(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n    if (this.metricsTimer) {\n      clearInterval(this.metricsTimer);\n    }\n  }\n\n  // Internal implementation methods\n\n  private async getInternal(key: string, startTime: number): Promise<CacheResult<T>> {\n    const entry = this.entries.get(key);\n    const latency = Date.now() - startTime;\n    \n    if (!entry) {\n      this.emitEvent('miss', key, undefined, { latency });\n      return { success: true, hit: false, latency };\n    }\n    \n    // Check if expired\n    const now = Date.now();\n    if (entry.ttl > 0 && now >= entry.expiresAt) {\n      await this.deleteInternal(key);\n      this.emitEvent('miss', key, undefined, { latency, expired: true });\n      return { success: true, hit: false, latency, metadata: { expired: true } };\n    }\n    \n    // Update access metadata\n    const policy = EvictionPolicyFactory.getPolicy(this.config.evictionStrategy);\n    policy.onAccess(entry);\n    \n    this.emitEvent('hit', key, entry.value, { latency });\n    return { success: true, value: entry.value, hit: true, latency };\n  }\n\n  private async setInternal(key: string, value: T, ttl?: number, startTime?: number): Promise<CacheResult<void>> {\n    const now = Date.now();\n    const entryTtl = ttl ?? this.config.defaultTtl;\n    const latency = startTime ? now - startTime : 0;\n    \n    // Calculate size estimate\n    const sizeBytes = this.estimateSize(value);\n    \n    // Check memory constraints before adding\n    const currentMemory = this.memoryUsage();\n    if (this.config.maxMemoryBytes > 0 && currentMemory + sizeBytes > this.config.maxMemoryBytes) {\n      await this.evictForMemory(sizeBytes);\n    }\n    \n    // Check size constraints and evict if necessary\n    if (this.entries.size >= this.config.maxSize) {\n      await this.evictEntries(1);\n    }\n    \n    // Create new entry\n    const entry: CacheEntry<T> = {\n      value,\n      createdAt: now,\n      lastAccessed: now,\n      accessCount: 1,\n      ttl: entryTtl,\n      expiresAt: entryTtl > 0 ? now + entryTtl : 0,\n      sizeBytes,\n      insertionOrder: this.insertionCounter++\n    };\n    \n    // Update access metadata\n    const policy = EvictionPolicyFactory.getPolicy(this.config.evictionStrategy);\n    policy.onInsert(entry);\n    \n    // Store entry\n    this.entries.set(key, entry);\n    \n    this.emitEvent('set', key, value, { latency });\n    return { success: true, hit: false, latency };\n  }\n\n  private async deleteInternal(key: string): Promise<boolean> {\n    const entry = this.entries.get(key);\n    if (!entry) return false;\n    \n    this.entries.delete(key);\n    this.emitEvent('delete', key, entry.value);\n    return true;\n  }\n\n  private async clearInternal(): Promise<void> {\n    this.entries.clear();\n    this.insertionCounter = 0;\n    this.emitEvent('clear');\n  }\n\n  private async cleanupInternal(): Promise<number> {\n    const now = Date.now();\n    const expiredKeys: string[] = [];\n    \n    for (const [key, entry] of this.entries.entries()) {\n      if (entry.ttl > 0 && now >= entry.expiresAt) {\n        expiredKeys.push(key);\n      }\n    }\n    \n    for (const key of expiredKeys) {\n      this.entries.delete(key);\n      this.emitEvent('expiration', key);\n    }\n    \n    return expiredKeys.length;\n  }\n\n  private async evictEntries(count: number): Promise<void> {\n    const policy = EvictionPolicyFactory.getPolicy(this.config.evictionStrategy);\n    const candidates = policy.selectEvictionCandidates(this.entries, this.config, count);\n    \n    for (const key of candidates) {\n      const entry = this.entries.get(key);\n      if (entry) {\n        this.entries.delete(key);\n        this.emitEvent('eviction', key, entry.value, { \n          strategy: this.config.evictionStrategy \n        });\n      }\n    }\n  }\n\n  private async evictForMemory(requiredBytes: number): Promise<void> {\n    const currentMemory = this.memoryUsage();\n    const targetMemory = this.config.maxMemoryBytes - requiredBytes;\n    \n    if (currentMemory <= targetMemory) return;\n    \n    const bytesToEvict = currentMemory - targetMemory;\n    let evictedBytes = 0;\n    let evictedCount = 0;\n    \n    const policy = EvictionPolicyFactory.getPolicy(this.config.evictionStrategy);\n    \n    while (evictedBytes < bytesToEvict && this.entries.size > 0) {\n      const candidates = policy.selectEvictionCandidates(this.entries, this.config, 1);\n      if (candidates.length === 0) break;\n      \n      const key = candidates[0];\n      const entry = this.entries.get(key);\n      if (entry) {\n        evictedBytes += entry.sizeBytes;\n        evictedCount++;\n        this.entries.delete(key);\n        this.emitEvent('eviction', key, entry.value, { \n          strategy: this.config.evictionStrategy,\n          reason: 'memory-pressure',\n          memoryBefore: currentMemory,\n          memoryAfter: currentMemory - evictedBytes\n        });\n      }\n    }\n    \n    if (evictedBytes < bytesToEvict) {\n      this.emitEvent('memory-pressure', undefined, undefined, {\n        reason: 'Unable to free sufficient memory'\n      });\n    }\n  }\n\n  private estimateSize(value: T): number {\n    // Simple size estimation - could be improved with more sophisticated analysis\n    const str = JSON.stringify(value);\n    return str.length * 2; // Rough estimate for UTF-16 encoding\n  }\n\n  private emitEvent(type: CacheEventType, key?: string, value?: T, metadata?: any): void {\n    const event: CacheEvent<T> = {\n      type,\n      key,\n      value,\n      timestamp: Date.now(),\n      metadata\n    };\n    \n    // Record in metrics\n    this.metrics.recordEvent(event);\n    \n    // Notify listeners\n    const typeListeners = this.listeners.get(type);\n    if (typeListeners) {\n      for (const listener of typeListeners) {\n        try {\n          listener(event);\n        } catch (error) {\n          console.warn('Cache event listener error:', error);\n        }\n      }\n    }\n  }\n\n  private updateMetrics(): void {\n    const size = this.entries.size;\n    const memory = this.memoryUsage();\n    this.metrics.updateCacheInfo(size, memory, this.config.maxMemoryBytes);\n  }\n\n  private startCleanupTimer(): void {\n    this.cleanupTimer = setInterval(async () => {\n      try {\n        await this.cleanup();\n      } catch (error) {\n        console.warn('Cache cleanup error:', error);\n      }\n    }, this.config.cleanupInterval);\n  }\n\n  private startMetricsTimer(): void {\n    this.metricsTimer = setInterval(() => {\n      this.metrics.takeSnapshot();\n      this.emitEvent('stats-update');\n    }, this.config.metricsInterval);\n  }\n}\n\n/**\n * Simple async mutex for thread safety\n */\nclass AsyncMutex {\n  private locked = false;\n  private queue: Array<() => void> = [];\n\n  async runExclusive<R>(fn: () => R | Promise<R>): Promise<R> {\n    return new Promise((resolve, reject) => {\n      const run = async () => {\n        this.locked = true;\n        try {\n          const result = await fn();\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        } finally {\n          this.locked = false;\n          const next = this.queue.shift();\n          if (next) {\n            next();\n          }\n        }\n      };\n\n      if (this.locked) {\n        this.queue.push(run);\n      } else {\n        run();\n      }\n    });\n  }\n}\n\n/**\n * Cache factory for creating configured cache instances\n */\nexport class CacheFactory {\n  private static presets: Record<string, Partial<AdvancedCacheConfig>> = {\n    'small': {\n      maxSize: 100,\n      maxMemoryBytes: 10 * 1024 * 1024, // 10MB\n      defaultTtl: 1800000, // 30 minutes\n      evictionStrategy: 'lru'\n    },\n    'medium': {\n      maxSize: 1000,\n      maxMemoryBytes: 50 * 1024 * 1024, // 50MB\n      defaultTtl: 3600000, // 1 hour\n      evictionStrategy: 'lru'\n    },\n    'large': {\n      maxSize: 10000,\n      maxMemoryBytes: 200 * 1024 * 1024, // 200MB\n      defaultTtl: 7200000, // 2 hours\n      evictionStrategy: 'lfu'\n    },\n    'memory-optimized': {\n      maxSize: 500,\n      maxMemoryBytes: 25 * 1024 * 1024, // 25MB\n      defaultTtl: 1800000, // 30 minutes\n      evictionStrategy: 'lfu',\n      autoCleanup: true,\n      cleanupInterval: 60000 // 1 minute\n    },\n    'performance-optimized': {\n      maxSize: 5000,\n      maxMemoryBytes: 100 * 1024 * 1024, // 100MB\n      defaultTtl: 3600000, // 1 hour\n      evictionStrategy: 'lru',\n      threadSafe: false, // Better performance but not thread-safe\n      enableMetrics: false // Better performance\n    }\n  };\n\n  /**\n   * Create cache with preset configuration\n   */\n  static create<T = any>(preset: keyof typeof CacheFactory.presets): AdvancedCache<T>;\n  static create<T = any>(config: Partial<AdvancedCacheConfig>): AdvancedCache<T>;\n  static create<T = any>(configOrPreset: keyof typeof CacheFactory.presets | Partial<AdvancedCacheConfig>): AdvancedCache<T> {\n    if (typeof configOrPreset === 'string') {\n      const presetConfig = this.presets[configOrPreset];\n      if (!presetConfig) {\n        throw new Error(`Unknown cache preset: ${configOrPreset}`);\n      }\n      return new AdvancedCache<T>(presetConfig);\n    } else {\n      return new AdvancedCache<T>(configOrPreset);\n    }\n  }\n\n  /**\n   * Register custom preset\n   */\n  static registerPreset(name: string, config: Partial<AdvancedCacheConfig>): void {\n    this.presets[name] = config;\n  }\n\n  /**\n   * Get available presets\n   */\n  static getPresets(): string[] {\n    return Object.keys(this.presets);\n  }\n}\n","/**\n * @fileoverview Type definitions for the CREB Validation Pipeline\n * \n * Provides comprehensive type definitions for:\n * - Validation results and errors\n * - Validator interfaces and compositions\n * - Rule definitions and dependencies\n * - Performance metrics and caching\n * - Chemical-specific validation types\n * \n * @version 1.0.0\n * @author CREB Team\n */\n\nimport { CREBError } from '../../core/errors/CREBError';\n\n// ============================================================================\n// Core Validation Types\n// ============================================================================\n\n/**\n * Severity levels for validation errors\n */\nexport enum ValidationSeverity {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n  CRITICAL = 'critical'\n}\n\n/**\n * Validation error with context and suggested fixes\n */\nexport interface ValidationError {\n  /** Error code for programmatic handling */\n  code: string;\n  /** Human-readable error message */\n  message: string;\n  /** Path to the invalid field/property */\n  path: string[];\n  /** Severity level of the error */\n  severity: ValidationSeverity;\n  /** Suggested fixes or corrections */\n  suggestions: string[];\n  /** Additional context data */\n  context?: Record<string, any>;\n  /** Original invalid value */\n  value?: any;\n}\n\n/**\n * Result of a validation operation\n */\nexport interface ValidationResult {\n  /** Whether validation passed */\n  isValid: boolean;\n  /** List of validation errors */\n  errors: ValidationError[];\n  /** Warnings that don't prevent validation */\n  warnings: ValidationError[];\n  /** Performance metrics */\n  metrics: ValidationMetrics;\n  /** Cached result indicator */\n  fromCache?: boolean;\n  /** Validation timestamp */\n  timestamp: Date;\n}\n\n/**\n * Performance metrics for validation operations\n */\nexport interface ValidationMetrics {\n  /** Total validation time in milliseconds */\n  duration: number;\n  /** Number of rules executed */\n  rulesExecuted: number;\n  /** Number of validators used */\n  validatorsUsed: number;\n  /** Cache hit/miss information */\n  cacheStats: {\n    hits: number;\n    misses: number;\n    hitRate: number;\n  };\n  /** Memory usage during validation */\n  memoryUsage?: number;\n}\n\n// ============================================================================\n// Validator Interfaces\n// ============================================================================\n\n/**\n * Configuration for a validator\n */\nexport interface ValidatorConfig {\n  /** Whether validator is enabled */\n  enabled: boolean;\n  /** Priority for execution order */\n  priority: number;\n  /** Timeout in milliseconds */\n  timeout?: number;\n  /** Whether to cache results */\n  cacheable: boolean;\n  /** Custom configuration options */\n  options?: Record<string, any>;\n}\n\n/**\n * Context passed to validators during execution\n */\nexport interface ValidationContext {\n  /** Path to current property being validated */\n  path: string[];\n  /** Root object being validated */\n  root: any;\n  /** Parent object of current property */\n  parent?: any;\n  /** Validation configuration */\n  config: ValidatorConfig;\n  /** Shared context data */\n  shared: Map<string, any>;\n  /** Performance tracker */\n  metrics: ValidationMetrics;\n}\n\n/**\n * Base validator interface\n */\nexport interface IValidator<T = any> {\n  /** Unique validator identifier */\n  readonly name: string;\n  /** Validator configuration */\n  readonly config: ValidatorConfig;\n  /** Dependencies on other validators */\n  readonly dependencies: string[];\n  \n  /**\n   * Validate a value\n   * @param value Value to validate\n   * @param context Validation context\n   * @returns Promise resolving to validation result\n   */\n  validate(value: T, context: ValidationContext): Promise<ValidationResult>;\n  \n  /**\n   * Check if validator can handle the given value type\n   * @param value Value to check\n   * @returns Whether validator can validate this value\n   */\n  canValidate(value: any): value is T;\n  \n  /**\n   * Get validation schema/metadata\n   * @returns Schema information\n   */\n  getSchema(): ValidationSchema;\n}\n\n/**\n * Composite validator that combines multiple validators\n */\nexport interface ICompositeValidator extends IValidator {\n  /** Child validators */\n  readonly validators: IValidator[];\n  \n  /**\n   * Add a validator to the composition\n   * @param validator Validator to add\n   */\n  addValidator(validator: IValidator): void;\n  \n  /**\n   * Remove a validator from the composition\n   * @param name Name of validator to remove\n   */\n  removeValidator(name: string): void;\n  \n  /**\n   * Get a specific validator by name\n   * @param name Validator name\n   */\n  getValidator(name: string): IValidator | undefined;\n}\n\n// ============================================================================\n// Rule System\n// ============================================================================\n\n/**\n * Validation rule definition\n */\nexport interface ValidationRule<T = any> {\n  /** Unique rule identifier */\n  name: string;\n  /** Human-readable description */\n  description: string;\n  /** Rule dependencies */\n  dependencies: string[];\n  /** Rule priority (higher = earlier execution) */\n  priority: number;\n  /** Whether rule can be cached */\n  cacheable: boolean;\n  \n  /**\n   * Execute the validation rule\n   * @param value Value to validate\n   * @param context Validation context\n   * @returns Promise resolving to rule result\n   */\n  execute(value: T, context: ValidationContext): Promise<RuleResult>;\n  \n  /**\n   * Check if rule applies to the given value\n   * @param value Value to check\n   * @returns Whether rule should be executed\n   */\n  appliesTo(value: any): boolean;\n}\n\n/**\n * Result of executing a validation rule\n */\nexport interface RuleResult {\n  /** Whether rule passed */\n  passed: boolean;\n  /** Error if rule failed */\n  error?: ValidationError;\n  /** Execution time in milliseconds */\n  duration: number;\n  /** Whether result was cached */\n  cached: boolean;\n  /** Additional metadata */\n  metadata?: Record<string, any>;\n}\n\n/**\n * Rule dependency graph node\n */\nexport interface RuleDependencyNode {\n  /** Rule name */\n  name: string;\n  /** Dependent rules */\n  dependencies: string[];\n  /** Rules that depend on this one */\n  dependents: string[];\n  /** Execution order */\n  order: number;\n}\n\n// ============================================================================\n// Chemical Validation Types\n// ============================================================================\n\n/**\n * Chemical formula validation configuration\n */\nexport interface ChemicalFormulaConfig {\n  /** Allow isotope notation (e.g., 13C) */\n  allowIsotopes: boolean;\n  /** Allow radical notation (e.g., •) */\n  allowRadicals: boolean;\n  /** Allow charge notation (e.g., +, -, 2+) */\n  allowCharges: boolean;\n  /** Allow complex notation (e.g., [Cu(NH3)4]2+) */\n  allowComplexes: boolean;\n  /** Maximum allowed atoms per formula */\n  maxAtoms: number;\n  /** Allowed elements (empty = all) */\n  allowedElements: string[];\n}\n\n/**\n * Thermodynamic property validation configuration\n */\nexport interface ThermodynamicConfig {\n  /** Temperature range in Kelvin */\n  temperatureRange: { min: number; max: number };\n  /** Pressure range in Pa */\n  pressureRange: { min: number; max: number };\n  /** Enthalpy range in kJ/mol */\n  enthalpyRange: { min: number; max: number };\n  /** Entropy range in J/(mol·K) */\n  entropyRange: { min: number; max: number };\n  /** Heat capacity range in J/(mol·K) */\n  heatCapacityRange: { min: number; max: number };\n}\n\n/**\n * Safety data validation configuration\n */\nexport interface SafetyDataConfig {\n  /** Required safety properties */\n  requiredProperties: string[];\n  /** GHS classification validation */\n  validateGHS: boolean;\n  /** UN number validation */\n  validateUN: boolean;\n  /** Flash point validation */\n  validateFlashPoint: boolean;\n  /** Autoignition temperature validation */\n  validateAutoignition: boolean;\n}\n\n/**\n * Chemical compound data for validation\n */\nexport interface ChemicalCompound {\n  /** Chemical formula */\n  formula: string;\n  /** IUPAC name */\n  name?: string;\n  /** CAS registry number */\n  cas?: string;\n  /** SMILES notation */\n  smiles?: string;\n  /** InChI identifier */\n  inchi?: string;\n  /** Molecular weight in g/mol */\n  molecularWeight?: number;\n  /** Thermodynamic properties */\n  thermodynamics?: ThermodynamicProperties;\n  /** Safety data */\n  safety?: SafetyData;\n}\n\n/**\n * Thermodynamic properties\n */\nexport interface ThermodynamicProperties {\n  /** Standard enthalpy of formation (kJ/mol) */\n  enthalpyFormation?: number;\n  /** Standard entropy (J/(mol·K)) */\n  entropy?: number;\n  /** Heat capacity at constant pressure (J/(mol·K)) */\n  heatCapacity?: number;\n  /** Standard Gibbs free energy (kJ/mol) */\n  gibbsEnergy?: number;\n  /** Melting point (K) */\n  meltingPoint?: number;\n  /** Boiling point (K) */\n  boilingPoint?: number;\n  /** Density (g/cm³) */\n  density?: number;\n}\n\n/**\n * Safety data\n */\nexport interface SafetyData {\n  /** GHS hazard classifications */\n  ghsClassifications?: string[];\n  /** Hazard statements */\n  hazardStatements?: string[];\n  /** Precautionary statements */\n  precautionaryStatements?: string[];\n  /** UN number */\n  unNumber?: string;\n  /** Flash point (°C) */\n  flashPoint?: number;\n  /** Autoignition temperature (°C) */\n  autoignitionTemperature?: number;\n  /** Vapor pressure (Pa) */\n  vaporPressure?: number;\n  /** Water solubility (g/L) */\n  waterSolubility?: number;\n}\n\n// ============================================================================\n// Pipeline Configuration\n// ============================================================================\n\n/**\n * Validation pipeline configuration\n */\nexport interface ValidationPipelineConfig {\n  /** Maximum validation time in milliseconds */\n  timeout: number;\n  /** Whether to enable caching */\n  enableCaching: boolean;\n  /** Cache TTL in milliseconds */\n  cacheTTL: number;\n  /** Maximum cache size */\n  maxCacheSize: number;\n  /** Whether to continue on errors */\n  continueOnError: boolean;\n  /** Parallel execution settings */\n  parallel: {\n    enabled: boolean;\n    maxConcurrency: number;\n  };\n  /** Performance monitoring settings */\n  monitoring: {\n    enabled: boolean;\n    sampleRate: number;\n  };\n}\n\n/**\n * Validation schema definition\n */\nexport interface ValidationSchema {\n  /** Schema name */\n  name: string;\n  /** Schema version */\n  version: string;\n  /** Schema description */\n  description: string;\n  /** Supported data types */\n  types: string[];\n  /** Required validators */\n  requiredValidators: string[];\n  /** Optional validators */\n  optionalValidators: string[];\n  /** Custom properties */\n  properties: Record<string, any>;\n}\n\n// ============================================================================\n// Cache Types\n// ============================================================================\n\n/**\n * Cache key for validation results\n */\nexport interface ValidationCacheKey {\n  /** Validator name */\n  validator: string;\n  /** Value hash */\n  valueHash: string;\n  /** Config hash */\n  configHash: string;\n  /** Schema version */\n  schemaVersion: string;\n}\n\n/**\n * Cached validation result\n */\nexport interface CachedValidationResult {\n  /** Validation result */\n  result: ValidationResult;\n  /** Cache creation timestamp */\n  createdAt: Date;\n  /** Cache expiration timestamp */\n  expiresAt: Date;\n  /** Number of cache hits */\n  hitCount: number;\n}\n\n// ============================================================================\n// Event Types\n// ============================================================================\n\n/**\n * Validation pipeline events\n */\nexport interface ValidationEvents {\n  'validation:started': { target: any; validators: string[] };\n  'validation:completed': { result: ValidationResult };\n  'validation:error': { error: CREBError };\n  'validator:executed': { validator: string; result: ValidationResult };\n  'rule:executed': { rule: string; result: RuleResult };\n  'cache:hit': { key: ValidationCacheKey };\n  'cache:miss': { key: ValidationCacheKey };\n  'performance:threshold': { metric: string; value: number; threshold: number };\n}\n\n// ============================================================================\n// Utility Types\n// ============================================================================\n\n/**\n * Validation builder for fluent API\n */\nexport interface ValidationBuilder<T> {\n  /** Add a validator */\n  addValidator(validator: IValidator<T>): ValidationBuilder<T>;\n  /** Add a rule */\n  addRule(rule: ValidationRule<T>): ValidationBuilder<T>;\n  /** Set configuration */\n  withConfig(config: Partial<ValidationPipelineConfig>): ValidationBuilder<T>;\n  /** Build the validator */\n  build(): IValidator<T>;\n}\n\n/**\n * Validator factory function type\n */\nexport type ValidatorFactory<T = any> = (config?: any) => IValidator<T>;\n\n/**\n * Rule factory function type\n */\nexport type RuleFactory<T = any> = (config?: any) => ValidationRule<T>;\n\n// ============================================================================\n// Type Guards\n// ============================================================================\n\n/**\n * Type guard for validation results\n */\nexport function isValidationResult(obj: any): obj is ValidationResult {\n  return obj && \n    typeof obj.isValid === 'boolean' &&\n    Array.isArray(obj.errors) &&\n    Array.isArray(obj.warnings) &&\n    obj.metrics &&\n    obj.timestamp instanceof Date;\n}\n\n/**\n * Type guard for validation errors\n */\nexport function isValidationError(obj: any): obj is ValidationError {\n  return obj &&\n    typeof obj.code === 'string' &&\n    typeof obj.message === 'string' &&\n    Array.isArray(obj.path) &&\n    Object.values(ValidationSeverity).includes(obj.severity) &&\n    Array.isArray(obj.suggestions);\n}\n\n/**\n * Type guard for validators\n */\nexport function isValidator(obj: any): obj is IValidator {\n  return obj &&\n    typeof obj.name === 'string' &&\n    obj.config &&\n    Array.isArray(obj.dependencies) &&\n    typeof obj.validate === 'function' &&\n    typeof obj.canValidate === 'function' &&\n    typeof obj.getSchema === 'function';\n}\n\n/**\n * Type guard for validation rules\n */\nexport function isValidationRule(obj: any): obj is ValidationRule {\n  return obj &&\n    typeof obj.name === 'string' &&\n    typeof obj.description === 'string' &&\n    Array.isArray(obj.dependencies) &&\n    typeof obj.priority === 'number' &&\n    typeof obj.execute === 'function' &&\n    typeof obj.appliesTo === 'function';\n}\n","/**\n * @fileoverview ValidationPipeline - Core validation orchestration system\n * \n * The ValidationPipeline provides a comprehensive data validation framework with:\n * - Validator composition and dependency management\n * - Async validation support with timeout handling\n * - Rule dependency resolution and execution ordering\n * - Performance optimization with caching and parallelization\n * - Chemical-specific validation capabilities\n * - Extensible architecture for custom validators and rules\n * \n * @version 1.0.0\n * @author CREB Team\n */\n\nimport { EventEmitter } from 'events';\nimport {\n  IValidator,\n  ValidationResult,\n  ValidationError,\n  ValidationContext,\n  ValidationPipelineConfig,\n  ValidationRule,\n  RuleResult,\n  RuleDependencyNode,\n  ValidationMetrics,\n  ValidationCacheKey,\n  CachedValidationResult,\n  ValidationSeverity,\n  isValidator,\n  isValidationRule\n} from './types';\nimport { CREBError, ValidationError as CREBValidationError } from '../../core/errors/CREBError';\nimport { AdvancedCache } from '../../performance/cache/AdvancedCache';\n\n/**\n * Core validation pipeline for orchestrating complex validation workflows\n */\nexport class ValidationPipeline extends EventEmitter {\n  private readonly validators = new Map<string, IValidator>();\n  private readonly rules = new Map<string, ValidationRule>();\n  private readonly dependencyGraph = new Map<string, RuleDependencyNode>();\n  private readonly cache: AdvancedCache<CachedValidationResult>;\n  private readonly config: ValidationPipelineConfig;\n  private readonly performanceMetrics = new Map<string, number[]>();\n\n  constructor(config: Partial<ValidationPipelineConfig> = {}) {\n    super();\n    \n    this.config = {\n      timeout: 5000,\n      enableCaching: true,\n      cacheTTL: 300000, // 5 minutes\n      maxCacheSize: 1000,\n      continueOnError: true,\n      parallel: {\n        enabled: true,\n        maxConcurrency: 4\n      },\n      monitoring: {\n        enabled: true,\n        sampleRate: 0.1\n      },\n      ...config\n    };\n\n    this.cache = new AdvancedCache({\n      maxSize: this.config.maxCacheSize,\n      defaultTtl: this.config.cacheTTL,\n      evictionStrategy: 'lru'\n    });\n\n    this.setupErrorHandling();\n  }\n\n  // ============================================================================\n  // Validator Management\n  // ============================================================================\n\n  /**\n   * Register a validator with the pipeline\n   * @param validator Validator to register\n   */\n  addValidator(validator: IValidator): void {\n    if (!isValidator(validator)) {\n      throw new CREBValidationError(\n        'Invalid validator provided',\n        { \n          validator: (validator as any)?.name || 'unknown',\n          errorCode: 'VALIDATION_INVALID_VALIDATOR'\n        }\n      );\n    }\n\n    if (this.validators.has(validator.name)) {\n      throw new CREBValidationError(\n        `Validator '${validator.name}' already registered`,\n        { \n          validator: validator.name,\n          errorCode: 'VALIDATION_DUPLICATE_VALIDATOR'\n        }\n      );\n    }\n\n    this.validators.set(validator.name, validator);\n    this.validateDependencies(validator);\n    \n    this.emit('validator:registered', { name: validator.name });\n  }\n\n  /**\n   * Remove a validator from the pipeline\n   * @param name Name of validator to remove\n   */\n  removeValidator(name: string): boolean {\n    const removed = this.validators.delete(name);\n    if (removed) {\n      this.emit('validator:unregistered', { name });\n    }\n    return removed;\n  }\n\n  /**\n   * Get a registered validator\n   * @param name Validator name\n   */\n  getValidator(name: string): IValidator | undefined {\n    return this.validators.get(name);\n  }\n\n  /**\n   * Get all registered validators\n   */\n  getValidators(): IValidator[] {\n    return Array.from(this.validators.values());\n  }\n\n  // ============================================================================\n  // Rule Management\n  // ============================================================================\n\n  /**\n   * Register a validation rule\n   * @param rule Rule to register\n   */\n  addRule(rule: ValidationRule): void {\n    if (!isValidationRule(rule)) {\n      throw new CREBValidationError(\n        'Invalid validation rule provided',\n        { \n          rule: (rule as any)?.name || 'unknown',\n          errorCode: 'VALIDATION_INVALID_RULE'\n        }\n      );\n    }\n\n    if (this.rules.has(rule.name)) {\n      throw new CREBValidationError(\n        `Rule '${rule.name}' already registered`,\n        { \n          rule: rule.name,\n          errorCode: 'VALIDATION_DUPLICATE_RULE'\n        }\n      );\n    }\n\n    this.rules.set(rule.name, rule);\n    this.updateDependencyGraph(rule);\n    \n    this.emit('rule:registered', { name: rule.name });\n  }\n\n  /**\n   * Remove a validation rule\n   * @param name Name of rule to remove\n   */\n  removeRule(name: string): boolean {\n    const removed = this.rules.delete(name);\n    if (removed) {\n      this.dependencyGraph.delete(name);\n      this.emit('rule:unregistered', { name });\n    }\n    return removed;\n  }\n\n  /**\n   * Get a registered rule\n   * @param name Rule name\n   */\n  getRule(name: string): ValidationRule | undefined {\n    return this.rules.get(name);\n  }\n\n  /**\n   * Get all registered rules\n   */\n  getRules(): ValidationRule[] {\n    return Array.from(this.rules.values());\n  }\n\n  // ============================================================================\n  // Core Validation\n  // ============================================================================\n\n  /**\n   * Validate a value using all applicable validators and rules\n   * @param value Value to validate\n   * @param validatorNames Specific validators to use (optional)\n   * @returns Promise resolving to validation result\n   */\n  async validate<T = any>(\n    value: T,\n    validatorNames?: string[]\n  ): Promise<ValidationResult> {\n    const startTime = Date.now();\n    const context = this.createValidationContext([], value, value);\n    \n    try {\n      this.emit('validation:started', { \n        target: value, \n        validators: validatorNames || Array.from(this.validators.keys()) \n      });\n\n      // Determine which validators to use\n      const applicableValidators = this.getApplicableValidators(value, validatorNames);\n      \n      if (applicableValidators.length === 0) {\n        // Handle edge cases where no validators are applicable\n        if (value === null || value === undefined || value === '') {\n          return this.createFailureResult(\n            context,\n            startTime,\n            [this.createError(\n              'NO_VALIDATORS_APPLICABLE',\n              `Invalid input: ${value === null ? 'null' : value === undefined ? 'undefined' : 'empty string'}`,\n              [],\n              ValidationSeverity.ERROR,\n              ['Provide a valid input value'],\n              { value },\n              value\n            )]\n          );\n        }\n        return this.createSuccessResult(context, startTime);\n      }\n\n      // Execute validators\n      const validatorResults = await this.executeValidators(\n        value,\n        applicableValidators,\n        context\n      );\n\n      // Execute applicable rules\n      const ruleResults = await this.executeRules(value, context);\n\n      // Combine results\n      const result = this.combineResults(\n        validatorResults,\n        ruleResults,\n        context,\n        startTime\n      );\n\n      this.emit('validation:completed', { result });\n      this.recordPerformanceMetrics(result);\n\n      return result;\n\n    } catch (error) {\n      const validationError = error instanceof CREBError ? error : \n        new CREBValidationError(\n          'Validation pipeline failed',\n          { \n            originalError: error,\n            errorCode: 'VALIDATION_PIPELINE_ERROR'\n          }\n        );\n      \n      this.emit('validation:error', { error: validationError });\n      throw validationError;\n    }\n  }\n\n  /**\n   * Validate multiple values in parallel\n   * @param values Values to validate\n   * @param validatorNames Specific validators to use (optional)\n   * @returns Promise resolving to array of validation results\n   */\n  async validateBatch<T = any>(\n    values: T[],\n    validatorNames?: string[]\n  ): Promise<ValidationResult[]> {\n    if (!this.config.parallel.enabled) {\n      // Sequential validation\n      const results: ValidationResult[] = [];\n      for (const value of values) {\n        results.push(await this.validate(value, validatorNames));\n      }\n      return results;\n    }\n\n    // Parallel validation with concurrency limit\n    const results: ValidationResult[] = [];\n    const concurrency = Math.min(this.config.parallel.maxConcurrency, values.length);\n    \n    for (let i = 0; i < values.length; i += concurrency) {\n      const batch = values.slice(i, i + concurrency);\n      const batchPromises = batch.map(value => this.validate(value, validatorNames));\n      const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults);\n    }\n\n    return results;\n  }\n\n  // ============================================================================\n  // Private Methods - Validator Execution\n  // ============================================================================\n\n  private getApplicableValidators(\n    value: any,\n    validatorNames?: string[]\n  ): IValidator[] {\n    const validators = validatorNames\n      ? validatorNames.map(name => this.validators.get(name)).filter(Boolean) as IValidator[]\n      : Array.from(this.validators.values());\n\n    return validators.filter(validator => validator.canValidate(value));\n  }\n\n  private async executeValidators(\n    value: any,\n    validators: IValidator[],\n    context: ValidationContext\n  ): Promise<ValidationResult[]> {\n    const results: ValidationResult[] = [];\n\n    for (const validator of validators) {\n      try {\n        // Check cache first\n        const cacheKey = this.createCacheKey(validator, value);\n        const cachedResult = await this.getCachedResult(cacheKey);\n        \n        if (cachedResult) {\n          this.emit('cache:hit', { key: cacheKey });\n          results.push(cachedResult.result);\n          continue;\n        }\n\n        this.emit('cache:miss', { key: cacheKey });\n\n        // Execute validator with timeout\n        const result = await this.executeWithTimeout(\n          () => validator.validate(value, context),\n          this.config.timeout,\n          `Validator '${validator.name}' timed out`\n        );\n\n        // Cache result if cacheable\n        if (validator.config.cacheable && this.config.enableCaching) {\n          await this.cacheResult(cacheKey, result);\n        }\n\n        results.push(result);\n        this.emit('validator:executed', { validator: validator.name, result });\n\n      } catch (error) {\n        if (!this.config.continueOnError) {\n          throw error;\n        }\n\n        // Create error result\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        const errorResult: ValidationResult = {\n          isValid: false,\n          errors: [{\n            code: 'VALIDATOR_EXECUTION_ERROR',\n            message: `Validator '${validator.name}' failed: ${errorMessage}`,\n            path: context.path,\n            severity: ValidationSeverity.ERROR,\n            suggestions: ['Check validator configuration', 'Verify input data format'],\n            context: { validator: validator.name, error: errorMessage }\n          }],\n          warnings: [],\n          metrics: context.metrics,\n          timestamp: new Date()\n        };\n\n        results.push(errorResult);\n      }\n    }\n\n    return results;\n  }\n\n  // ============================================================================\n  // Private Methods - Rule Execution\n  // ============================================================================\n\n  private async executeRules(\n    value: any,\n    context: ValidationContext\n  ): Promise<RuleResult[]> {\n    // Get applicable rules\n    const applicableRules = Array.from(this.rules.values())\n      .filter(rule => rule.appliesTo(value));\n\n    if (applicableRules.length === 0) {\n      return [];\n    }\n\n    // Sort rules by dependency order\n    const sortedRules = this.sortRulesByDependencies(applicableRules);\n    const results: RuleResult[] = [];\n\n    for (const rule of sortedRules) {\n      try {\n        const ruleStartTime = Date.now();\n        \n        // Check cache for rule result\n        const cacheKey = this.createRuleCacheKey(rule, value);\n        const cachedRuleResult = await this.getCachedRuleResult(cacheKey);\n        \n        if (cachedRuleResult) {\n          results.push(cachedRuleResult);\n          continue;\n        }\n\n        // Execute rule\n        const result = await this.executeWithTimeout(\n          () => rule.execute(value, context),\n          this.config.timeout,\n          `Rule '${rule.name}' timed out`\n        );\n\n        result.duration = Date.now() - ruleStartTime;\n        result.cached = false;\n\n        // Cache result if cacheable\n        if (rule.cacheable && this.config.enableCaching) {\n          await this.cacheRuleResult(cacheKey, result);\n        }\n\n        results.push(result);\n        this.emit('rule:executed', { rule: rule.name, result });\n\n      } catch (error) {\n        if (!this.config.continueOnError) {\n          throw error;\n        }\n\n        // Create error result\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        const errorResult: RuleResult = {\n          passed: false,\n          error: {\n            code: 'RULE_EXECUTION_ERROR',\n            message: `Rule '${rule.name}' failed: ${errorMessage}`,\n            path: context.path,\n            severity: ValidationSeverity.ERROR,\n            suggestions: ['Check rule configuration', 'Verify input data'],\n            context: { rule: rule.name, error: errorMessage }\n          },\n          duration: 0,\n          cached: false\n        };\n\n        results.push(errorResult);\n      }\n    }\n\n    return results;\n  }\n\n  // ============================================================================\n  // Private Methods - Dependency Management\n  // ============================================================================\n\n  private validateDependencies(validator: IValidator): void {\n    for (const dependency of validator.dependencies) {\n      if (!this.validators.has(dependency)) {\n        throw new CREBValidationError(\n          `Validator '${validator.name}' depends on '${dependency}' which is not registered`,\n          { \n            validator: validator.name, \n            dependency,\n            errorCode: 'VALIDATION_MISSING_DEPENDENCY'\n          }\n        );\n      }\n    }\n  }\n\n  private updateDependencyGraph(rule: ValidationRule): void {\n    const node: RuleDependencyNode = {\n      name: rule.name,\n      dependencies: [...rule.dependencies],\n      dependents: [],\n      order: 0\n    };\n\n    this.dependencyGraph.set(rule.name, node);\n    this.recomputeDependencyOrder();\n  }\n\n  private recomputeDependencyOrder(): void {\n    const visited = new Set<string>();\n    const visiting = new Set<string>();\n    const sorted: string[] = [];\n\n    const visit = (ruleName: string): void => {\n      if (visiting.has(ruleName)) {\n        throw new CREBValidationError(\n          `Circular dependency detected involving rule '${ruleName}'`,\n          { \n            rule: ruleName,\n            errorCode: 'VALIDATION_CIRCULAR_DEPENDENCY'\n          }\n        );\n      }\n\n      if (visited.has(ruleName)) {\n        return;\n      }\n\n      visiting.add(ruleName);\n      const node = this.dependencyGraph.get(ruleName);\n      \n      if (node) {\n        for (const dependency of node.dependencies) {\n          visit(dependency);\n        }\n      }\n\n      visiting.delete(ruleName);\n      visited.add(ruleName);\n      sorted.push(ruleName);\n    };\n\n    for (const ruleName of this.dependencyGraph.keys()) {\n      if (!visited.has(ruleName)) {\n        visit(ruleName);\n      }\n    }\n\n    // Update execution order\n    sorted.forEach((ruleName, index) => {\n      const node = this.dependencyGraph.get(ruleName);\n      if (node) {\n        node.order = index;\n      }\n    });\n  }\n\n  private sortRulesByDependencies(rules: ValidationRule[]): ValidationRule[] {\n    return rules.sort((a, b) => {\n      const nodeA = this.dependencyGraph.get(a.name);\n      const nodeB = this.dependencyGraph.get(b.name);\n      \n      if (!nodeA || !nodeB) {\n        return a.priority - b.priority;\n      }\n      \n      // First sort by dependency order, then by priority\n      const orderDiff = nodeA.order - nodeB.order;\n      return orderDiff !== 0 ? orderDiff : b.priority - a.priority;\n    });\n  }\n\n  // ============================================================================\n  // Private Methods - Caching\n  // ============================================================================\n\n  private createCacheKey(validator: IValidator, value: any): ValidationCacheKey {\n    return {\n      validator: validator.name,\n      valueHash: this.hashValue(value),\n      configHash: this.hashValue(validator.config),\n      schemaVersion: validator.getSchema().version\n    };\n  }\n\n  private createRuleCacheKey(rule: ValidationRule, value: any): string {\n    return `rule:${rule.name}:${this.hashValue(value)}`;\n  }\n\n  private async getCachedResult(key: ValidationCacheKey): Promise<CachedValidationResult | null> {\n    if (!this.config.enableCaching) {\n      return null;\n    }\n\n    const cacheKeyString = JSON.stringify(key);\n    const cached = await this.cache.get(cacheKeyString);\n    \n    if (cached.success && cached.value && cached.value.expiresAt > new Date()) {\n      cached.value.hitCount++;\n      cached.value.result.fromCache = true;\n      return cached.value;\n    }\n\n    return null;\n  }\n\n  private async getCachedRuleResult(key: string): Promise<RuleResult | null> {\n    if (!this.config.enableCaching) {\n      return null;\n    }\n\n    const cached = await this.cache.get(key);\n    \n    if (cached.success && cached.value && cached.value.expiresAt > new Date()) {\n      // For rules, we need to extract the RuleResult from ValidationResult\n      return {\n        passed: cached.value.result.isValid,\n        error: cached.value.result.errors[0],\n        duration: cached.value.result.metrics.duration,\n        cached: true\n      };\n    }\n\n    return null;\n  }\n\n  private async cacheResult(key: ValidationCacheKey, result: ValidationResult): Promise<void> {\n    const cacheKeyString = JSON.stringify(key);\n    const cached: CachedValidationResult = {\n      result,\n      createdAt: new Date(),\n      expiresAt: new Date(Date.now() + this.config.cacheTTL),\n      hitCount: 0\n    };\n\n    await this.cache.set(cacheKeyString, cached);\n  }\n\n  private async cacheRuleResult(key: string, result: RuleResult): Promise<void> {\n    // Convert RuleResult to ValidationResult format for caching\n    const validationResult: ValidationResult = {\n      isValid: result.passed,\n      errors: result.error ? [result.error] : [],\n      warnings: [],\n      metrics: {\n        duration: result.duration,\n        rulesExecuted: 1,\n        validatorsUsed: 0,\n        cacheStats: { hits: 0, misses: 0, hitRate: 0 }\n      },\n      timestamp: new Date()\n    };\n\n    const cached: CachedValidationResult = {\n      result: validationResult,\n      createdAt: new Date(),\n      expiresAt: new Date(Date.now() + this.config.cacheTTL),\n      hitCount: 0\n    };\n\n    await this.cache.set(key, cached);\n  }\n\n  // ============================================================================\n  // Private Methods - Utilities\n  // ============================================================================\n\n  private createValidationContext(\n    path: string[],\n    value: any,\n    root: any,\n    parent?: any\n  ): ValidationContext {\n    return {\n      path,\n      root,\n      parent,\n      config: {\n        enabled: true,\n        priority: 0,\n        cacheable: true\n      },\n      shared: new Map(),\n      metrics: {\n        duration: 0,\n        rulesExecuted: 0,\n        validatorsUsed: 0,\n        cacheStats: { hits: 0, misses: 0, hitRate: 0 }\n      }\n    };\n  }\n\n  private combineResults(\n    validatorResults: ValidationResult[],\n    ruleResults: RuleResult[],\n    context: ValidationContext,\n    startTime: number\n  ): ValidationResult {\n    const allErrors: ValidationError[] = [];\n    const allWarnings: ValidationError[] = [];\n    let totalRulesExecuted = 0;\n    let totalCacheHits = 0;\n    let totalCacheMisses = 0;\n\n    // Collect validator results\n    for (const result of validatorResults) {\n      allErrors.push(...result.errors);\n      allWarnings.push(...result.warnings);\n      totalRulesExecuted += result.metrics.rulesExecuted;\n      totalCacheHits += result.metrics.cacheStats.hits;\n      totalCacheMisses += result.metrics.cacheStats.misses;\n    }\n\n    // Collect rule results\n    for (const result of ruleResults) {\n      if (!result.passed && result.error) {\n        allErrors.push(result.error);\n      }\n      totalRulesExecuted++;\n      if (result.cached) {\n        totalCacheHits++;\n      } else {\n        totalCacheMisses++;\n      }\n    }\n\n    const totalCache = totalCacheHits + totalCacheMisses;\n    const metrics: ValidationMetrics = {\n      duration: Date.now() - startTime,\n      rulesExecuted: totalRulesExecuted,\n      validatorsUsed: validatorResults.length,\n      cacheStats: {\n        hits: totalCacheHits,\n        misses: totalCacheMisses,\n        hitRate: totalCache > 0 ? totalCacheHits / totalCache : 0\n      }\n    };\n\n    return {\n      isValid: allErrors.length === 0,\n      errors: allErrors,\n      warnings: allWarnings,\n      metrics,\n      timestamp: new Date()\n    };\n  }\n\n  private createSuccessResult(\n    context: ValidationContext,\n    startTime: number\n  ): ValidationResult {\n    return {\n      isValid: true,\n      errors: [],\n      warnings: [],\n      metrics: {\n        duration: Date.now() - startTime,\n        rulesExecuted: 0,\n        validatorsUsed: 0,\n        cacheStats: { hits: 0, misses: 0, hitRate: 0 }\n      },\n      timestamp: new Date()\n    };\n  }\n\n  private async executeWithTimeout<T>(\n    operation: () => Promise<T>,\n    timeout: number,\n    timeoutMessage: string\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(new CREBValidationError(\n          timeoutMessage,\n          { \n            timeout,\n            errorCode: 'VALIDATION_TIMEOUT'\n          }\n        ));\n      }, timeout);\n\n      operation()\n        .then(result => {\n          clearTimeout(timer);\n          resolve(result);\n        })\n        .catch(error => {\n          clearTimeout(timer);\n          reject(error);\n        });\n    });\n  }\n\n  private hashValue(value: any): string {\n    // Simple hash function for caching\n    return btoa(JSON.stringify(value, null, 0))\n      .replace(/[+/=]/g, '')\n      .substring(0, 16);\n  }\n\n  private recordPerformanceMetrics(result: ValidationResult): void {\n    if (!this.config.monitoring.enabled) {\n      return;\n    }\n\n    if (Math.random() > this.config.monitoring.sampleRate) {\n      return;\n    }\n\n    // Record duration metrics\n    const durations = this.performanceMetrics.get('duration') || [];\n    durations.push(result.metrics.duration);\n    if (durations.length > 1000) {\n      durations.shift(); // Keep only last 1000 measurements\n    }\n    this.performanceMetrics.set('duration', durations);\n\n    // Check performance thresholds\n    const avgDuration = durations.reduce((a, b) => a + b, 0) / durations.length;\n    if (avgDuration > 1000) { // 1 second threshold\n      this.emit('performance:threshold', {\n        metric: 'duration',\n        value: avgDuration,\n        threshold: 1000\n      });\n    }\n  }\n\n  private setupErrorHandling(): void {\n    this.on('error', (error) => {\n      console.error('ValidationPipeline error:', error);\n    });\n  }\n\n  // ============================================================================\n  // Public Utility Methods\n  // ============================================================================\n\n  /**\n   * Get pipeline statistics\n   */\n  getStats(): {\n    validators: number;\n    rules: number;\n    cacheSize: number;\n    cacheHitRate: number;\n    avgDuration: number;\n  } {\n    const durations = this.performanceMetrics.get('duration') || [];\n    const avgDuration = durations.length > 0 \n      ? durations.reduce((a, b) => a + b, 0) / durations.length \n      : 0;\n\n    return {\n      validators: this.validators.size,\n      rules: this.rules.size,\n      cacheSize: this.cache.size(),\n      cacheHitRate: this.cache.getStats().hitRate,\n      avgDuration\n    };\n  }\n\n  /**\n   * Clear all caches\n   */\n  async clearCache(): Promise<void> {\n    await this.cache.clear();\n  }\n\n  /**\n   * Get pipeline configuration\n   */\n  getConfig(): ValidationPipelineConfig {\n    return { ...this.config };\n  }\n\n  // ============================================================================\n  // Helper Methods\n  // ============================================================================\n\n  /**\n   * Create a validation error\n   */\n  private createError(\n    code: string,\n    message: string,\n    path: string[],\n    severity: ValidationSeverity,\n    suggestions: string[] = [],\n    context: Record<string, any> = {},\n    value?: any\n  ): ValidationError {\n    return {\n      code,\n      message,\n      path,\n      severity,\n      suggestions,\n      context,\n      value\n    };\n  }\n\n  /**\n   * Create a failed validation result\n   */\n  private createFailureResult(\n    context: ValidationContext,\n    startTime: number,\n    errors: ValidationError[],\n    warnings: ValidationError[] = []\n  ): ValidationResult {\n    return {\n      isValid: false,\n      errors,\n      warnings,\n      metrics: {\n        duration: Date.now() - startTime,\n        rulesExecuted: 0,\n        validatorsUsed: 0,\n        cacheStats: { hits: 0, misses: 0, hitRate: 0 }\n      },\n      timestamp: new Date()\n    };\n  }\n}\n","/**\n * @fileoverview Base validator classes and validator composition utilities\n * \n * Provides foundation classes for building custom validators:\n * - BaseValidator: Abstract base class with common functionality\n * - CompositeValidator: Combines multiple validators\n * - ValidatorBuilder: Fluent API for building validators\n * - SpecializedValidators: Chemistry-specific validator helpers\n * \n * @version 1.0.0\n * @author CREB Team\n */\n\nimport {\n  IValidator,\n  ICompositeValidator,\n  ValidationResult,\n  ValidationContext,\n  ValidatorConfig,\n  ValidationSchema,\n  ValidationError,\n  ValidationSeverity,\n  ValidationBuilder\n} from '../types';\nimport { CREBError, ValidationError as CREBValidationError } from '../../../core/errors/CREBError';\n\n// ============================================================================\n// Base Validator\n// ============================================================================\n\n/**\n * Abstract base class for all validators\n */\nexport abstract class BaseValidator<T = any> implements IValidator<T> {\n  public readonly name: string;\n  public readonly config: ValidatorConfig;\n  public readonly dependencies: string[];\n  protected readonly schema: ValidationSchema;\n\n  constructor(\n    name: string,\n    config: Partial<ValidatorConfig> = {},\n    dependencies: string[] = []\n  ) {\n    this.name = name;\n    this.dependencies = dependencies;\n    this.config = {\n      enabled: true,\n      priority: 0,\n      timeout: 5000,\n      cacheable: true,\n      ...config\n    };\n    \n    this.schema = this.createSchema();\n  }\n\n  /**\n   * Validate a value - must be implemented by subclasses\n   */\n  abstract validate(value: T, context: ValidationContext): Promise<ValidationResult>;\n\n  /**\n   * Check if validator can handle the given value type\n   */\n  abstract canValidate(value: any): value is T;\n\n  /**\n   * Create validation schema - can be overridden by subclasses\n   */\n  protected createSchema(): ValidationSchema {\n    return {\n      name: this.name,\n      version: '1.0.0',\n      description: `Schema for ${this.name} validator`,\n      types: ['any'],\n      requiredValidators: [],\n      optionalValidators: [],\n      properties: {}\n    };\n  }\n\n  /**\n   * Get validation schema\n   */\n  getSchema(): ValidationSchema {\n    return { ...this.schema };\n  }\n\n  /**\n   * Create a validation error\n   */\n  protected createError(\n    code: string,\n    message: string,\n    path: string[],\n    severity: ValidationSeverity = ValidationSeverity.ERROR,\n    suggestions: string[] = [],\n    context?: Record<string, any>,\n    value?: any\n  ): ValidationError {\n    return {\n      code,\n      message,\n      path,\n      severity,\n      suggestions,\n      context,\n      value\n    };\n  }\n\n  /**\n   * Create a successful validation result\n   */\n  protected createSuccessResult(\n    context: ValidationContext,\n    warnings: ValidationError[] = []\n  ): ValidationResult {\n    return {\n      isValid: true,\n      errors: [],\n      warnings,\n      metrics: {\n        duration: 0,\n        rulesExecuted: 0,\n        validatorsUsed: 1,\n        cacheStats: { hits: 0, misses: 0, hitRate: 0 }\n      },\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Create a failed validation result\n   */\n  protected createFailureResult(\n    errors: ValidationError[],\n    context: ValidationContext,\n    warnings: ValidationError[] = []\n  ): ValidationResult {\n    return {\n      isValid: false,\n      errors,\n      warnings,\n      metrics: {\n        duration: 0,\n        rulesExecuted: 0,\n        validatorsUsed: 1,\n        cacheStats: { hits: 0, misses: 0, hitRate: 0 }\n      },\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Validate configuration\n   */\n  protected validateConfig(): void {\n    if (this.config.timeout && this.config.timeout <= 0) {\n      throw new CREBValidationError(\n        'Validator timeout must be positive',\n        { validator: this.name, timeout: this.config.timeout }\n      );\n    }\n  }\n}\n\n// ============================================================================\n// Composite Validator\n// ============================================================================\n\n/**\n * Validator that combines multiple validators\n */\nexport class CompositeValidator extends BaseValidator implements ICompositeValidator {\n  public readonly validators: IValidator[] = [];\n  private readonly validatorMap = new Map<string, IValidator>();\n\n  constructor(\n    name: string,\n    validators: IValidator[] = [],\n    config: Partial<ValidatorConfig> = {}\n  ) {\n    super(name, config);\n    \n    for (const validator of validators) {\n      this.addValidator(validator);\n    }\n  }\n\n  /**\n   * Add a validator to the composition\n   */\n  addValidator(validator: IValidator): void {\n    if (this.validatorMap.has(validator.name)) {\n      throw new CREBValidationError(\n        `Validator '${validator.name}' already exists in composite`,\n        { composite: this.name, validator: validator.name }\n      );\n    }\n\n    this.validators.push(validator);\n    this.validatorMap.set(validator.name, validator);\n  }\n\n  /**\n   * Remove a validator from the composition\n   */\n  removeValidator(name: string): void {\n    const index = this.validators.findIndex(v => v.name === name);\n    if (index !== -1) {\n      this.validators.splice(index, 1);\n      this.validatorMap.delete(name);\n    }\n  }\n\n  /**\n   * Get a specific validator by name\n   */\n  getValidator(name: string): IValidator | undefined {\n    return this.validatorMap.get(name);\n  }\n\n  /**\n   * Check if composite can validate the value\n   */\n  canValidate(value: any): value is any {\n    return this.validators.some(validator => validator.canValidate(value));\n  }\n\n  /**\n   * Validate using all applicable validators\n   */\n  async validate(value: any, context: ValidationContext): Promise<ValidationResult> {\n    const startTime = Date.now();\n    const applicableValidators = this.validators.filter(v => v.canValidate(value));\n\n    if (applicableValidators.length === 0) {\n      return this.createSuccessResult(context);\n    }\n\n    const results: ValidationResult[] = [];\n    const allErrors: ValidationError[] = [];\n    const allWarnings: ValidationError[] = [];\n\n    // Execute all applicable validators\n    for (const validator of applicableValidators) {\n      try {\n        const result = await validator.validate(value, context);\n        results.push(result);\n        allErrors.push(...result.errors);\n        allWarnings.push(...result.warnings);\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        const validationError = this.createError(\n          'COMPOSITE_VALIDATOR_ERROR',\n          `Validator '${validator.name}' failed: ${errorMessage}`,\n          context.path,\n          ValidationSeverity.ERROR,\n          ['Check validator configuration', 'Verify input data'],\n          { validator: validator.name, error: errorMessage }\n        );\n        allErrors.push(validationError);\n      }\n    }\n\n    const duration = Date.now() - startTime;\n    const totalRules = results.reduce((sum, r) => sum + r.metrics.rulesExecuted, 0);\n    const totalCacheHits = results.reduce((sum, r) => sum + r.metrics.cacheStats.hits, 0);\n    const totalCacheMisses = results.reduce((sum, r) => sum + r.metrics.cacheStats.misses, 0);\n    const totalCache = totalCacheHits + totalCacheMisses;\n\n    return {\n      isValid: allErrors.length === 0,\n      errors: allErrors,\n      warnings: allWarnings,\n      metrics: {\n        duration,\n        rulesExecuted: totalRules,\n        validatorsUsed: applicableValidators.length,\n        cacheStats: {\n          hits: totalCacheHits,\n          misses: totalCacheMisses,\n          hitRate: totalCache > 0 ? totalCacheHits / totalCache : 0\n        }\n      },\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Create composite schema\n   */\n  protected createSchema(): ValidationSchema {\n    const childSchemas = this.validators.map(v => v.getSchema());\n    const allTypes = new Set<string>();\n    const allRequired = new Set<string>();\n    const allOptional = new Set<string>();\n\n    for (const schema of childSchemas) {\n      schema.types.forEach(type => allTypes.add(type));\n      schema.requiredValidators.forEach(req => allRequired.add(req));\n      schema.optionalValidators.forEach(opt => allOptional.add(opt));\n    }\n\n    return {\n      name: this.name,\n      version: '1.0.0',\n      description: `Composite schema for ${this.name}`,\n      types: Array.from(allTypes),\n      requiredValidators: Array.from(allRequired),\n      optionalValidators: Array.from(allOptional),\n      properties: {\n        compositeOf: this.validators.map(v => v.name),\n        childSchemas\n      }\n    };\n  }\n}\n\n// ============================================================================\n// Validation Builder\n// ============================================================================\n\n/**\n * Fluent API for building validators\n */\nexport class FluentValidationBuilder<T> implements ValidationBuilder<T> {\n  private readonly validators: IValidator<T>[] = [];\n  private readonly rules: any[] = []; // ValidationRule<T>[] - avoiding circular dependency\n  private config: Partial<ValidatorConfig> = {};\n  private name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * Add a validator to the builder\n   */\n  addValidator(validator: IValidator<T>): ValidationBuilder<T> {\n    this.validators.push(validator);\n    return this;\n  }\n\n  /**\n   * Add a rule to the builder\n   */\n  addRule(rule: any): ValidationBuilder<T> { // ValidationRule<T>\n    this.rules.push(rule);\n    return this;\n  }\n\n  /**\n   * Set configuration for the validator\n   */\n  withConfig(config: Partial<ValidatorConfig>): ValidationBuilder<T> {\n    this.config = { ...this.config, ...config };\n    return this;\n  }\n\n  /**\n   * Set validator name\n   */\n  withName(name: string): ValidationBuilder<T> {\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Set validator priority\n   */\n  withPriority(priority: number): ValidationBuilder<T> {\n    this.config.priority = priority;\n    return this;\n  }\n\n  /**\n   * Enable/disable caching\n   */\n  withCaching(enabled: boolean): ValidationBuilder<T> {\n    this.config.cacheable = enabled;\n    return this;\n  }\n\n  /**\n   * Set validator timeout\n   */\n  withTimeout(timeout: number): ValidationBuilder<T> {\n    this.config.timeout = timeout;\n    return this;\n  }\n\n  /**\n   * Build the composite validator\n   */\n  build(): IValidator<T> {\n    if (this.validators.length === 0) {\n      throw new CREBValidationError(\n        'Cannot build validator without any validators',\n        { name: this.name }\n      );\n    }\n\n    if (this.validators.length === 1) {\n      return this.validators[0];\n    }\n\n    return new CompositeValidator(this.name, this.validators, this.config) as IValidator<T>;\n  }\n}\n\n// ============================================================================\n// Specialized Validator Helpers\n// ============================================================================\n\n/**\n * Base class for chemistry-specific validators\n */\nexport abstract class ChemistryValidator<T> extends BaseValidator<T> {\n  protected readonly elementSymbols = new Set([\n    'H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne',\n    'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca',\n    'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn',\n    'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr',\n    'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn',\n    'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd',\n    'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb',\n    'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg',\n    'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th',\n    'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm',\n    'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds',\n    'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og'\n  ]);\n\n  /**\n   * Validate element symbol\n   */\n  protected isValidElement(symbol: string): boolean {\n    return this.elementSymbols.has(symbol);\n  }\n\n  /**\n   * Parse chemical formula into elements and counts\n   */\n  protected parseFormula(formula: string): Map<string, number> {\n    const elements = new Map<string, number>();\n    const regex = /([A-Z][a-z]?)(\\d*)/g;\n    let match;\n\n    while ((match = regex.exec(formula)) !== null) {\n      const element = match[1];\n      const count = parseInt(match[2] || '1', 10);\n      \n      if (!this.isValidElement(element)) {\n        throw new CREBValidationError(\n          `Invalid element symbol: ${element}`,\n          { element, formula }\n        );\n      }\n\n      elements.set(element, (elements.get(element) || 0) + count);\n    }\n\n    return elements;\n  }\n\n  /**\n   * Calculate molecular weight from formula\n   */\n  protected calculateMolecularWeight(elements: Map<string, number>): number {\n    // Simplified atomic weights (should be imported from constants)\n    const atomicWeights: Record<string, number> = {\n      'H': 1.008, 'C': 12.011, 'N': 14.007, 'O': 15.999,\n      'F': 18.998, 'P': 30.974, 'S': 32.06, 'Cl': 35.45,\n      'K': 39.098, 'Ca': 40.078, 'Fe': 55.845, 'Cu': 63.546,\n      'Zn': 65.38, 'Br': 79.904, 'Ag': 107.868, 'I': 126.90\n      // Add more as needed\n    };\n\n    let totalWeight = 0;\n    for (const [element, count] of elements) {\n      const weight = atomicWeights[element];\n      if (weight === undefined) {\n        throw new CREBValidationError(\n          `Atomic weight not available for element: ${element}`,\n          { element }\n        );\n      }\n      totalWeight += weight * count;\n    }\n\n    return totalWeight;\n  }\n}\n\n/**\n * Async validator base class\n */\nexport abstract class AsyncValidator<T> extends BaseValidator<T> {\n  protected readonly concurrencyLimit: number;\n  private activeTasks = 0;\n\n  constructor(\n    name: string,\n    config: Partial<ValidatorConfig> = {},\n    dependencies: string[] = [],\n    concurrencyLimit = 5\n  ) {\n    super(name, config, dependencies);\n    this.concurrencyLimit = concurrencyLimit;\n  }\n\n  /**\n   * Execute async validation with concurrency control\n   */\n  async validate(value: T, context: ValidationContext): Promise<ValidationResult> {\n    await this.waitForSlot();\n    this.activeTasks++;\n\n    try {\n      return await this.performAsyncValidation(value, context);\n    } finally {\n      this.activeTasks--;\n    }\n  }\n\n  /**\n   * Perform the actual async validation - must be implemented by subclasses\n   */\n  protected abstract performAsyncValidation(\n    value: T,\n    context: ValidationContext\n  ): Promise<ValidationResult>;\n\n  /**\n   * Wait for an available slot\n   */\n  private async waitForSlot(): Promise<void> {\n    while (this.activeTasks >= this.concurrencyLimit) {\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n}\n\n// ============================================================================\n// Factory Functions\n// ============================================================================\n\n/**\n * Create a validation builder\n */\nexport function createValidator<T>(name: string): ValidationBuilder<T> {\n  return new FluentValidationBuilder<T>(name);\n}\n\n/**\n * Create a composite validator\n */\nexport function createCompositeValidator(\n  name: string,\n  validators: IValidator[],\n  config?: Partial<ValidatorConfig>\n): ICompositeValidator {\n  return new CompositeValidator(name, validators, config);\n}\n\n/**\n * Create a chemistry validator (helper for common chemistry validations)\n */\nexport function createChemistryValidator<T>(\n  name: string,\n  validationFn: (value: T, context: ValidationContext) => Promise<ValidationResult>,\n  canValidateFn: (value: any) => value is T,\n  config?: Partial<ValidatorConfig>\n): IValidator<T> {\n  return new (class extends ChemistryValidator<T> {\n    canValidate = canValidateFn;\n    validate = validationFn;\n  })(name, config);\n}\n","/**\n * @fileoverview Chemical Formula Validator\n * \n * Validates chemical formulas with support for:\n * - Basic chemical formulas (H2O, C6H12O6)\n * - Isotope notation (13C, 2H)\n * - Charge notation (+, -, 2+, 3-)\n * - Complex notation ([Cu(NH3)4]2+)\n * - Radical notation (•)\n * \n * @version 1.0.0\n * @author CREB Team\n */\n\nimport {\n  ValidationResult,\n  ValidationContext,\n  ValidatorConfig,\n  ValidationSchema,\n  ValidationSeverity,\n  ValidationError,\n  ChemicalFormulaConfig\n} from '../types';\nimport { ChemistryValidator } from './BaseValidator';\n\n/**\n * Validator for chemical formulas\n */\nexport class ChemicalFormulaValidator extends ChemistryValidator<string> {\n  private readonly formulaConfig: ChemicalFormulaConfig;\n\n  constructor(\n    config: Partial<ValidatorConfig> = {},\n    formulaConfig: Partial<ChemicalFormulaConfig> = {}\n  ) {\n    super('chemical-formula', config);\n    \n    this.formulaConfig = {\n      allowIsotopes: true,\n      allowRadicals: false,\n      allowCharges: true,\n      allowComplexes: true,\n      maxAtoms: 1000,\n      allowedElements: [], // Empty = all elements allowed\n      ...formulaConfig\n    };\n  }\n\n  /**\n   * Check if validator can handle the given value\n   */\n  canValidate(value: any): value is string {\n    return typeof value === 'string' && value.trim().length > 0;\n  }\n\n  /**\n   * Validate chemical formula\n   */\n  async validate(value: string, context: ValidationContext): Promise<ValidationResult> {\n    const startTime = Date.now();\n    const errors = [];\n    const warnings = [];\n\n    try {\n      const formula = value.trim();\n      \n      // Basic format validation\n      if (!this.hasValidFormat(formula)) {\n        // Check for specific types of invalid format\n        const invalidCharPattern = /[^A-Za-z0-9\\(\\)\\[\\]\\+\\-\\s\\•]/;\n        const unicodePattern = /[₀-₉⁰-⁹]/;\n        \n        let errorMessage = `Invalid chemical formula format: ${formula}`;\n        let suggestions = [\n          'Use standard chemical notation (e.g., H2O, CaCl2)',\n          'Ensure element symbols start with uppercase letter',\n          'Use numbers for atom counts, not letters'\n        ];\n\n        if (invalidCharPattern.test(formula)) {\n          errorMessage = `Formula contains invalid character(s): ${formula}`;\n          suggestions = [\n            'Remove special characters like !, @, #, $, %, etc.',\n            'Use only letters, numbers, parentheses, brackets, and +/- signs'\n          ];\n        } else if (unicodePattern.test(formula)) {\n          errorMessage = `Formula contains invalid character(s) (Unicode subscripts/superscripts): ${formula}`;\n          suggestions = [\n            'Use regular numbers instead of subscript/superscript characters',\n            'Example: Use H2O instead of H₂O'\n          ];\n        }\n\n        errors.push(this.createError(\n          'INVALID_FORMULA_FORMAT',\n          errorMessage,\n          context.path,\n          ValidationSeverity.ERROR,\n          suggestions,\n          { formula },\n          value\n        ));\n      } else {\n        // Detailed validation\n        const validationResults = this.validateFormulaComponents(formula, context.path);\n        errors.push(...validationResults.errors);\n        warnings.push(...validationResults.warnings);\n      }\n\n      const duration = Date.now() - startTime;\n      const isValid = errors.length === 0;\n\n      return {\n        isValid,\n        errors,\n        warnings,\n        metrics: {\n          duration,\n          rulesExecuted: 1,\n          validatorsUsed: 1,\n          cacheStats: { hits: 0, misses: 1, hitRate: 0 }\n        },\n        timestamp: new Date()\n      };\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      return this.createFailureResult([\n        this.createError(\n          'FORMULA_VALIDATION_ERROR',\n          `Formula validation failed: ${errorMessage}`,\n          context.path,\n          ValidationSeverity.ERROR,\n          ['Check formula syntax', 'Verify element symbols'],\n          { error: errorMessage },\n          value\n        )\n      ], context);\n    }\n  }\n\n  /**\n   * Basic format validation\n   */\n  private hasValidFormat(formula: string): boolean {\n    // Check for invalid characters first\n    const invalidCharPattern = /[^A-Za-z0-9\\(\\)\\[\\]\\+\\-\\s\\•]/;\n    if (invalidCharPattern.test(formula)) {\n      return false;\n    }\n\n    // Check for Unicode subscript/superscript characters\n    const unicodePattern = /[₀-₉⁰-⁹]/;\n    if (unicodePattern.test(formula)) {\n      return false;\n    }\n\n    // Basic regex for chemical formula validation\n    // Allows: Element symbols, numbers, brackets, charges, isotopes\n    const basicPattern = /^[A-Z][a-z]?(\\d*[A-Z][a-z]?\\d*)*(\\[.*\\])?[+-]?\\d*[+-]?$/;\n    return basicPattern.test(formula.replace(/[\\(\\)\\[\\]]/g, ''));\n  }\n\n  /**\n   * Detailed component validation\n   */\n  private validateFormulaComponents(\n    formula: string,\n    path: string[]\n  ): { errors: ValidationError[], warnings: ValidationError[] } {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationError[] = [];\n\n    try {\n      // Handle complex formulas with brackets\n      if (this.hasComplexNotation(formula)) {\n        if (!this.formulaConfig.allowComplexes) {\n          errors.push(this.createError(\n            'COMPLEX_NOTATION_NOT_ALLOWED',\n            'Complex notation with brackets is not allowed',\n            path,\n            ValidationSeverity.ERROR,\n            ['Use simple formula notation without brackets'],\n            { formula }\n          ));\n          return { errors, warnings };\n        }\n        return this.validateComplexFormula(formula, path);\n      }\n\n      // Handle charged formulas\n      if (this.hasChargeNotation(formula)) {\n        if (!this.formulaConfig.allowCharges) {\n          errors.push(this.createError(\n            'CHARGE_NOTATION_NOT_ALLOWED',\n            'Charge notation is not allowed',\n            path,\n            ValidationSeverity.ERROR,\n            ['Remove charge notation from formula'],\n            { formula }\n          ));\n          return { errors, warnings };\n        }\n        return this.validateChargedFormula(formula, path);\n      }\n\n      // Validate simple formula\n      return this.validateSimpleFormula(formula, path);\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      errors.push(this.createError(\n        'COMPONENT_VALIDATION_ERROR',\n        `Component validation failed: ${errorMessage}`,\n        path,\n        ValidationSeverity.ERROR,\n        ['Check formula structure'],\n        { error: errorMessage }\n      ));\n      return { errors, warnings };\n    }\n  }\n\n  /**\n   * Validate simple chemical formula\n   */\n  private validateSimpleFormula(\n    formula: string,\n    path: string[]\n  ): { errors: ValidationError[], warnings: ValidationError[] } {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationError[] = [];\n\n    // Extract elements and counts\n    const elementPattern = /([A-Z][a-z]?)(\\d*)/g;\n    const elements = new Map<string, number>();\n    let totalAtoms = 0;\n    let match;\n\n    while ((match = elementPattern.exec(formula)) !== null) {\n      const element = match[1];\n      const count = parseInt(match[2] || '1', 10);\n\n      // Validate element symbol\n      if (!this.isValidElement(element)) {\n        errors.push(this.createError(\n          'INVALID_ELEMENT',\n          `Invalid element symbol: ${element}`,\n          path,\n          ValidationSeverity.ERROR,\n          [\n            'Check periodic table for correct element symbols',\n            'Ensure proper capitalization (first letter uppercase, second lowercase)'\n          ],\n          { element, formula }\n        ));\n      }\n\n      // Check if element is allowed\n      if (this.formulaConfig.allowedElements.length > 0 &&\n          !this.formulaConfig.allowedElements.includes(element)) {\n        errors.push(this.createError(\n          'ELEMENT_NOT_ALLOWED',\n          `Element ${element} is not allowed`,\n          path,\n          ValidationSeverity.ERROR,\n          [`Use only allowed elements: ${this.formulaConfig.allowedElements.join(', ')}`],\n          { element, allowedElements: this.formulaConfig.allowedElements }\n        ));\n      }\n\n      // Check for isotope notation\n      if (/^\\d+[A-Z]/.test(element)) {\n        if (!this.formulaConfig.allowIsotopes) {\n          errors.push(this.createError(\n            'ISOTOPE_NOTATION_NOT_ALLOWED',\n            'Isotope notation is not allowed',\n            path,\n            ValidationSeverity.ERROR,\n            ['Remove isotope numbers from element symbols'],\n            { element, formula }\n          ));\n        }\n      }\n\n      elements.set(element, count);\n      totalAtoms += count;\n    }\n\n    // Check maximum atoms limit\n    if (totalAtoms > this.formulaConfig.maxAtoms) {\n      errors.push(this.createError(\n        'TOO_MANY_ATOMS',\n        `Formula contains ${totalAtoms} atoms, maximum allowed is ${this.formulaConfig.maxAtoms}`,\n        path,\n        ValidationSeverity.ERROR,\n        ['Simplify the formula', 'Use smaller atom counts'],\n        { totalAtoms, maxAtoms: this.formulaConfig.maxAtoms }\n      ));\n    }\n\n    // Warnings for unusual patterns\n    if (totalAtoms > 100) {\n      warnings.push(this.createError(\n        'LARGE_MOLECULE',\n        `Formula contains ${totalAtoms} atoms, which is unusually large`,\n        path,\n        ValidationSeverity.WARNING,\n        ['Verify the formula is correct', 'Consider if this represents a polymer unit'],\n        { totalAtoms }\n      ));\n    }\n\n    return { errors, warnings };\n  }\n\n  /**\n   * Validate charged formula\n   */\n  private validateChargedFormula(\n    formula: string,\n    path: string[]\n  ): { errors: ValidationError[], warnings: ValidationError[] } {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationError[] = [];\n\n    // Extract charge part\n    const chargeMatch = formula.match(/([+-]\\d*|\\d*[+-])$/);\n    if (!chargeMatch) {\n      errors.push(this.createError(\n        'INVALID_CHARGE_FORMAT',\n        'Invalid charge notation format',\n        path,\n        ValidationSeverity.ERROR,\n        ['Use format like +, -, 2+, 3- for charges'],\n        { formula }\n      ));\n      return { errors, warnings };\n    }\n\n    const charge = chargeMatch[1];\n    const neutralFormula = formula.replace(chargeMatch[0], '');\n\n    // Validate the neutral part\n    const neutralResults = this.validateSimpleFormula(neutralFormula, path);\n    errors.push(...neutralResults.errors);\n    warnings.push(...neutralResults.warnings);\n\n    // Validate charge format\n    if (!/^[+-]\\d*$|^\\d*[+-]$/.test(charge)) {\n      errors.push(this.createError(\n        'INVALID_CHARGE_VALUE',\n        `Invalid charge value: ${charge}`,\n        path,\n        ValidationSeverity.ERROR,\n        ['Use valid charge notation (e.g., +, -, 2+, 3-)'],\n        { charge, formula }\n      ));\n    }\n\n    return { errors, warnings };\n  }\n\n  /**\n   * Validate complex formula with brackets\n   */\n  private validateComplexFormula(\n    formula: string,\n    path: string[]\n  ): { errors: ValidationError[], warnings: ValidationError[] } {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationError[] = [];\n\n    // Check bracket balance\n    if (!this.areBracketsBalanced(formula)) {\n      errors.push(this.createError(\n        'UNBALANCED_BRACKETS',\n        'Unbalanced brackets in complex formula',\n        path,\n        ValidationSeverity.ERROR,\n        ['Ensure all brackets are properly paired', 'Check for missing opening or closing brackets'],\n        { formula }\n      ));\n      return { errors, warnings };\n    }\n\n    // For complex formulas, we would need more sophisticated parsing\n    // This is a simplified validation\n    warnings.push(this.createError(\n      'COMPLEX_FORMULA_LIMITED_VALIDATION',\n      'Limited validation for complex formulas',\n      path,\n      ValidationSeverity.WARNING,\n      ['Complex formulas receive basic validation only'],\n      { formula }\n    ));\n\n    return { errors, warnings };\n  }\n\n  /**\n   * Check if formula has complex notation\n   */\n  private hasComplexNotation(formula: string): boolean {\n    return /[\\[\\]]/.test(formula);\n  }\n\n  /**\n   * Check if formula has charge notation\n   */\n  private hasChargeNotation(formula: string): boolean {\n    return /[+-]\\d*$|\\d*[+-]$/.test(formula);\n  }\n\n  /**\n   * Check if brackets are balanced\n   */\n  private areBracketsBalanced(formula: string): boolean {\n    const stack: string[] = [];\n    const pairs: Record<string, string> = { '[': ']', '(': ')' };\n\n    for (const char of formula) {\n      if (char in pairs) {\n        stack.push(char);\n      } else if (Object.values(pairs).includes(char)) {\n        const last = stack.pop();\n        if (!last || pairs[last] !== char) {\n          return false;\n        }\n      }\n    }\n\n    return stack.length === 0;\n  }\n\n  /**\n   * Create validation schema\n   */\n  protected createSchema(): ValidationSchema {\n    return {\n      name: this.name,\n      version: '1.0.0',\n      description: 'Chemical formula validation schema',\n      types: ['string'],\n      requiredValidators: [],\n      optionalValidators: [],\n      properties: {\n        config: this.formulaConfig,\n        examples: ['H2O', 'CaCl2', 'C6H12O6', '[Cu(NH3)4]2+'],\n        patterns: [\n          'Simple formulas: ElementCount (e.g., H2O)',\n          'Charged formulas: Formula+/- (e.g., Ca2+)',\n          'Complex formulas: [Formula]Charge (e.g., [Cu(NH3)4]2+)'\n        ]\n      }\n    };\n  }\n}\n","/**\n * @fileoverview Thermodynamic Properties Validator\n * \n * Validates thermodynamic properties with:\n * - Temperature range validation\n * - Pressure range validation\n * - Enthalpy, entropy, and heat capacity validation\n * - Cross-property consistency checks\n * - Physical property validation\n * \n * @version 1.0.0\n * @author CREB Team\n */\n\nimport {\n  ValidationResult,\n  ValidationContext,\n  ValidatorConfig,\n  ValidationSchema,\n  ValidationSeverity,\n  ValidationError,\n  ThermodynamicConfig,\n  ThermodynamicProperties\n} from '../types';\nimport { ChemistryValidator } from './BaseValidator';\n\n/**\n * Validator for thermodynamic properties\n */\nexport class ThermodynamicPropertiesValidator extends ChemistryValidator<ThermodynamicProperties> {\n  private readonly thermoConfig: ThermodynamicConfig;\n\n  constructor(\n    config: Partial<ValidatorConfig> = {},\n    thermoConfig: Partial<ThermodynamicConfig> = {}\n  ) {\n    super('thermodynamic-properties', config);\n    \n    this.thermoConfig = {\n      temperatureRange: { min: 0, max: 10000 }, // Kelvin\n      pressureRange: { min: 0, max: 1e9 }, // Pascal\n      enthalpyRange: { min: -10000, max: 10000 }, // kJ/mol\n      entropyRange: { min: 0, max: 1000 }, // J/(mol·K)\n      heatCapacityRange: { min: 0, max: 1000 }, // J/(mol·K)\n      ...thermoConfig\n    };\n  }\n\n  /**\n   * Check if validator can handle the given value\n   */\n  canValidate(value: any): value is ThermodynamicProperties {\n    return typeof value === 'object' && value !== null && (\n      'enthalpyFormation' in value ||\n      'entropy' in value ||\n      'heatCapacity' in value ||\n      'gibbsEnergy' in value ||\n      'meltingPoint' in value ||\n      'boilingPoint' in value ||\n      'density' in value ||\n      'temperature' in value ||\n      'pressure' in value ||\n      'enthalpy' in value\n    );\n  }\n\n  /**\n   * Validate thermodynamic properties\n   */\n  async validate(\n    value: ThermodynamicProperties,\n    context: ValidationContext\n  ): Promise<ValidationResult> {\n    const startTime = Date.now();\n    const errors: ValidationError[] = [];\n    const warnings: ValidationError[] = [];\n\n    try {\n      // Validate individual properties\n      this.validateTemperature(value, errors, warnings, context.path);\n      this.validatePressure(value, errors, warnings, context.path);\n      this.validateEnthalpy(value, errors, warnings, context.path);\n      this.validateEntropy(value, errors, warnings, context.path);\n      this.validateHeatCapacity(value, errors, warnings, context.path);\n      this.validateGibbsEnergy(value, errors, warnings, context.path);\n      this.validateTemperatures(value, errors, warnings, context.path);\n      this.validateDensity(value, errors, warnings, context.path);\n\n      // Cross-property consistency checks\n      this.validateConsistency(value, errors, warnings, context.path);\n\n      const duration = Date.now() - startTime;\n      const isValid = errors.length === 0;\n\n      return {\n        isValid,\n        errors,\n        warnings,\n        metrics: {\n          duration,\n          rulesExecuted: 7, // Number of validation methods called\n          validatorsUsed: 1,\n          cacheStats: { hits: 0, misses: 1, hitRate: 0 }\n        },\n        timestamp: new Date()\n      };\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      return this.createFailureResult([\n        this.createError(\n          'THERMODYNAMIC_VALIDATION_ERROR',\n          `Thermodynamic validation failed: ${errorMessage}`,\n          context.path,\n          ValidationSeverity.ERROR,\n          ['Check property values', 'Verify units are correct'],\n          { error: errorMessage },\n          value\n        )\n      ], context);\n    }\n  }\n\n  /**\n   * Validate enthalpy of formation\n   */\n  private validateEnthalpy(\n    properties: ThermodynamicProperties,\n    errors: ValidationError[],\n    warnings: ValidationError[],\n    path: string[]\n  ): void {\n    if (properties.enthalpyFormation === undefined) {\n      return;\n    }\n\n    const enthalpy = properties.enthalpyFormation;\n    const { min, max } = this.thermoConfig.enthalpyRange;\n\n    if (typeof enthalpy !== 'number' || !isFinite(enthalpy)) {\n      errors.push(this.createError(\n        'INVALID_ENTHALPY_VALUE',\n        'Enthalpy of formation must be a finite number',\n        [...path, 'enthalpyFormation'],\n        ValidationSeverity.ERROR,\n        ['Provide a valid numerical value in kJ/mol'],\n        { value: enthalpy }\n      ));\n      return;\n    }\n\n    if (enthalpy < min || enthalpy > max) {\n      errors.push(this.createError(\n        'ENTHALPY_OUT_OF_RANGE',\n        `Enthalpy of formation ${enthalpy} kJ/mol is outside valid range [${min}, ${max}]`,\n        [...path, 'enthalpyFormation'],\n        ValidationSeverity.ERROR,\n        [`Provide value between ${min} and ${max} kJ/mol`],\n        { value: enthalpy, min, max }\n      ));\n    }\n\n    // Warning for extreme values\n    if (Math.abs(enthalpy) > 5000) {\n      warnings.push(this.createError(\n        'EXTREME_ENTHALPY_VALUE',\n        `Enthalpy of formation ${enthalpy} kJ/mol is unusually large`,\n        [...path, 'enthalpyFormation'],\n        ValidationSeverity.WARNING,\n        ['Verify the value is correct', 'Check if units are appropriate'],\n        { value: enthalpy }\n      ));\n    }\n  }\n\n  /**\n   * Validate entropy\n   */\n  private validateEntropy(\n    properties: ThermodynamicProperties,\n    errors: ValidationError[],\n    warnings: ValidationError[],\n    path: string[]\n  ): void {\n    if (properties.entropy === undefined) {\n      return;\n    }\n\n    const entropy = properties.entropy;\n    const { min, max } = this.thermoConfig.entropyRange;\n\n    if (typeof entropy !== 'number' || !isFinite(entropy)) {\n      errors.push(this.createError(\n        'INVALID_ENTROPY_VALUE',\n        'Entropy must be a finite number',\n        [...path, 'entropy'],\n        ValidationSeverity.ERROR,\n        ['Provide a valid numerical value in J/(mol·K)'],\n        { value: entropy }\n      ));\n      return;\n    }\n\n    if (entropy < min) {\n      errors.push(this.createError(\n        'NEGATIVE_ENTROPY',\n        `Entropy ${entropy} J/(mol·K) cannot be negative`,\n        [...path, 'entropy'],\n        ValidationSeverity.ERROR,\n        ['Entropy must be positive according to the third law of thermodynamics'],\n        { value: entropy }\n      ));\n    }\n\n    if (entropy > max) {\n      warnings.push(this.createError(\n        'VERY_HIGH_ENTROPY',\n        `Entropy ${entropy} J/(mol·K) is unusually high`,\n        [...path, 'entropy'],\n        ValidationSeverity.WARNING,\n        ['Verify the value is correct', 'Check for large molecular complexity'],\n        { value: entropy, max }\n      ));\n    }\n  }\n\n  /**\n   * Validate heat capacity\n   */\n  private validateHeatCapacity(\n    properties: ThermodynamicProperties,\n    errors: ValidationError[],\n    warnings: ValidationError[],\n    path: string[]\n  ): void {\n    if (properties.heatCapacity === undefined) {\n      return;\n    }\n\n    const cp = properties.heatCapacity;\n    const { min, max } = this.thermoConfig.heatCapacityRange;\n\n    if (typeof cp !== 'number' || !isFinite(cp)) {\n      errors.push(this.createError(\n        'INVALID_HEAT_CAPACITY_VALUE',\n        'Heat capacity must be a finite number',\n        [...path, 'heatCapacity'],\n        ValidationSeverity.ERROR,\n        ['Provide a valid numerical value in J/(mol·K)'],\n        { value: cp }\n      ));\n      return;\n    }\n\n    if (cp < min) {\n      errors.push(this.createError(\n        'NEGATIVE_HEAT_CAPACITY',\n        `Heat capacity ${cp} J/(mol·K) cannot be negative`,\n        [...path, 'heatCapacity'],\n        ValidationSeverity.ERROR,\n        ['Heat capacity must be positive'],\n        { value: cp }\n      ));\n    }\n\n    if (cp > max) {\n      warnings.push(this.createError(\n        'VERY_HIGH_HEAT_CAPACITY',\n        `Heat capacity ${cp} J/(mol·K) is unusually high`,\n        [...path, 'heatCapacity'],\n        ValidationSeverity.WARNING,\n        ['Verify the value is correct', 'Check molecular complexity'],\n        { value: cp, max }\n      ));\n    }\n  }\n\n  /**\n   * Validate Gibbs free energy\n   */\n  private validateGibbsEnergy(\n    properties: ThermodynamicProperties,\n    errors: ValidationError[],\n    warnings: ValidationError[],\n    path: string[]\n  ): void {\n    if (properties.gibbsEnergy === undefined) {\n      return;\n    }\n\n    const gibbs = properties.gibbsEnergy;\n\n    if (typeof gibbs !== 'number' || !isFinite(gibbs)) {\n      errors.push(this.createError(\n        'INVALID_GIBBS_ENERGY_VALUE',\n        'Gibbs free energy must be a finite number',\n        [...path, 'gibbsEnergy'],\n        ValidationSeverity.ERROR,\n        ['Provide a valid numerical value in kJ/mol'],\n        { value: gibbs }\n      ));\n      return;\n    }\n\n    // Check consistency with enthalpy if both are present\n    if (properties.enthalpyFormation !== undefined && properties.entropy !== undefined) {\n      const expectedGibbs = properties.enthalpyFormation - (298.15 * properties.entropy / 1000);\n      const difference = Math.abs(gibbs - expectedGibbs);\n      \n      if (difference > 50) { // 50 kJ/mol tolerance\n        warnings.push(this.createError(\n          'GIBBS_ENERGY_INCONSISTENCY',\n          `Gibbs energy may be inconsistent with enthalpy and entropy (difference: ${difference.toFixed(1)} kJ/mol)`,\n          [...path, 'gibbsEnergy'],\n          ValidationSeverity.WARNING,\n          ['Check if all values are at same temperature', 'Verify calculation accuracy'],\n          { \n            gibbsProvided: gibbs, \n            gibbsCalculated: expectedGibbs, \n            difference \n          }\n        ));\n      }\n    }\n  }\n\n  /**\n   * Validate temperature properties\n   */\n  private validateTemperatures(\n    properties: ThermodynamicProperties,\n    errors: ValidationError[],\n    warnings: ValidationError[],\n    path: string[]\n  ): void {\n    const { meltingPoint, boilingPoint } = properties;\n    const { min, max } = this.thermoConfig.temperatureRange;\n\n    // Validate melting point\n    if (meltingPoint !== undefined) {\n      if (typeof meltingPoint !== 'number' || !isFinite(meltingPoint)) {\n        errors.push(this.createError(\n          'INVALID_MELTING_POINT',\n          'Melting point must be a finite number',\n          [...path, 'meltingPoint'],\n          ValidationSeverity.ERROR,\n          ['Provide a valid temperature in Kelvin'],\n          { value: meltingPoint }\n        ));\n      } else if (meltingPoint < min || meltingPoint > max) {\n        errors.push(this.createError(\n          'MELTING_POINT_OUT_OF_RANGE',\n          `Melting point ${meltingPoint} K is outside valid range [${min}, ${max}]`,\n          [...path, 'meltingPoint'],\n          ValidationSeverity.ERROR,\n          [`Provide temperature between ${min} and ${max} K`],\n          { value: meltingPoint, min, max }\n        ));\n      }\n    }\n\n    // Validate boiling point\n    if (boilingPoint !== undefined) {\n      if (typeof boilingPoint !== 'number' || !isFinite(boilingPoint)) {\n        errors.push(this.createError(\n          'INVALID_BOILING_POINT',\n          'Boiling point must be a finite number',\n          [...path, 'boilingPoint'],\n          ValidationSeverity.ERROR,\n          ['Provide a valid temperature in Kelvin'],\n          { value: boilingPoint }\n        ));\n      } else if (boilingPoint < min || boilingPoint > max) {\n        errors.push(this.createError(\n          'BOILING_POINT_OUT_OF_RANGE',\n          `Boiling point ${boilingPoint} K is outside valid range [${min}, ${max}]`,\n          [...path, 'boilingPoint'],\n          ValidationSeverity.ERROR,\n          [`Provide temperature between ${min} and ${max} K`],\n          { value: boilingPoint, min, max }\n        ));\n      }\n    }\n\n    // Validate relationship between melting and boiling points\n    if (meltingPoint !== undefined && boilingPoint !== undefined) {\n      if (meltingPoint >= boilingPoint) {\n        errors.push(this.createError(\n          'INVALID_PHASE_TRANSITION',\n          `Melting point (${meltingPoint} K) must be less than boiling point (${boilingPoint} K)`,\n          path,\n          ValidationSeverity.ERROR,\n          ['Check temperature values', 'Ensure proper phase transition order'],\n          { meltingPoint, boilingPoint }\n        ));\n      }\n    }\n  }\n\n  /**\n   * Validate density\n   */\n  private validateDensity(\n    properties: ThermodynamicProperties,\n    errors: ValidationError[],\n    warnings: ValidationError[],\n    path: string[]\n  ): void {\n    if (properties.density === undefined) {\n      return;\n    }\n\n    const density = properties.density;\n\n    if (typeof density !== 'number' || !isFinite(density)) {\n      errors.push(this.createError(\n        'INVALID_DENSITY_VALUE',\n        'Density must be a finite number',\n        [...path, 'density'],\n        ValidationSeverity.ERROR,\n        ['Provide a valid numerical value in g/cm³'],\n        { value: density }\n      ));\n      return;\n    }\n\n    if (density <= 0) {\n      errors.push(this.createError(\n        'NEGATIVE_DENSITY',\n        `Density ${density} g/cm³ must be positive`,\n        [...path, 'density'],\n        ValidationSeverity.ERROR,\n        ['Density cannot be zero or negative'],\n        { value: density }\n      ));\n    }\n\n    if (density > 25) { // Osmium has highest density ~22.6 g/cm³\n      warnings.push(this.createError(\n        'EXTREMELY_HIGH_DENSITY',\n        `Density ${density} g/cm³ is extremely high`,\n        [...path, 'density'],\n        ValidationSeverity.WARNING,\n        ['Verify the value is correct', 'Check if dealing with compressed material'],\n        { value: density }\n      ));\n    }\n  }\n\n  /**\n   * Validate cross-property consistency\n   */\n  private validateConsistency(\n    properties: ThermodynamicProperties,\n    errors: ValidationError[],\n    warnings: ValidationError[],\n    path: string[]\n  ): void {\n    // Additional consistency checks can be added here\n    // For example, checking if entropy correlates with molecular complexity\n    \n    if (properties.entropy !== undefined && properties.heatCapacity !== undefined) {\n      // At room temperature, Cp is typically larger than S for most compounds\n      if (properties.heatCapacity < properties.entropy * 0.5) {\n        warnings.push(this.createError(\n          'UNUSUAL_CP_S_RATIO',\n          'Heat capacity seems unusually low compared to entropy',\n          path,\n          ValidationSeverity.WARNING,\n          ['Verify both values are correct', 'Check temperature conditions'],\n          { \n            heatCapacity: properties.heatCapacity, \n            entropy: properties.entropy \n          }\n        ));\n      }\n    }\n  }\n\n  /**\n   * Create validation schema\n   */\n  protected createSchema(): ValidationSchema {\n    return {\n      name: this.name,\n      version: '1.0.0',\n      description: 'Thermodynamic properties validation schema',\n      types: ['object'],\n      requiredValidators: [],\n      optionalValidators: [],\n      properties: {\n        config: this.thermoConfig,\n        supportedProperties: [\n          'enthalpyFormation',\n          'entropy',\n          'heatCapacity',\n          'gibbsEnergy',\n          'meltingPoint',\n          'boilingPoint',\n          'density'\n        ],\n        units: {\n          enthalpyFormation: 'kJ/mol',\n          entropy: 'J/(mol·K)',\n          heatCapacity: 'J/(mol·K)',\n          gibbsEnergy: 'kJ/mol',\n          meltingPoint: 'K',\n          boilingPoint: 'K',\n          density: 'g/cm³'\n        },\n        validationRules: [\n          'All values must be finite numbers',\n          'Entropy and heat capacity must be positive',\n          'Melting point must be less than boiling point',\n          'Cross-property consistency checks applied'\n        ]\n      }\n    };\n  }\n\n  /**\n   * Validate temperature values\n   */\n  private validateTemperature(\n    properties: ThermodynamicProperties | any,\n    errors: ValidationError[],\n    warnings: ValidationError[],\n    path: string[]\n  ): void {\n    if (properties.temperature === undefined) {\n      return;\n    }\n\n    const temperature = properties.temperature;\n\n    if (typeof temperature !== 'number' || !isFinite(temperature)) {\n      errors.push(this.createError(\n        'INVALID_TEMPERATURE_VALUE',\n        'Temperature must be a finite number',\n        [...path, 'temperature'],\n        ValidationSeverity.ERROR,\n        ['Provide a valid numerical value in Kelvin'],\n        { value: temperature }\n      ));\n      return;\n    }\n\n    // Absolute zero check\n    if (temperature < 0) {\n      errors.push(this.createError(\n        'NEGATIVE_TEMPERATURE',\n        `Temperature ${temperature} K is below absolute zero`,\n        [...path, 'temperature'],\n        ValidationSeverity.ERROR,\n        ['Temperature cannot be negative in Kelvin scale'],\n        { value: temperature }\n      ));\n    }\n\n    // Extreme temperature check\n    if (temperature > 10000) {\n      warnings.push(this.createError(\n        'EXTREME_TEMPERATURE',\n        `Temperature ${temperature} K is extremely high`,\n        [...path, 'temperature'],\n        ValidationSeverity.WARNING,\n        ['Verify the temperature value is correct'],\n        { value: temperature }\n      ));\n    }\n  }\n\n  /**\n   * Validate pressure values\n   */\n  private validatePressure(\n    properties: ThermodynamicProperties | any,\n    errors: ValidationError[],\n    warnings: ValidationError[],\n    path: string[]\n  ): void {\n    if (properties.pressure === undefined) {\n      return;\n    }\n\n    const pressure = properties.pressure;\n\n    if (typeof pressure !== 'number' || !isFinite(pressure)) {\n      errors.push(this.createError(\n        'INVALID_PRESSURE_VALUE',\n        'Pressure must be a finite number',\n        [...path, 'pressure'],\n        ValidationSeverity.ERROR,\n        ['Provide a valid numerical value in Pascal'],\n        { value: pressure }\n      ));\n      return;\n    }\n\n    if (pressure < 0) {\n      errors.push(this.createError(\n        'NEGATIVE_PRESSURE',\n        `Pressure ${pressure} Pa cannot be negative`,\n        [...path, 'pressure'],\n        ValidationSeverity.ERROR,\n        ['Pressure must be positive'],\n        { value: pressure }\n      ));\n    }\n  }\n}\n","/**\n * @fileoverview Validation Metrics Dashboard and Performance Monitoring\n * \n * Provides comprehensive performance monitoring and metrics collection\n * for the validation pipeline with real-time dashboard capabilities.\n */\n\nimport { EventEmitter } from 'events';\nimport {\n  ValidationResult,\n  ValidationError,\n  ValidationMetrics,\n  ValidationSeverity\n} from '../types';\n\n/**\n * Real-time validation metrics and performance data\n */\nexport interface ValidationPerformanceMetrics {\n  /** Total validations performed */\n  totalValidations: number;\n  /** Successful validations */\n  successfulValidations: number;\n  /** Failed validations */\n  failedValidations: number;\n  /** Average validation time in milliseconds */\n  averageValidationTime: number;\n  /** Peak validation time in milliseconds */\n  peakValidationTime: number;\n  /** Minimum validation time in milliseconds */\n  minValidationTime: number;\n  /** Validations per second (current rate) */\n  validationsPerSecond: number;\n  /** Cache hit rate percentage */\n  cacheHitRate: number;\n  /** Memory usage for validation operations */\n  memoryUsage: MemoryUsageMetrics;\n  /** Error distribution by type */\n  errorDistribution: Map<string, number>;\n  /** Performance percentiles */\n  percentiles: PerformancePercentiles;\n  /** Validator-specific metrics */\n  validatorMetrics: Map<string, ValidatorPerformanceMetrics>;\n  /** Time series data for trending */\n  timeSeries: TimeSeries[];\n}\n\n/**\n * Memory usage metrics\n */\nexport interface MemoryUsageMetrics {\n  /** Current memory usage in MB */\n  current: number;\n  /** Peak memory usage in MB */\n  peak: number;\n  /** Average memory usage in MB */\n  average: number;\n  /** Memory allocation rate */\n  allocationRate: number;\n}\n\n/**\n * Performance percentile data\n */\nexport interface PerformancePercentiles {\n  p50: number;  // Median\n  p75: number;  // 75th percentile\n  p90: number;  // 90th percentile\n  p95: number;  // 95th percentile\n  p99: number;  // 99th percentile\n}\n\n/**\n * Validator-specific performance metrics\n */\nexport interface ValidatorPerformanceMetrics {\n  /** Validator name */\n  name: string;\n  /** Number of executions */\n  executions: number;\n  /** Average execution time */\n  averageTime: number;\n  /** Success rate percentage */\n  successRate: number;\n  /** Error count */\n  errorCount: number;\n  /** Cache hit rate for this validator */\n  cacheHitRate: number;\n}\n\n/**\n * Time series data point\n */\nexport interface TimeSeries {\n  /** Timestamp */\n  timestamp: Date;\n  /** Validations per second at this time */\n  validationsPerSecond: number;\n  /** Average response time at this time */\n  averageResponseTime: number;\n  /** Error rate at this time */\n  errorRate: number;\n  /** Memory usage at this time */\n  memoryUsage: number;\n}\n\n/**\n * Dashboard configuration options\n */\nexport interface DashboardConfig {\n  /** Update interval in milliseconds */\n  updateInterval: number;\n  /** Maximum time series data points to keep */\n  maxTimeSeriesPoints: number;\n  /** Whether to enable real-time updates */\n  realTimeUpdates: boolean;\n  /** Memory monitoring enabled */\n  memoryMonitoring: boolean;\n  /** Percentile calculation enabled */\n  percentileTracking: boolean;\n}\n\n/**\n * Validation Metrics Dashboard\n * \n * Provides real-time monitoring and analytics for validation performance\n */\nexport class ValidationMetricsDashboard extends EventEmitter {\n  private metrics: ValidationPerformanceMetrics;\n  private config: DashboardConfig;\n  private validationTimes: number[] = [];\n  private recentValidations: Array<{ timestamp: Date; duration: number; success: boolean }> = [];\n  private memorySnapshots: Array<{ timestamp: Date; usage: number }> = [];\n  private updateTimer?: NodeJS.Timeout;\n  private startTime: Date;\n\n  constructor(config: Partial<DashboardConfig> = {}) {\n    super();\n    \n    this.config = {\n      updateInterval: 1000,\n      maxTimeSeriesPoints: 100,\n      realTimeUpdates: true,\n      memoryMonitoring: true,\n      percentileTracking: true,\n      ...config\n    };\n\n    this.startTime = new Date();\n    this.metrics = this.initializeMetrics();\n    \n    if (this.config.realTimeUpdates) {\n      this.startRealTimeUpdates();\n    }\n  }\n\n  /**\n   * Record a validation result for metrics tracking\n   */\n  recordValidation(result: ValidationResult): void {\n    const now = new Date();\n    const success = result.isValid;\n    const duration = result.metrics.duration;\n\n    // Update basic counters\n    this.metrics.totalValidations++;\n    if (success) {\n      this.metrics.successfulValidations++;\n    } else {\n      this.metrics.failedValidations++;\n    }\n\n    // Update timing metrics\n    this.validationTimes.push(duration);\n    this.recentValidations.push({ timestamp: now, duration, success });\n\n    // Update min/max/average times\n    this.updateTimingMetrics(duration);\n\n    // Update cache metrics\n    if (result.fromCache) {\n      this.updateCacheMetrics();\n    }\n\n    // Record error distribution\n    if (!success) {\n      this.recordErrors(result.errors);\n    }\n\n    // Update validator-specific metrics\n    this.updateValidatorMetrics(result);\n\n    // Memory monitoring\n    if (this.config.memoryMonitoring) {\n      this.recordMemoryUsage();\n    }\n\n    // Cleanup old data\n    this.cleanupOldData();\n\n    // Emit update event\n    this.emit('metrics:updated', this.metrics);\n  }\n\n  /**\n   * Get current performance metrics\n   */\n  getMetrics(): ValidationPerformanceMetrics {\n    this.updateDerivedMetrics();\n    return { ...this.metrics };\n  }\n\n  /**\n   * Get metrics for a specific time range\n   */\n  getMetricsForTimeRange(startTime: Date, endTime: Date): ValidationPerformanceMetrics {\n    const filteredValidations = this.recentValidations.filter(\n      v => v.timestamp >= startTime && v.timestamp <= endTime\n    );\n\n    const rangeMetrics = this.calculateMetricsForValidations(filteredValidations);\n    return rangeMetrics;\n  }\n\n  /**\n   * Get real-time dashboard data formatted for display\n   */\n  getDashboardData(): any {\n    const current = this.getMetrics();\n    \n    return {\n      summary: {\n        total: current.totalValidations,\n        successful: current.successfulValidations,\n        failed: current.failedValidations,\n        successRate: this.calculateSuccessRate(),\n        avgTime: current.averageValidationTime,\n        cacheHitRate: current.cacheHitRate\n      },\n      performance: {\n        currentRate: current.validationsPerSecond,\n        avgTime: current.averageValidationTime,\n        peakTime: current.peakValidationTime,\n        minTime: current.minValidationTime,\n        percentiles: current.percentiles\n      },\n      memory: current.memoryUsage,\n      validators: Array.from(current.validatorMetrics.values()),\n      timeSeries: current.timeSeries.slice(-20), // Last 20 data points\n      errors: this.getTopErrors(10)\n    };\n  }\n\n  /**\n   * Reset all metrics\n   */\n  reset(): void {\n    this.metrics = this.initializeMetrics();\n    this.validationTimes = [];\n    this.recentValidations = [];\n    this.memorySnapshots = [];\n    this.startTime = new Date();\n    \n    this.emit('metrics:reset');\n  }\n\n  /**\n   * Export metrics to JSON\n   */\n  exportMetrics(): string {\n    return JSON.stringify({\n      metrics: this.getMetrics(),\n      metadata: {\n        exportTime: new Date(),\n        uptime: Date.now() - this.startTime.getTime(),\n        config: this.config\n      }\n    }, null, 2);\n  }\n\n  /**\n   * Stop the dashboard and cleanup resources\n   */\n  stop(): void {\n    if (this.updateTimer) {\n      clearInterval(this.updateTimer);\n      this.updateTimer = undefined;\n    }\n    \n    this.removeAllListeners();\n  }\n\n  // ============================================================================\n  // Private Methods\n  // ============================================================================\n\n  private initializeMetrics(): ValidationPerformanceMetrics {\n    return {\n      totalValidations: 0,\n      successfulValidations: 0,\n      failedValidations: 0,\n      averageValidationTime: 0,\n      peakValidationTime: 0,\n      minValidationTime: Infinity,\n      validationsPerSecond: 0,\n      cacheHitRate: 0,\n      memoryUsage: {\n        current: 0,\n        peak: 0,\n        average: 0,\n        allocationRate: 0\n      },\n      errorDistribution: new Map(),\n      percentiles: {\n        p50: 0,\n        p75: 0,\n        p90: 0,\n        p95: 0,\n        p99: 0\n      },\n      validatorMetrics: new Map(),\n      timeSeries: []\n    };\n  }\n\n  private startRealTimeUpdates(): void {\n    this.updateTimer = setInterval(() => {\n      this.updateDerivedMetrics();\n      this.addTimeSeriesPoint();\n      this.emit('metrics:realtime', this.metrics);\n    }, this.config.updateInterval);\n  }\n\n  private updateTimingMetrics(duration: number): void {\n    this.metrics.peakValidationTime = Math.max(this.metrics.peakValidationTime, duration);\n    this.metrics.minValidationTime = Math.min(this.metrics.minValidationTime, duration);\n    \n    // Calculate rolling average\n    const sum = this.validationTimes.reduce((a, b) => a + b, 0);\n    this.metrics.averageValidationTime = sum / this.validationTimes.length;\n  }\n\n  private updateCacheMetrics(): void {\n    // Cache hit rate calculation would be based on cache-specific logic\n    // This is a simplified version\n    const totalWithCache = this.recentValidations.length;\n    const cacheHits = this.recentValidations.filter(v => \n      v.duration < this.metrics.averageValidationTime * 0.1\n    ).length;\n    \n    this.metrics.cacheHitRate = totalWithCache > 0 ? (cacheHits / totalWithCache) * 100 : 0;\n  }\n\n  private recordErrors(errors: ValidationError[]): void {\n    errors.forEach(error => {\n      const errorType = error.code || 'UNKNOWN_ERROR';\n      const current = this.metrics.errorDistribution.get(errorType) || 0;\n      this.metrics.errorDistribution.set(errorType, current + 1);\n    });\n  }\n\n  private updateValidatorMetrics(result: ValidationResult): void {\n    // This would be updated based on which validators were used\n    // For now, we'll create a generic entry\n    const validatorName = 'default-validator';\n    \n    let validatorMetrics = this.metrics.validatorMetrics.get(validatorName);\n    if (!validatorMetrics) {\n      validatorMetrics = {\n        name: validatorName,\n        executions: 0,\n        averageTime: 0,\n        successRate: 0,\n        errorCount: 0,\n        cacheHitRate: 0\n      };\n      this.metrics.validatorMetrics.set(validatorName, validatorMetrics);\n    }\n\n    validatorMetrics.executions++;\n    validatorMetrics.averageTime = \n      (validatorMetrics.averageTime * (validatorMetrics.executions - 1) + result.metrics.duration) / \n      validatorMetrics.executions;\n    \n    if (!result.isValid) {\n      validatorMetrics.errorCount++;\n    }\n    \n    validatorMetrics.successRate = \n      ((validatorMetrics.executions - validatorMetrics.errorCount) / validatorMetrics.executions) * 100;\n  }\n\n  private recordMemoryUsage(): void {\n    if (typeof process !== 'undefined' && process.memoryUsage) {\n      const memUsage = process.memoryUsage();\n      const currentMB = memUsage.heapUsed / 1024 / 1024;\n      \n      this.metrics.memoryUsage.current = currentMB;\n      this.metrics.memoryUsage.peak = Math.max(this.metrics.memoryUsage.peak, currentMB);\n      \n      this.memorySnapshots.push({ timestamp: new Date(), usage: currentMB });\n      \n      // Calculate average\n      const sum = this.memorySnapshots.reduce((a, b) => a + b.usage, 0);\n      this.metrics.memoryUsage.average = sum / this.memorySnapshots.length;\n    }\n  }\n\n  private updateDerivedMetrics(): void {\n    // Update validations per second\n    const oneSecondAgo = new Date(Date.now() - 1000);\n    const recentCount = this.recentValidations.filter(v => v.timestamp > oneSecondAgo).length;\n    this.metrics.validationsPerSecond = recentCount;\n\n    // Update percentiles if enabled\n    if (this.config.percentileTracking && this.validationTimes.length > 0) {\n      this.calculatePercentiles();\n    }\n  }\n\n  private calculatePercentiles(): void {\n    const sorted = [...this.validationTimes].sort((a, b) => a - b);\n    const len = sorted.length;\n\n    this.metrics.percentiles = {\n      p50: this.getPercentile(sorted, 0.5),\n      p75: this.getPercentile(sorted, 0.75),\n      p90: this.getPercentile(sorted, 0.9),\n      p95: this.getPercentile(sorted, 0.95),\n      p99: this.getPercentile(sorted, 0.99)\n    };\n  }\n\n  private getPercentile(sortedArray: number[], percentile: number): number {\n    const index = Math.ceil(sortedArray.length * percentile) - 1;\n    return sortedArray[Math.max(0, index)] || 0;\n  }\n\n  private addTimeSeriesPoint(): void {\n    const now = new Date();\n    const oneMinuteAgo = new Date(now.getTime() - 60000);\n    const recentValidations = this.recentValidations.filter(v => v.timestamp > oneMinuteAgo);\n    \n    const errorCount = recentValidations.filter(v => !v.success).length;\n    const errorRate = recentValidations.length > 0 ? (errorCount / recentValidations.length) * 100 : 0;\n\n    const point: TimeSeries = {\n      timestamp: now,\n      validationsPerSecond: this.metrics.validationsPerSecond,\n      averageResponseTime: this.metrics.averageValidationTime,\n      errorRate,\n      memoryUsage: this.metrics.memoryUsage.current\n    };\n\n    this.metrics.timeSeries.push(point);\n\n    // Keep only the last N points\n    if (this.metrics.timeSeries.length > this.config.maxTimeSeriesPoints) {\n      this.metrics.timeSeries = this.metrics.timeSeries.slice(-this.config.maxTimeSeriesPoints);\n    }\n  }\n\n  private cleanupOldData(): void {\n    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\n    \n    // Keep only recent validations (last 5 minutes)\n    this.recentValidations = this.recentValidations.filter(v => v.timestamp > fiveMinutesAgo);\n    \n    // Keep only recent memory snapshots\n    this.memorySnapshots = this.memorySnapshots.filter(s => s.timestamp > fiveMinutesAgo);\n    \n    // Keep only recent validation times (last 1000 entries)\n    if (this.validationTimes.length > 1000) {\n      this.validationTimes = this.validationTimes.slice(-1000);\n    }\n  }\n\n  private calculateSuccessRate(): number {\n    return this.metrics.totalValidations > 0 ? \n      (this.metrics.successfulValidations / this.metrics.totalValidations) * 100 : 0;\n  }\n\n  private getTopErrors(count: number): Array<{ type: string; count: number; percentage: number }> {\n    const totalErrors = Array.from(this.metrics.errorDistribution.values()).reduce((a, b) => a + b, 0);\n    \n    return Array.from(this.metrics.errorDistribution.entries())\n      .map(([type, count]) => ({\n        type,\n        count,\n        percentage: totalErrors > 0 ? (count / totalErrors) * 100 : 0\n      }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, count);\n  }\n\n  private calculateMetricsForValidations(validations: Array<{ timestamp: Date; duration: number; success: boolean }>): ValidationPerformanceMetrics {\n    // Implementation for calculating metrics for a specific set of validations\n    // This is a simplified version - full implementation would calculate all metrics\n    const total = validations.length;\n    const successful = validations.filter(v => v.success).length;\n    const failed = total - successful;\n    \n    const durations = validations.map(v => v.duration);\n    const avgTime = durations.length > 0 ? durations.reduce((a, b) => a + b, 0) / durations.length : 0;\n    \n    return {\n      ...this.initializeMetrics(),\n      totalValidations: total,\n      successfulValidations: successful,\n      failedValidations: failed,\n      averageValidationTime: avgTime,\n      peakValidationTime: Math.max(...durations, 0),\n      minValidationTime: Math.min(...durations, Infinity)\n    };\n  }\n}\n\n/**\n * Global metrics dashboard instance\n */\nexport const globalValidationDashboard = new ValidationMetricsDashboard();\n\n/**\n * Create a new metrics dashboard with custom configuration\n */\nexport function createValidationDashboard(config?: Partial<DashboardConfig>): ValidationMetricsDashboard {\n  return new ValidationMetricsDashboard(config);\n}\n\n/**\n * Utility function to format metrics for console display\n */\nexport function formatMetricsForConsole(metrics: ValidationPerformanceMetrics): string {\n  const lines = [\n    '=== Validation Metrics Dashboard ===',\n    `Total Validations: ${metrics.totalValidations}`,\n    `Success Rate: ${((metrics.successfulValidations / metrics.totalValidations) * 100).toFixed(2)}%`,\n    `Average Time: ${metrics.averageValidationTime.toFixed(2)}ms`,\n    `Peak Time: ${metrics.peakValidationTime.toFixed(2)}ms`,\n    `Validations/sec: ${metrics.validationsPerSecond}`,\n    `Cache Hit Rate: ${metrics.cacheHitRate.toFixed(2)}%`,\n    `Memory Usage: ${metrics.memoryUsage.current.toFixed(2)}MB`,\n    '================================='\n  ];\n  \n  return lines.join('\\n');\n}\n","/**\n * CREB Data Validation Module\n * \n * Provides comprehensive validation capabilities for chemistry data:\n * - Composable validator architecture\n * - Async validation support with dependency management\n * - Performance optimization with caching and parallelization\n * - Chemical-specific validation capabilities\n * \n * @version 1.0.0\n * @author CREB Team\n */\n\n// Core Pipeline and Types\nexport * from './types';\nexport { ValidationPipeline } from './ValidationPipeline';\n\n// Import types for use in factory functions\nimport { \n  ValidationResult,\n  ValidationError,\n  ValidationContext,\n  ChemicalFormulaConfig,\n  ThermodynamicProperties,\n  ValidationSeverity\n} from './types';\nimport { ValidationPipeline } from './ValidationPipeline';\nimport { ChemicalFormulaValidator } from './validators/ChemicalFormulaValidator';\nimport { ThermodynamicPropertiesValidator } from './validators/ThermodynamicPropertiesValidator';\n\n// Validators\nexport { \n  BaseValidator,\n  CompositeValidator,\n  FluentValidationBuilder,\n  ChemistryValidator,\n  AsyncValidator,\n  createValidator,\n  createCompositeValidator,\n  createChemistryValidator\n} from './validators/BaseValidator';\n\nexport { ChemicalFormulaValidator } from './validators/ChemicalFormulaValidator';\nexport { ThermodynamicPropertiesValidator } from './validators/ThermodynamicPropertiesValidator';\n\n// Rules\nexport {\n  BaseRule,\n  SyncRule,\n  AsyncRule,\n  CompositeRule,\n  ConditionalRule,\n  RangeRule,\n  PatternRule,\n  createRangeRule,\n  createPatternRule,\n  createAndRule,\n  createOrRule,\n  createConditionalRule\n} from './rules/BaseRule';\n\nexport {\n  ChemicalFormulaFormatRule,\n  ValidElementSymbolsRule,\n  MolecularWeightConsistencyRule,\n  GHSClassificationRule,\n  FlashPointValidationRule,\n  PhaseTransitionConsistencyRule,\n  CASNumberValidationRule,\n  createChemicalFormulaFormatRule,\n  createValidElementSymbolsRule,\n  createMolecularWeightConsistencyRule,\n  createGHSClassificationRule,\n  createFlashPointValidationRule,\n  createPhaseTransitionConsistencyRule,\n  createCASNumberValidationRule,\n  getChemicalFormulaRules,\n  getSafetyDataRules,\n  getCompoundValidationRules\n} from './rules/ChemistryRules';\n\n// Metrics and Dashboard\nexport {\n  ValidationMetricsDashboard,\n  createValidationDashboard,\n  globalValidationDashboard,\n  formatMetricsForConsole\n} from './metrics/ValidationMetricsDashboard';\n\n/**\n * Creates a new validation pipeline with common defaults\n */\nexport function createValidationPipeline(): ValidationPipeline {\n  return new ValidationPipeline({\n    timeout: 30000,\n    enableCaching: true,\n    cacheTTL: 300000,\n    maxCacheSize: 1000,\n    continueOnError: true,\n    parallel: {\n      enabled: true,\n      maxConcurrency: 10\n    },\n    monitoring: {\n      enabled: true,\n      sampleRate: 1.0\n    }\n  });\n}\n\n/**\n * Creates a performance-optimized validation pipeline\n */\nexport function createFastValidationPipeline(): ValidationPipeline {\n  return new ValidationPipeline({\n    timeout: 10000,\n    enableCaching: true,\n    cacheTTL: 600000,\n    maxCacheSize: 5000,\n    continueOnError: false,\n    parallel: {\n      enabled: true,\n      maxConcurrency: 20\n    },\n    monitoring: {\n      enabled: true,\n      sampleRate: 0.1\n    }\n  });\n}\n\n/**\n * Creates a thorough validation pipeline for comprehensive checks\n */\nexport function createThoroughValidationPipeline(): ValidationPipeline {\n  return new ValidationPipeline({\n    timeout: 120000,\n    enableCaching: false,\n    cacheTTL: 0,\n    maxCacheSize: 0,\n    continueOnError: true,\n    parallel: {\n      enabled: false,\n      maxConcurrency: 1\n    },\n    monitoring: {\n      enabled: true,\n      sampleRate: 1.0\n    }\n  });\n}\n\n/**\n * Quick validation for chemical formulas\n */\nexport async function validateChemicalFormula(\n  formula: string,\n  config?: Partial<ChemicalFormulaConfig>\n): Promise<ValidationResult> {\n  const validator = new ChemicalFormulaValidator(undefined, config);\n  const context: ValidationContext = {\n    path: ['formula'],\n    root: { formula },\n    config: {\n      enabled: true,\n      priority: 1,\n      cacheable: true\n    },\n    shared: new Map(),\n    metrics: {\n      duration: 0,\n      rulesExecuted: 0,\n      validatorsUsed: 1,\n      cacheStats: {\n        hits: 0,\n        misses: 0,\n        hitRate: 0\n      }\n    }\n  };\n  \n  return validator.validate(formula, context);\n}\n\n/**\n * Quick validation for thermodynamic properties\n */\nexport async function validateThermodynamicProperties(\n  properties: ThermodynamicProperties\n): Promise<ValidationResult> {\n  const validator = new ThermodynamicPropertiesValidator();\n  const context: ValidationContext = {\n    path: ['thermodynamics'],\n    root: properties,\n    config: {\n      enabled: true,\n      priority: 1,\n      cacheable: true\n    },\n    shared: new Map(),\n    metrics: {\n      duration: 0,\n      rulesExecuted: 0,\n      validatorsUsed: 1,\n      cacheStats: {\n        hits: 0,\n        misses: 0,\n        hitRate: 0\n      }\n    }\n  };\n  \n  return validator.validate(properties, context);\n}\n\n/**\n * Formats validation errors for display\n */\nexport function formatValidationErrors(errors: ValidationError[]): string {\n  if (errors.length === 0) {\n    return 'No validation errors found.';\n  }\n  \n  return errors.map((error, index) => {\n    const prefix = `${index + 1}. `;\n    const location = error.path ? ` (at ${error.path.join('.')})` : '';\n    const code = error.code ? ` [${error.code}]` : '';\n    const suggestions = error.suggestions.length > 0 ? `\\n   Suggestions: ${error.suggestions.join(', ')}` : '';\n    \n    return `${prefix}${error.severity.toUpperCase()}: ${error.message}${location}${code}${suggestions}`;\n  }).join('\\n');\n}\n\n/**\n * Creates a summary of validation results\n */\nexport function summarizeValidationResult(result: ValidationResult): string {\n  const { isValid, errors, warnings } = result;\n  \n  const status = isValid ? 'PASSED' : 'FAILED';\n  const errorCount = errors.length;\n  const warningCount = warnings.length;\n  \n  let summary = `Validation ${status}\\n`;\n  \n  if (errorCount > 0) {\n    summary += `Errors: ${errorCount}\\n`;\n  }\n  \n  if (warningCount > 0) {\n    summary += `Warnings: ${warningCount}\\n`;\n  }\n  \n  if (errorCount === 0 && warningCount === 0) {\n    summary += 'No issues found.';\n  }\n  \n  return summary;\n}\n\n/**\n * Utility to check if a validation result has only warnings\n */\nexport function hasOnlyWarnings(result: ValidationResult): boolean {\n  return result.errors.length === 0 && result.warnings.length > 0;\n}\n\n/**\n * Utility to get the most severe error from a validation result\n */\nexport function getMostSevereError(result: ValidationResult): ValidationError | null {\n  if (result.errors.length === 0) {\n    return null;\n  }\n  \n  const errorsByPriority = result.errors.sort((a, b) => {\n    const priorities = { \n      [ValidationSeverity.CRITICAL]: 4,\n      [ValidationSeverity.ERROR]: 3, \n      [ValidationSeverity.WARNING]: 2, \n      [ValidationSeverity.INFO]: 1 \n    };\n    return priorities[b.severity] - priorities[a.severity];\n  });\n  \n  return errorsByPriority[0];\n}\n","/**\n * Enhanced Chemical Equation Balancer with PubChem integration\n * Provides compound validation, molecular weight verification, and enriched data\n */\n\nimport { ChemicalEquationBalancer } from './balancer';\nimport { BalancedEquation } from './types';\nimport { \n  ComputationError, \n  ValidationError, \n  ErrorCategory, \n  ErrorSeverity,\n  ErrorUtils \n} from './core/errors/CREBError';\nimport { Injectable } from './core/decorators/Injectable';\nimport { AdvancedCache } from './performance/cache/AdvancedCache';\nimport { validateChemicalFormula, ValidationResult } from './data/validation';\n\n// Import type definitions for PubChem integration\n// Note: In production, this would import from 'creb-pubchem-js'\ninterface PubChemCompound {\n  cid: number;\n  molecularWeight: number | null;\n  molecularFormula: string | null;\n  iupacName: string | null;\n  isomericSmiles?: string | null;\n}\n\nexport interface EnhancedBalancedEquation extends BalancedEquation {\n  compoundData?: Record<string, CompoundInfo>;\n  validation?: {\n    massBalanced: boolean;\n    chargeBalanced: boolean;\n    warnings: string[];\n    formulaValidation?: Record<string, ValidationResult>;\n  };\n  safetyWarnings?: SafetyWarning[];\n}\n\nexport interface SafetyWarning {\n  compound: string;\n  hazard: string;\n  severity: 'low' | 'medium' | 'high' | 'extreme';\n  ghsClassification?: string;\n  precautionaryStatements?: string[];\n}\n\nexport interface CompoundInfo {\n  name: string;\n  cid?: number;\n  molecularWeight?: number;\n  molecularFormula?: string;\n  iupacName?: string;\n  canonicalSmiles?: string;\n  isValid: boolean;\n  error?: string;\n  pubchemData?: PubChemCompound;\n  originalName?: string; // For name-based balancing\n  safetyInfo?: SafetyInfo;\n}\n\nexport interface SafetyInfo {\n  ghsClassifications: string[];\n  hazardStatements: string[];\n  precautionaryStatements: string[];\n  physicalHazards: string[];\n  healthHazards: string[];\n  environmentalHazards: string[];\n  signalWord?: 'Danger' | 'Warning';\n}\n\n@Injectable()\nexport class EnhancedChemicalEquationBalancer extends ChemicalEquationBalancer {\n  private compoundCache = new AdvancedCache<CompoundInfo>({\n    maxSize: 1000,\n    defaultTtl: 7200000, // 2 hours\n    evictionStrategy: 'lru'\n  });\n\n  /**\n   * Balance equation with safety and hazard information\n   */\n  async balanceWithSafety(equation: string): Promise<EnhancedBalancedEquation> {\n    // First get the enhanced balance with PubChem data\n    const enhanced = await this.balanceWithPubChemData(equation);\n    \n    // Add safety information for each compound\n    const safetyWarnings: SafetyWarning[] = [];\n    \n    if (enhanced.compoundData) {\n      for (const [species, compoundInfo] of Object.entries(enhanced.compoundData)) {\n        if (compoundInfo.isValid) {\n          try {\n            // Get safety information for the compound\n            const safetyInfo = await this.getSafetyInfo(compoundInfo);\n            compoundInfo.safetyInfo = safetyInfo;\n            \n            // Generate safety warnings\n            const warnings = this.generateSafetyWarnings(species, safetyInfo);\n            safetyWarnings.push(...warnings);\n          } catch (error) {\n            enhanced.validation?.warnings.push(`Could not retrieve safety data for ${species}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n          }\n        }\n      }\n    }\n    \n    // Add safety warnings to the result\n    enhanced.safetyWarnings = safetyWarnings;\n    \n    return enhanced;\n  }\n\n  /**\n   * Get safety information for a compound\n   */\n  private async getSafetyInfo(compoundInfo: CompoundInfo): Promise<SafetyInfo> {\n    // For now, use a knowledge base of common chemical hazards\n    // In a full implementation, this would query PubChem's safety data\n    const safetyKnowledgeBase = this.getKnownSafetyInfo();\n    \n    const formula = compoundInfo.molecularFormula;\n    const name = compoundInfo.iupacName?.toLowerCase() || compoundInfo.name.toLowerCase();\n    \n    // Check known safety data\n    let safetyInfo = safetyKnowledgeBase[formula || ''] || \n                     safetyKnowledgeBase[name] ||\n                     safetyKnowledgeBase[compoundInfo.name.toLowerCase()];\n    \n    if (!safetyInfo) {\n      // Try to infer basic safety information from chemical properties\n      safetyInfo = this.inferSafetyFromProperties(compoundInfo);\n    }\n    \n    return safetyInfo || {\n      ghsClassifications: [],\n      hazardStatements: [],\n      precautionaryStatements: [],\n      physicalHazards: [],\n      healthHazards: [],\n      environmentalHazards: []\n    };\n  }\n\n  /**\n   * Generate safety warnings from safety information\n   */\n  private generateSafetyWarnings(compound: string, safetyInfo: SafetyInfo): SafetyWarning[] {\n    const warnings: SafetyWarning[] = [];\n    \n    // Process health hazards\n    for (const hazard of safetyInfo.healthHazards) {\n      warnings.push({\n        compound,\n        hazard,\n        severity: this.determineSeverity(hazard),\n        ghsClassification: safetyInfo.ghsClassifications.join(', ') || undefined,\n        precautionaryStatements: safetyInfo.precautionaryStatements.length > 0 ? safetyInfo.precautionaryStatements : undefined\n      });\n    }\n    \n    // Process physical hazards\n    for (const hazard of safetyInfo.physicalHazards) {\n      warnings.push({\n        compound,\n        hazard,\n        severity: this.determineSeverity(hazard),\n        ghsClassification: safetyInfo.ghsClassifications.join(', ') || undefined\n      });\n    }\n    \n    // Process environmental hazards\n    for (const hazard of safetyInfo.environmentalHazards) {\n      warnings.push({\n        compound,\n        hazard,\n        severity: this.determineSeverity(hazard),\n        ghsClassification: safetyInfo.ghsClassifications.join(', ') || undefined\n      });\n    }\n    \n    return warnings;\n  }\n\n  /**\n   * Determine severity level from hazard description\n   */\n  private determineSeverity(hazard: string): 'low' | 'medium' | 'high' | 'extreme' {\n    const hazardLower = hazard.toLowerCase();\n    \n    if (hazardLower.includes('fatal') || hazardLower.includes('death') || hazardLower.includes('severe')) {\n      return 'extreme';\n    }\n    if (hazardLower.includes('serious') || hazardLower.includes('burn') || hazardLower.includes('corrosive')) {\n      return 'high';\n    }\n    if (hazardLower.includes('harmful') || hazardLower.includes('irritant') || hazardLower.includes('toxic')) {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  /**\n   * Knowledge base of known chemical safety information\n   */\n  private getKnownSafetyInfo(): Record<string, SafetyInfo> {\n    return {\n      'H2SO4': {\n        ghsClassifications: ['H314', 'H290'],\n        hazardStatements: ['Causes severe skin burns and eye damage', 'May be corrosive to metals'],\n        precautionaryStatements: ['Wear protective gloves/protective clothing/eye protection/face protection', 'Do not breathe dust/fume/gas/mist/vapours/spray'],\n        physicalHazards: ['Corrosive to metals'],\n        healthHazards: ['Causes severe skin burns and eye damage'],\n        environmentalHazards: [],\n        signalWord: 'Danger'\n      },\n      'sulfuric acid': {\n        ghsClassifications: ['H314', 'H290'],\n        hazardStatements: ['Causes severe skin burns and eye damage', 'May be corrosive to metals'],\n        precautionaryStatements: ['Wear protective gloves/protective clothing/eye protection/face protection', 'Do not breathe dust/fume/gas/mist/vapours/spray'],\n        physicalHazards: ['Corrosive to metals'],\n        healthHazards: ['Causes severe skin burns and eye damage'],\n        environmentalHazards: [],\n        signalWord: 'Danger'\n      },\n      'NaOH': {\n        ghsClassifications: ['H314', 'H290'],\n        hazardStatements: ['Causes severe skin burns and eye damage', 'May be corrosive to metals'],\n        precautionaryStatements: ['Wear protective gloves/protective clothing/eye protection/face protection', 'Do not breathe dust/fume/gas/mist/vapours/spray'],\n        physicalHazards: ['Corrosive to metals'],\n        healthHazards: ['Causes severe skin burns and eye damage'],\n        environmentalHazards: [],\n        signalWord: 'Danger'\n      },\n      'sodium hydroxide': {\n        ghsClassifications: ['H314', 'H290'],\n        hazardStatements: ['Causes severe skin burns and eye damage', 'May be corrosive to metals'],\n        precautionaryStatements: ['Wear protective gloves/protective clothing/eye protection/face protection', 'Do not breathe dust/fume/gas/mist/vapours/spray'],\n        physicalHazards: ['Corrosive to metals'],\n        healthHazards: ['Causes severe skin burns and eye damage'],\n        environmentalHazards: [],\n        signalWord: 'Danger'\n      },\n      'HCl': {\n        ghsClassifications: ['H314', 'H335'],\n        hazardStatements: ['Causes severe skin burns and eye damage', 'May cause respiratory irritation'],\n        precautionaryStatements: ['Wear protective gloves/protective clothing/eye protection/face protection', 'Use only outdoors or in a well-ventilated area'],\n        physicalHazards: ['Corrosive to metals'],\n        healthHazards: ['Causes severe skin burns and eye damage', 'May cause respiratory irritation'],\n        environmentalHazards: [],\n        signalWord: 'Danger'\n      },\n      'hydrochloric acid': {\n        ghsClassifications: ['H314', 'H335'],\n        hazardStatements: ['Causes severe skin burns and eye damage', 'May cause respiratory irritation'],\n        precautionaryStatements: ['Wear protective gloves/protective clothing/eye protection/face protection', 'Use only outdoors or in a well-ventilated area'],\n        physicalHazards: ['Corrosive to metals'],\n        healthHazards: ['Causes severe skin burns and eye damage', 'May cause respiratory irritation'],\n        environmentalHazards: [],\n        signalWord: 'Danger'\n      },\n      'NH3': {\n        ghsClassifications: ['H221', 'H314', 'H400'],\n        hazardStatements: ['Flammable gas', 'Causes severe skin burns and eye damage', 'Very toxic to aquatic life'],\n        precautionaryStatements: ['Keep away from heat/sparks/open flames/hot surfaces', 'Wear protective gloves/protective clothing/eye protection/face protection'],\n        physicalHazards: ['Flammable gas'],\n        healthHazards: ['Causes severe skin burns and eye damage'],\n        environmentalHazards: ['Very toxic to aquatic life'],\n        signalWord: 'Danger'\n      },\n      'ammonia': {\n        ghsClassifications: ['H221', 'H314', 'H400'],\n        hazardStatements: ['Flammable gas', 'Causes severe skin burns and eye damage', 'Very toxic to aquatic life'],\n        precautionaryStatements: ['Keep away from heat/sparks/open flames/hot surfaces', 'Wear protective gloves/protective clothing/eye protection/face protection'],\n        physicalHazards: ['Flammable gas'],\n        healthHazards: ['Causes severe skin burns and eye damage'],\n        environmentalHazards: ['Very toxic to aquatic life'],\n        signalWord: 'Danger'\n      },\n      'H2O': {\n        ghsClassifications: [],\n        hazardStatements: [],\n        precautionaryStatements: [],\n        physicalHazards: [],\n        healthHazards: [],\n        environmentalHazards: []\n      },\n      'water': {\n        ghsClassifications: [],\n        hazardStatements: [],\n        precautionaryStatements: [],\n        physicalHazards: [],\n        healthHazards: [],\n        environmentalHazards: []\n      }\n    };\n  }\n\n  /**\n   * Infer basic safety information from compound properties\n   */\n  private inferSafetyFromProperties(compoundInfo: CompoundInfo): SafetyInfo {\n    const safetyInfo: SafetyInfo = {\n      ghsClassifications: [],\n      hazardStatements: [],\n      precautionaryStatements: ['Handle with care', 'Use proper ventilation'],\n      physicalHazards: [],\n      healthHazards: [],\n      environmentalHazards: []\n    };\n    \n    const formula = compoundInfo.molecularFormula || '';\n    const name = compoundInfo.name.toLowerCase();\n    \n    // Infer based on common patterns\n    if (formula.includes('O') && formula.includes('H') && (name.includes('acid') || formula.match(/H\\d*[A-Z]/))) {\n      safetyInfo.healthHazards.push('May cause skin and eye irritation');\n      safetyInfo.precautionaryStatements.push('Avoid contact with skin and eyes');\n    }\n    \n    if (name.includes('chloride') || formula.includes('Cl')) {\n      safetyInfo.healthHazards.push('May be harmful if inhaled');\n      safetyInfo.precautionaryStatements.push('Use in well-ventilated area');\n    }\n    \n    if (name.includes('sulfate') || name.includes('nitrate')) {\n      safetyInfo.healthHazards.push('May cause irritation');\n    }\n    \n    // Default precautionary statement for unknown compounds\n    if (safetyInfo.healthHazards.length === 0 && formula !== 'H2O') {\n      safetyInfo.healthHazards.push('Safety data not available - handle with caution');\n    }\n    \n    return safetyInfo;\n  }\n\n  /**\n   * Balance equation using common chemical names\n   * Converts compound names to formulas using PubChem, then balances\n   */\n  async balanceByName(commonNameEquation: string): Promise<EnhancedBalancedEquation> {\n    try {\n      // Step 1: Parse equation to extract compound names\n      const { reactantNames, productNames } = this.parseEquationNames(commonNameEquation);\n      \n      // Step 2: Resolve each compound name to chemical formula\n      const nameToFormulaMap: Record<string, string> = {};\n      const compoundDataMap: Record<string, CompoundInfo> = {};\n      \n      const allNames = [...reactantNames, ...productNames];\n      \n      for (const name of allNames) {\n        const compoundInfo = await this.getCompoundInfo(name);\n        compoundDataMap[name] = compoundInfo;\n        \n        if (compoundInfo.isValid && compoundInfo.molecularFormula) {\n          nameToFormulaMap[name] = compoundInfo.molecularFormula;\n        } else {\n          // Try common name alternatives\n          const alternatives = this.getCommonNames(name);\n          let found = false;\n          \n          for (const alt of alternatives) {\n            const altInfo = await this.getCompoundInfo(alt);\n            if (altInfo.isValid && altInfo.molecularFormula) {\n              nameToFormulaMap[name] = altInfo.molecularFormula;\n              compoundDataMap[name] = altInfo;\n              found = true;\n              break;\n            }\n          }\n          \n          if (!found) {\n            throw new ComputationError(\n              `Could not resolve compound name: \"${name}\". Try using the chemical formula instead.`,\n              { compoundName: name, operation: 'compound_resolution' }\n            );\n          }\n        }\n      }\n      \n      // Step 3: Reconstruct equation with chemical formulas\n      const formulaEquation = this.reconstructEquationWithFormulas(\n        commonNameEquation, nameToFormulaMap\n      );\n      \n      // Step 4: Balance the reconstructed equation\n      const balanced = this.balanceDetailed(formulaEquation);\n      \n      // Step 5: Create enhanced result with both names and formulas\n      const enhanced: EnhancedBalancedEquation = {\n        ...balanced,\n        compoundData: {},\n        validation: {\n          massBalanced: true,\n          chargeBalanced: true,\n          warnings: []\n        }\n      };\n      \n      // Add compound data for both original names and formulas\n      for (const [name, info] of Object.entries(compoundDataMap)) {\n        if (info.molecularFormula && balanced.reactants.includes(info.molecularFormula)) {\n          enhanced.compoundData![info.molecularFormula] = {\n            ...info,\n            name: info.molecularFormula, // Use formula as key\n            originalName: name // Keep original name\n          };\n        }\n        if (info.molecularFormula && balanced.products.includes(info.molecularFormula)) {\n          enhanced.compoundData![info.molecularFormula] = {\n            ...info,\n            name: info.molecularFormula,\n            originalName: name\n          };\n        }\n      }\n      \n      // Validate mass balance using PubChem molecular weights\n      try {\n        const massValidation = this.validateMassBalance(balanced, enhanced.compoundData!);\n        enhanced.validation!.massBalanced = massValidation.balanced;\n        if (!massValidation.balanced) {\n          enhanced.validation!.warnings.push(`Mass balance discrepancy: ${massValidation.discrepancy.toFixed(4)} g/mol`);\n        }\n      } catch (error) {\n        enhanced.validation!.warnings.push(`Could not validate mass balance: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n      \n      return enhanced;\n      \n    } catch (error) {\n      throw new ComputationError(\n        `Failed to balance equation by name: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        { equation: commonNameEquation, operation: 'balance_by_name' }\n      );\n    }\n  }\n\n  /**\n   * Balance equation with PubChem data enrichment\n   */\n  async balanceWithPubChemData(equation: string): Promise<EnhancedBalancedEquation> {\n    // First balance the equation normally\n    const balanced = this.balanceDetailed(equation);\n    \n    // Enhance with PubChem data\n    const enhanced: EnhancedBalancedEquation = {\n      ...balanced,\n      compoundData: {},\n      validation: {\n        massBalanced: true,\n        chargeBalanced: true,\n        warnings: [],\n        formulaValidation: {}\n      }\n    };\n\n    // Get all unique species from the equation\n    const allSpecies = [...new Set([...balanced.reactants, ...balanced.products])];\n    \n    // Validate chemical formulas using the validation pipeline\n    for (const species of allSpecies) {\n      try {\n        const formulaValidation = await validateChemicalFormula(species);\n        enhanced.validation!.formulaValidation![species] = formulaValidation;\n        \n        if (!formulaValidation.isValid) {\n          enhanced.validation!.warnings.push(`Invalid formula ${species}: ${formulaValidation.errors.map(e => e.message).join(', ')}`);\n        }\n      } catch (error) {\n        enhanced.validation!.warnings.push(`Formula validation failed for ${species}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n    \n    // Fetch PubChem data for each compound\n    for (const species of allSpecies) {\n      try {\n        const compoundInfo = await this.getCompoundInfo(species);\n        enhanced.compoundData![species] = compoundInfo;\n        \n        if (!compoundInfo.isValid && compoundInfo.error) {\n          enhanced.validation!.warnings.push(`${species}: ${compoundInfo.error}`);\n        }\n      } catch (error) {\n        enhanced.validation!.warnings.push(`Failed to fetch data for ${species}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n\n    // Validate mass balance using PubChem molecular weights\n    try {\n      const massValidation = this.validateMassBalance(balanced, enhanced.compoundData!);\n      enhanced.validation!.massBalanced = massValidation.balanced;\n      if (!massValidation.balanced) {\n        enhanced.validation!.warnings.push(`Mass balance discrepancy: ${massValidation.discrepancy.toFixed(4)} g/mol`);\n      }\n    } catch (error) {\n      enhanced.validation!.warnings.push(`Could not validate mass balance: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    return enhanced;\n  }\n\n  /**\n   * Get compound information from PubChem\n   */\n  async getCompoundInfo(compoundName: string): Promise<CompoundInfo> {\n    // Check cache first\n    const cached = await this.compoundCache.get(compoundName);\n    if (cached.hit && cached.value) {\n      return cached.value;\n    }\n\n    const result: CompoundInfo = {\n      name: compoundName,\n      isValid: false\n    };\n\n    try {\n      // Dynamic import of PubChem functionality\n      const pubchemModule = await this.loadPubChemModule();\n      if (!pubchemModule) {\n        result.error = 'PubChem module not available. Install creb-pubchem-js for enhanced functionality.';\n        await this.compoundCache.set(compoundName, result);\n        return result;\n      }\n\n      // Try to find compound by name\n      let compounds: PubChemCompound[] = [];\n      \n      // First try exact name match\n      try {\n        compounds = await pubchemModule.fromName(compoundName);\n      } catch (error) {\n        // If name search fails and it looks like a formula, try CID search\n        if (this.isLikelyFormula(compoundName)) {\n          try {\n            // For simple cases, try to find by common names\n            const commonNames = this.getCommonNames(compoundName);\n            for (const name of commonNames) {\n              try {\n                compounds = await pubchemModule.fromName(name);\n                if (compounds.length > 0) break;\n              } catch {\n                // Continue to next name\n              }\n            }\n          } catch (formulaError) {\n            result.error = `Not found by name or common formula names: ${error instanceof Error ? error.message : 'Unknown error'}`;\n          }\n        } else {\n          result.error = `Not found by name: ${error instanceof Error ? error.message : 'Unknown error'}`;\n        }\n      }\n\n      if (compounds.length > 0) {\n        const compound = compounds[0]; // Use first match\n        \n        result.cid = compound.cid;\n        result.molecularWeight = compound.molecularWeight || undefined;\n        result.molecularFormula = compound.molecularFormula || undefined;\n        result.iupacName = compound.iupacName || undefined;\n        result.canonicalSmiles = compound.isomericSmiles || undefined;\n        result.isValid = true;\n        result.pubchemData = compound;\n      } else if (!result.error) {\n        result.error = 'No compounds found';\n      }\n    } catch (error) {\n      result.error = `Search failed: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    }\n\n    // Cache the result\n    await this.compoundCache.set(compoundName, result);\n    return result;\n  }\n\n  /**\n   * Dynamically load PubChem module if available\n   */\n  private async loadPubChemModule(): Promise<any> {\n    try {\n      // Try to import the PubChem module\n      // In browser environment, check for global PubChemJS\n      if (typeof globalThis !== 'undefined' && (globalThis as any).PubChemJS) {\n        return (globalThis as any).PubChemJS.Compound;\n      }\n      \n      // Also check window for browser compatibility\n      if (typeof globalThis !== 'undefined' && typeof (globalThis as any).window !== 'undefined' && (globalThis as any).window.PubChemJS) {\n        return (globalThis as any).window.PubChemJS.Compound;\n      }\n      \n      // Legacy check for CREBPubChem (for backwards compatibility)\n      if (typeof globalThis !== 'undefined' && (globalThis as any).CREBPubChem) {\n        return (globalThis as any).CREBPubChem.Compound;\n      }\n      \n      // In Node.js environment, try dynamic import with error handling\n      try {\n        // Use eval to avoid TypeScript compile-time module resolution\n        const importFn = new Function('specifier', 'return import(specifier)');\n        const pubchemModule = await importFn('creb-pubchem-js');\n        return pubchemModule.Compound;\n      } catch (importError) {\n        // Module not available\n        return null;\n      }\n    } catch (error) {\n      // PubChem module not available\n      return null;\n    }\n  }\n\n  /**\n   * Parse equation with compound names to extract reactant and product names\n   */\n  private parseEquationNames(equation: string): { reactantNames: string[], productNames: string[] } {\n    // Clean up the equation\n    const cleanEquation = equation.trim().replace(/\\s+/g, ' ');\n    \n    // Split by = or -> or →\n    const parts = cleanEquation.split(/\\s*(?:=|->|→)\\s*/);\n    if (parts.length !== 2) {\n      throw new ValidationError(\n        'Invalid equation format. Expected format: \"reactants = products\"',\n        { equation: cleanEquation, operation: 'parse_equation' }\n      );\n    }\n    \n    const [reactantsPart, productsPart] = parts;\n    \n    // Parse reactants and products (split by + and clean up)\n    const reactantNames = reactantsPart.split(/\\s*\\+\\s*/)\n      .map(name => name.trim())\n      .filter(name => name.length > 0)\n      .map(name => this.cleanCompoundName(name));\n    \n    const productNames = productsPart.split(/\\s*\\+\\s*/)\n      .map(name => name.trim())\n      .filter(name => name.length > 0)\n      .map(name => this.cleanCompoundName(name));\n    \n    if (reactantNames.length === 0 || productNames.length === 0) {\n      throw new ValidationError(\n        'Invalid equation: must have at least one reactant and one product',\n        { reactantCount: reactantNames.length, productCount: productNames.length, operation: 'parse_equation' }\n      );\n    }\n    \n    return { reactantNames, productNames };\n  }\n\n  /**\n   * Clean compound name by removing coefficients and standardizing format\n   */\n  private cleanCompoundName(name: string): string {\n    // Remove leading numbers (coefficients)\n    let cleaned = name.replace(/^\\d+\\s*/, '').trim();\n    \n    // Handle common variations\n    cleaned = cleaned.toLowerCase().trim();\n    \n    // Standardize common names\n    const standardNames: Record<string, string> = {\n      'water': 'water',\n      'h2o': 'water',\n      'sulfuric acid': 'sulfuric acid',\n      'sulphuric acid': 'sulfuric acid',\n      'sodium hydroxide': 'sodium hydroxide',\n      'caustic soda': 'sodium hydroxide',\n      'sodium sulfate': 'sodium sulfate',\n      'sodium sulphate': 'sodium sulfate',\n      'hydrochloric acid': 'hydrochloric acid',\n      'muriatic acid': 'hydrochloric acid',\n      'ammonia': 'ammonia',\n      'carbon dioxide': 'carbon dioxide',\n      'glucose': 'glucose',\n      'ethanol': 'ethanol',\n      'ethyl alcohol': 'ethanol',\n      'methane': 'methane',\n      'oxygen': 'oxygen',\n      'hydrogen': 'hydrogen',\n      'nitrogen': 'nitrogen'\n    };\n    \n    return standardNames[cleaned] || cleaned;\n  }\n\n  /**\n   * Reconstruct equation using chemical formulas instead of names\n   */\n  private reconstructEquationWithFormulas(\n    originalEquation: string, \n    nameToFormulaMap: Record<string, string>\n  ): string {\n    let formulaEquation = originalEquation;\n    \n    // Replace each compound name with its formula\n    for (const [name, formula] of Object.entries(nameToFormulaMap)) {\n      // Create regex to match the compound name (case insensitive, word boundaries)\n      const nameRegex = new RegExp(`\\\\b${name.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'gi');\n      formulaEquation = formulaEquation.replace(nameRegex, formula);\n    }\n    \n    return formulaEquation;\n  }\n\n  /**\n   * Get common names for simple chemical formulas or alternative names for compounds\n   */\n  private getCommonNames(input: string): string[] {\n    const commonNames: Record<string, string[]> = {\n      'H2O': ['water'],\n      'water': ['H2O', 'dihydrogen monoxide'],\n      'CO2': ['carbon dioxide'],\n      'carbon dioxide': ['CO2'],\n      'NaCl': ['sodium chloride', 'salt'],\n      'sodium chloride': ['NaCl', 'salt'],\n      'salt': ['NaCl', 'sodium chloride'],\n      'H2SO4': ['sulfuric acid', 'sulphuric acid'],\n      'sulfuric acid': ['H2SO4', 'sulphuric acid'],\n      'sulphuric acid': ['H2SO4', 'sulfuric acid'],\n      'HCl': ['hydrochloric acid', 'muriatic acid'],\n      'hydrochloric acid': ['HCl', 'muriatic acid'],\n      'muriatic acid': ['HCl', 'hydrochloric acid'],\n      'NH3': ['ammonia'],\n      'ammonia': ['NH3'],\n      'CH4': ['methane'],\n      'methane': ['CH4'],\n      'C2H5OH': ['ethanol', 'ethyl alcohol'],\n      'ethanol': ['C2H5OH', 'ethyl alcohol'],\n      'ethyl alcohol': ['C2H5OH', 'ethanol'],\n      'C6H12O6': ['glucose', 'dextrose'],\n      'glucose': ['C6H12O6', 'dextrose'],\n      'dextrose': ['C6H12O6', 'glucose'],\n      'CaCO3': ['calcium carbonate'],\n      'calcium carbonate': ['CaCO3'],\n      'NaOH': ['sodium hydroxide', 'caustic soda'],\n      'sodium hydroxide': ['NaOH', 'caustic soda'],\n      'caustic soda': ['NaOH', 'sodium hydroxide'],\n      'KOH': ['potassium hydroxide'],\n      'potassium hydroxide': ['KOH'],\n      'Na2SO4': ['sodium sulfate', 'sodium sulphate'],\n      'sodium sulfate': ['Na2SO4', 'sodium sulphate'],\n      'sodium sulphate': ['Na2SO4', 'sodium sulfate'],\n      'Mg': ['magnesium'],\n      'magnesium': ['Mg'],\n      'Al': ['aluminum', 'aluminium'],\n      'aluminum': ['Al'],\n      'aluminium': ['Al'],\n      'Fe': ['iron'],\n      'iron': ['Fe'],\n      'Cu': ['copper'],\n      'copper': ['Cu'],\n      'Zn': ['zinc'],\n      'zinc': ['Zn'],\n      'O2': ['oxygen'],\n      'oxygen': ['O2'],\n      'N2': ['nitrogen'],\n      'nitrogen': ['N2'],\n      'H2': ['hydrogen'],\n      'hydrogen': ['H2']\n    };\n\n    return commonNames[input] || commonNames[input.toLowerCase()] || [];\n  }\n\n  /**\n   * Check if a string looks like a chemical formula\n   */\n  private isLikelyFormula(str: string): boolean {\n    // Simple heuristic: contains only letters, numbers, parentheses, and common symbols\n    return /^[A-Za-z0-9()[\\]+-]+$/.test(str) && /[A-Z]/.test(str);\n  }\n\n  /**\n   * Validate mass balance using PubChem molecular weights\n   */\n  private validateMassBalance(\n    balanced: BalancedEquation, \n    compoundData: Record<string, CompoundInfo>\n  ): { balanced: boolean; discrepancy: number } {\n    let reactantMass = 0;\n    let productMass = 0;\n\n    // Calculate reactant mass\n    for (let i = 0; i < balanced.reactants.length; i++) {\n      const species = balanced.reactants[i];\n      const coefficient = balanced.coefficients[i];\n      const compound = compoundData[species];\n      \n      if (compound?.molecularWeight) {\n        reactantMass += coefficient * compound.molecularWeight;\n      } else {\n        throw new ComputationError(\n          `Missing molecular weight for reactant: ${species}`,\n          { species, coefficient, operation: 'mass_balance_validation' }\n        );\n      }\n    }\n\n    // Calculate product mass\n    for (let i = 0; i < balanced.products.length; i++) {\n      const species = balanced.products[i];\n      const coefficient = balanced.coefficients[balanced.reactants.length + i];\n      const compound = compoundData[species];\n      \n      if (compound?.molecularWeight) {\n        productMass += coefficient * compound.molecularWeight;\n      } else {\n        throw new ComputationError(\n          `Missing molecular weight for product: ${species}`,\n          { species, coefficient, operation: 'mass_balance_validation' }\n        );\n      }\n    }\n\n    const discrepancy = Math.abs(reactantMass - productMass);\n    const tolerance = 0.01; // 0.01 g/mol tolerance\n    \n    return {\n      balanced: discrepancy <= tolerance,\n      discrepancy\n    };\n  }\n\n  /**\n   * Suggest alternative compound names or formulas\n   */\n  async suggestAlternatives(compoundName: string): Promise<string[]> {\n    const suggestions: string[] = [];\n    \n    try {\n      const pubchemModule = await this.loadPubChemModule();\n      if (!pubchemModule) {\n        return suggestions;\n      }\n\n      // Try various search strategies\n      const searchTerms = [\n        compoundName.toLowerCase(),\n        compoundName.toUpperCase(),\n        compoundName.replace(/\\s+/g, ''),\n        compoundName.replace(/\\s+/g, '-'),\n        compoundName.replace(/-/g, ' '),\n      ];\n\n      for (const term of searchTerms) {\n        if (term !== compoundName) {\n          try {\n            const compounds = await pubchemModule.fromName(term);\n            if (compounds.length > 0) {\n              suggestions.push(term);\n            }\n          } catch {\n            // Ignore errors for suggestions\n          }\n        }\n      }\n    } catch (error) {\n      // Return empty suggestions if search fails\n    }\n\n    return [...new Set(suggestions)]; // Remove duplicates\n  }\n\n  /**\n   * Clear the compound cache\n   */\n  async clearCache(): Promise<void> {\n    await this.compoundCache.clear();\n  }\n\n  /**\n   * Get cached compound info without making new requests\n   */\n  async getCachedCompoundInfo(compoundName: string): Promise<CompoundInfo | undefined> {\n    const result = await this.compoundCache.get(compoundName);\n    return result.hit ? result.value : undefined;\n  }\n}\n","/**\n * Enhanced Stoichiometry calculator with PubChem integration\n * Provides accurate molecular weights, compound validation, and enriched calculations\n */\n\nimport { Stoichiometry } from './stoichiometry';\nimport { EnhancedChemicalEquationBalancer, CompoundInfo } from './enhancedBalancer';\nimport { StoichiometryResult, SpeciesData } from './types';\n\nexport interface EnhancedStoichiometryResult extends StoichiometryResult {\n  compoundData?: Record<string, CompoundInfo>;\n  pubchemMolarWeights?: Record<string, number>;\n  validation?: {\n    molecularWeightAccuracy: Record<string, {\n      calculated: number;\n      pubchem: number;\n      difference: number;\n      accuracy: string;\n    }>;\n    warnings: string[];\n  };\n}\n\nexport interface ReactionAnalysis {\n  equation: string;\n  balanced: boolean;\n  molecularWeightValidation: {\n    reactants: number;\n    products: number;\n    difference: number;\n    isBalanced: boolean;\n  };\n  compoundInfo: Record<string, CompoundInfo>;\n  suggestions?: Record<string, string[]>;\n}\n\nexport class EnhancedStoichiometry extends Stoichiometry {\n  private enhancedBalancer: EnhancedChemicalEquationBalancer;\n  private compoundDataCache: Record<string, CompoundInfo> = {};\n  private initializedStoich?: Stoichiometry;\n\n  constructor(equation?: string) {\n    super(equation);\n    this.enhancedBalancer = new EnhancedChemicalEquationBalancer();\n  }\n\n  /**\n   * Initialize with compound validation and enrichment\n   */\n  async initializeWithValidation(equation: string): Promise<ReactionAnalysis> {\n    // Initialize the stoichiometry with the equation\n    this.initializedStoich = new Stoichiometry(equation);\n    \n    // Balance the equation with PubChem data\n    const enhancedBalance = await this.enhancedBalancer.balanceWithPubChemData(equation);\n    \n    // Store compound data for later use\n    this.compoundDataCache = enhancedBalance.compoundData || {};\n    \n    // Calculate molecular weight validation\n    const validation = this.calculateMolecularWeightValidation(enhancedBalance);\n    \n    // Generate suggestions for compounds that weren't found\n    const suggestions: Record<string, string[]> = {};\n    for (const [species, info] of Object.entries(this.compoundDataCache)) {\n      if (!info.isValid) {\n        try {\n          suggestions[species] = await this.enhancedBalancer.suggestAlternatives(species);\n        } catch (error) {\n          // Ignore suggestion errors\n        }\n      }\n    }\n\n    return {\n      equation: enhancedBalance.equation,\n      balanced: true,\n      molecularWeightValidation: validation,\n      compoundInfo: this.compoundDataCache,\n      suggestions: Object.keys(suggestions).length > 0 ? suggestions : undefined\n    };\n  }\n\n  /**\n   * Enhanced stoichiometric calculation with PubChem data\n   */\n  async calculateFromMolesEnhanced(selectedSpecies: string, moles: number): Promise<EnhancedStoichiometryResult> {\n    // Use the initialized stoichiometry or throw error if not initialized\n    if (!this.initializedStoich) {\n      throw new Error('Enhanced stoichiometry not initialized. Call initializeWithValidation() first.');\n    }\n    \n    // Get basic calculation\n    const basicResult = this.initializedStoich.calculateFromMoles(selectedSpecies, moles);\n    \n    // Enhance with PubChem data\n    const enhanced: EnhancedStoichiometryResult = {\n      ...basicResult,\n      compoundData: this.compoundDataCache,\n      pubchemMolarWeights: {},\n      validation: {\n        molecularWeightAccuracy: {},\n        warnings: []\n      }\n    };\n\n    // Compare calculated vs PubChem molecular weights\n    const allSpecies = [...Object.keys(basicResult.reactants), ...Object.keys(basicResult.products)];\n    \n    for (const species of allSpecies) {\n      const speciesData = basicResult.reactants[species] || basicResult.products[species];\n      const compoundInfo = this.compoundDataCache[species];\n      \n      if (compoundInfo?.molecularWeight && speciesData) {\n        enhanced.pubchemMolarWeights![species] = compoundInfo.molecularWeight;\n        \n        const calculated = speciesData.molarWeight;\n        const pubchem = compoundInfo.molecularWeight;\n        const difference = Math.abs(calculated - pubchem);\n        const percentDiff = (difference / pubchem) * 100;\n        \n        enhanced.validation!.molecularWeightAccuracy[species] = {\n          calculated,\n          pubchem,\n          difference,\n          accuracy: percentDiff < 0.1 ? 'excellent' : \n                   percentDiff < 1 ? 'good' : \n                   percentDiff < 5 ? 'fair' : 'poor'\n        };\n\n        if (percentDiff > 1) {\n          enhanced.validation!.warnings.push(\n            `Molecular weight mismatch for ${species}: calculated ${calculated.toFixed(3)}, PubChem ${pubchem.toFixed(3)} (${percentDiff.toFixed(1)}% difference)`\n          );\n        }\n      } else if (!compoundInfo?.isValid) {\n        enhanced.validation!.warnings.push(\n          `No PubChem data available for ${species}: ${compoundInfo?.error || 'Unknown compound'}`\n        );\n      }\n    }\n\n    return enhanced;\n  }\n\n  /**\n   * Enhanced calculation from grams with PubChem data\n   */\n  async calculateFromGramsEnhanced(selectedSpecies: string, grams: number): Promise<EnhancedStoichiometryResult> {\n    // Use the initialized stoichiometry or throw error if not initialized\n    if (!this.initializedStoich) {\n      throw new Error('Enhanced stoichiometry not initialized. Call initializeWithValidation() first.');\n    }\n    \n    // Get basic calculation\n    const basicResult = this.initializedStoich.calculateFromGrams(selectedSpecies, grams);\n    \n    // Convert to enhanced result using the same logic as calculateFromMolesEnhanced\n    const speciesData = basicResult.reactants[selectedSpecies] || basicResult.products[selectedSpecies];\n    if (speciesData) {\n      return this.calculateFromMolesEnhanced(selectedSpecies, speciesData.moles);\n    }\n    \n    throw new Error(`Species ${selectedSpecies} not found in calculation results`);\n  }\n\n  /**\n   * Get compound information with PubChem enrichment\n   */\n  async getCompoundInfo(compoundName: string): Promise<CompoundInfo> {\n    if (this.compoundDataCache[compoundName]) {\n      return this.compoundDataCache[compoundName];\n    }\n    \n    const info = await this.enhancedBalancer.getCompoundInfo(compoundName);\n    this.compoundDataCache[compoundName] = info;\n    return info;\n  }\n\n  /**\n   * Calculate molar weight with PubChem verification\n   */\n  async calculateMolarWeightEnhanced(formula: string): Promise<{\n    calculated: number;\n    pubchem?: number;\n    difference?: number;\n    accuracy?: string;\n    compoundInfo?: CompoundInfo;\n  }> {\n    const calculated = this.calculateMolarWeight(formula);\n    \n    try {\n      const compoundInfo = await this.getCompoundInfo(formula);\n      \n      if (compoundInfo.isValid && compoundInfo.molecularWeight) {\n        const pubchem = compoundInfo.molecularWeight;\n        const difference = Math.abs(calculated - pubchem);\n        const percentDiff = (difference / pubchem) * 100;\n        \n        return {\n          calculated,\n          pubchem,\n          difference,\n          accuracy: percentDiff < 0.1 ? 'excellent' : \n                   percentDiff < 1 ? 'good' : \n                   percentDiff < 5 ? 'fair' : 'poor',\n          compoundInfo\n        };\n      }\n    } catch (error) {\n      // PubChem lookup failed, return calculated value only\n    }\n    \n    return { calculated };\n  }\n\n  /**\n   * Compare two compounds using PubChem data\n   */\n  async compareCompounds(compound1: string, compound2: string): Promise<{\n    compound1: CompoundInfo;\n    compound2: CompoundInfo;\n    comparison: {\n      molecularWeightRatio: number;\n      formulasSimilar: boolean;\n      sameCompound: boolean;\n      differences: string[];\n    };\n  }> {\n    const info1 = await this.getCompoundInfo(compound1);\n    const info2 = await this.getCompoundInfo(compound2);\n    \n    const comparison = {\n      molecularWeightRatio: 1,\n      formulasSimilar: false,\n      sameCompound: false,\n      differences: [] as string[]\n    };\n\n    if (info1.isValid && info2.isValid) {\n      // Compare molecular weights\n      if (info1.molecularWeight && info2.molecularWeight) {\n        comparison.molecularWeightRatio = info1.molecularWeight / info2.molecularWeight;\n      }\n      \n      // Compare formulas\n      if (info1.molecularFormula && info2.molecularFormula) {\n        comparison.formulasSimilar = info1.molecularFormula === info2.molecularFormula;\n        if (comparison.formulasSimilar) {\n          comparison.sameCompound = true;\n        }\n      }\n      \n      // Find differences\n      if (info1.cid && info2.cid && info1.cid === info2.cid) {\n        comparison.sameCompound = true;\n      } else {\n        if (info1.molecularFormula !== info2.molecularFormula) {\n          comparison.differences.push(`Different molecular formulas: ${info1.molecularFormula} vs ${info2.molecularFormula}`);\n        }\n        if (info1.molecularWeight && info2.molecularWeight && Math.abs(info1.molecularWeight - info2.molecularWeight) > 0.01) {\n          comparison.differences.push(`Different molecular weights: ${info1.molecularWeight} vs ${info2.molecularWeight}`);\n        }\n      }\n    } else {\n      if (!info1.isValid) comparison.differences.push(`Cannot find data for ${compound1}`);\n      if (!info2.isValid) comparison.differences.push(`Cannot find data for ${compound2}`);\n    }\n\n    return {\n      compound1: info1,\n      compound2: info2,\n      comparison\n    };\n  }\n\n  /**\n   * Calculate molecular weight validation for balanced equation\n   */\n  private calculateMolecularWeightValidation(enhancedBalance: any): {\n    reactants: number;\n    products: number;\n    difference: number;\n    isBalanced: boolean;\n  } {\n    let reactantMass = 0;\n    let productMass = 0;\n    \n    if (enhancedBalance.compoundData) {\n      // Calculate reactant total mass\n      for (let i = 0; i < enhancedBalance.reactants.length; i++) {\n        const species = enhancedBalance.reactants[i];\n        const coefficient = enhancedBalance.coefficients[i];\n        const compound = enhancedBalance.compoundData[species];\n        \n        if (compound?.molecularWeight) {\n          reactantMass += coefficient * compound.molecularWeight;\n        }\n      }\n      \n      // Calculate product total mass  \n      for (let i = 0; i < enhancedBalance.products.length; i++) {\n        const species = enhancedBalance.products[i];\n        const coefficient = enhancedBalance.coefficients[enhancedBalance.reactants.length + i];\n        const compound = enhancedBalance.compoundData[species];\n        \n        if (compound?.molecularWeight) {\n          productMass += coefficient * compound.molecularWeight;\n        }\n      }\n    }\n    \n    const difference = Math.abs(reactantMass - productMass);\n    const isBalanced = difference < 0.01; // 0.01 g/mol tolerance\n    \n    return {\n      reactants: reactantMass,\n      products: productMass,\n      difference,\n      isBalanced\n    };\n  }\n\n  /**\n   * Clear cached compound data\n   */\n  clearCache(): void {\n    this.compoundDataCache = {};\n    this.enhancedBalancer.clearCache();\n  }\n\n  /**\n   * Get all cached compound data\n   */\n  getCachedCompounds(): Record<string, CompoundInfo> {\n    return { ...this.compoundDataCache };\n  }\n}\n","/**\n * Core thermodynamics calculator for CREB-JS\n * Implements standard thermodynamic calculations for chemical reactions\n */\n\nimport { ThermodynamicsResult, ReactionConditions, ThermodynamicProperties, TemperatureProfile } from './types';\nimport { BalancedEquation } from '../types';\nimport { Injectable } from '../core/decorators/Injectable';\nimport { validateThermodynamicProperties } from '../data/validation';\nimport { ValidationError } from '../core/errors/CREBError';\n\ninterface CompoundData {\n  formula: string;\n  coefficient: number;\n}\n\n@Injectable()\nexport class ThermodynamicsCalculator {\n  private readonly R = 8.314; // Gas constant J/(mol·K)\n  private readonly standardTemperature = 298.15; // K\n  private readonly standardPressure = 101325; // Pa\n\n  /**\n   * Calculate thermodynamic properties for a balanced chemical equation\n   */\n  async calculateThermodynamics(\n    equation: BalancedEquation,\n    conditions: ReactionConditions = {\n      temperature: this.standardTemperature,\n      pressure: this.standardPressure\n    }\n  ): Promise<ThermodynamicsResult> {\n    try {\n      // Get thermodynamic data for all compounds\n      const compoundData = await this.getCompoundThermodynamicData(equation);\n      \n      // Calculate standard enthalpy change\n      const deltaH = this.calculateEnthalpyChange(equation, compoundData);\n      \n      // Calculate standard entropy change\n      const deltaS = this.calculateEntropyChange(equation, compoundData);\n      \n      // Calculate Gibbs free energy change\n      const deltaG = this.calculateGibbsChange(deltaH, deltaS, conditions.temperature);\n      \n      // Calculate equilibrium constant\n      const equilibriumConstant = this.calculateEquilibriumConstant(deltaG, conditions.temperature);\n      \n      // Determine spontaneity\n      const spontaneity = this.determineSpontaneity(deltaG);\n      \n      // Generate temperature dependence profile\n      const temperatureDependence = this.generateTemperatureProfile(deltaH, deltaS);\n\n      return {\n        deltaH,\n        deltaS,\n        deltaG,\n        equilibriumConstant,\n        spontaneity,\n        temperatureDependence,\n        conditions,\n        // Alias properties for integrated balancer\n        enthalpy: deltaH,\n        gibbsFreeEnergy: deltaG,\n        isSpontaneous: spontaneity === 'spontaneous'\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error(`Thermodynamics calculation failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Calculate enthalpy change (ΔH) for the reaction\n   * ΔH = Σ(coefficients × ΔHf products) - Σ(coefficients × ΔHf reactants)\n   */\n  private calculateEnthalpyChange(\n    equation: BalancedEquation,\n    compoundData: Map<string, ThermodynamicProperties>\n  ): number {\n    let deltaH = 0;\n\n    // Products (positive contribution)\n    equation.products.forEach((formula, index) => {\n      const data = compoundData.get(formula);\n      if (data) {\n        const coefficient = equation.coefficients[equation.reactants.length + index];\n        deltaH += coefficient * data.deltaHf;\n      }\n    });\n\n    // Reactants (negative contribution)\n    equation.reactants.forEach((formula, index) => {\n      const data = compoundData.get(formula);\n      if (data) {\n        const coefficient = equation.coefficients[index];\n        deltaH -= coefficient * data.deltaHf;\n      }\n    });\n\n    return deltaH;\n  }\n\n  /**\n   * Calculate entropy change (ΔS) for the reaction\n   * ΔS = Σ(coefficients × S products) - Σ(coefficients × S reactants)\n   */\n  private calculateEntropyChange(\n    equation: BalancedEquation,\n    compoundData: Map<string, ThermodynamicProperties>\n  ): number {\n    let deltaS = 0;\n\n    // Products (positive contribution)\n    equation.products.forEach((formula, index) => {\n      const data = compoundData.get(formula);\n      if (data) {\n        const coefficient = equation.coefficients[equation.reactants.length + index];\n        deltaS += coefficient * data.entropy;\n      }\n    });\n\n    // Reactants (negative contribution)\n    equation.reactants.forEach((formula, index) => {\n      const data = compoundData.get(formula);\n      if (data) {\n        const coefficient = equation.coefficients[index];\n        deltaS -= coefficient * data.entropy;\n      }\n    });\n\n    return deltaS / 1000; // Convert J/mol·K to kJ/mol·K\n  }\n\n  /**\n   * Calculate Gibbs free energy change (ΔG)\n   * ΔG = ΔH - T×ΔS\n   */\n  private calculateGibbsChange(deltaH: number, deltaS: number, temperature: number): number {\n    return deltaH - (temperature * deltaS);\n  }\n\n  /**\n   * Calculate equilibrium constant from Gibbs free energy\n   * K = exp(-ΔG / RT)\n   */\n  private calculateEquilibriumConstant(deltaG: number, temperature: number): number {\n    const exponent = -(deltaG * 1000) / (this.R * temperature); // Convert kJ to J\n    return Math.exp(exponent);\n  }\n\n  /**\n   * Determine reaction spontaneity based on Gibbs free energy\n   */\n  private determineSpontaneity(deltaG: number): 'spontaneous' | 'non-spontaneous' | 'equilibrium' {\n    const tolerance = 0.1; // kJ/mol tolerance for equilibrium\n    \n    if (deltaG < -tolerance) {\n      return 'spontaneous';\n    } else if (deltaG > tolerance) {\n      return 'non-spontaneous';\n    } else {\n      return 'equilibrium';\n    }\n  }\n\n  /**\n   * Generate temperature dependence profile\n   */\n  private generateTemperatureProfile(deltaH: number, deltaS: number): TemperatureProfile {\n    const tempRange: [number, number] = [200, 800]; // K\n    const points: Array<{ temperature: number; deltaG: number }> = [];\n    \n    // Calculate ΔG at different temperatures\n    for (let T = tempRange[0]; T <= tempRange[1]; T += 50) {\n      const deltaG = this.calculateGibbsChange(deltaH, deltaS, T);\n      points.push({ temperature: T, deltaG });\n    }\n\n    // Find spontaneity threshold (where ΔG = 0)\n    let spontaneityThreshold: number | undefined;\n    if (deltaS !== 0) {\n      const threshold = deltaH / deltaS; // T = ΔH / ΔS when ΔG = 0\n      if (threshold > 0 && threshold >= tempRange[0] && threshold <= tempRange[1]) {\n        spontaneityThreshold = threshold;\n      }\n    }\n\n    return {\n      range: tempRange,\n      deltaGvsT: points,\n      spontaneityThreshold\n    };\n  }\n\n  /**\n   * Get thermodynamic data for compounds in the equation\n   * This would integrate with PubChem and NIST databases\n   */\n  private async getCompoundThermodynamicData(\n    equation: BalancedEquation\n  ): Promise<Map<string, ThermodynamicProperties>> {\n    const data = new Map<string, ThermodynamicProperties>();\n    \n    // Collect all unique formulas\n    const allCompounds = [\n      ...equation.reactants,\n      ...equation.products\n    ];\n    const uniqueFormulas = [...new Set(allCompounds)];\n\n    // Fetch data for each compound\n    for (const formula of uniqueFormulas) {\n      try {\n        const properties = await this.fetchThermodynamicProperties(formula);\n        \n        // Validate thermodynamic properties using the validation pipeline\n        const validationResult = await validateThermodynamicProperties(properties);\n        if (!validationResult.isValid) {\n          const validationErrors = validationResult.errors.map(e => e.message).join(', ');\n          throw new ValidationError(\n            `Invalid thermodynamic properties for ${formula}: ${validationErrors}`,\n            { formula, errors: validationResult.errors }\n          );\n        }\n        \n        data.set(formula, properties);\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        // Note: Could not fetch thermodynamic data, using estimated values\n        // Use estimated values or throw error\n        const estimatedProperties = this.estimateThermodynamicProperties(formula);\n        \n        // Validate estimated properties too\n        try {\n          const estimatedValidation = await validateThermodynamicProperties(estimatedProperties);\n          if (!estimatedValidation.isValid) {\n            throw new ValidationError(\n              `Both fetched and estimated thermodynamic properties invalid for ${formula}`,\n              { formula, originalError: error }\n            );\n          }\n          data.set(formula, estimatedProperties);\n        } catch (validationError) {\n          // If both real and estimated data are invalid, re-throw the original error\n          throw error;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  /**\n   * Fetch thermodynamic properties from external databases\n   * TODO: Implement PubChem/NIST integration\n   */\n  private async fetchThermodynamicProperties(formula: string): Promise<ThermodynamicProperties> {\n    // This is a placeholder - actual implementation would query PubChem/NIST\n    // For now, return some common compound values for demonstration\n    \n    const commonCompounds: Record<string, ThermodynamicProperties> = {\n      'H2O': {\n        deltaHf: -285.8, // kJ/mol\n        entropy: 69.95, // J/(mol·K)\n        heatCapacity: 75.3, // J/(mol·K)\n        temperatureRange: [273, 373]\n      },\n      'CO2': {\n        deltaHf: -393.5,\n        entropy: 213.8,\n        heatCapacity: 37.1,\n        temperatureRange: [200, 800]\n      },\n      'H2': {\n        deltaHf: 0,\n        entropy: 130.7,\n        heatCapacity: 28.8,\n        temperatureRange: [200, 800]\n      },\n      'O2': {\n        deltaHf: 0,\n        entropy: 205.2,\n        heatCapacity: 29.4,\n        temperatureRange: [200, 800]\n      },\n      'CH4': {\n        deltaHf: -74.6,\n        entropy: 186.3,\n        heatCapacity: 35.7,\n        temperatureRange: [200, 800]\n      }\n    };\n\n    if (commonCompounds[formula]) {\n      return commonCompounds[formula];\n    }\n\n    throw new Error(`Thermodynamic data not available for ${formula}`);\n  }\n\n  /**\n   * Estimate thermodynamic properties using group contribution methods\n   * TODO: Implement Joback and Reid group contribution method\n   */\n  private estimateThermodynamicProperties(formula: string): ThermodynamicProperties {\n    // Placeholder estimation - would use actual group contribution methods\n    return {\n      deltaHf: 0, // Assume elements in standard state\n      entropy: 100, // Rough estimate\n      heatCapacity: 30, // Rough estimate\n      temperatureRange: [298, 500]\n    };\n  }\n\n  /**\n   * Calculate thermodynamics for reaction data format (used by integrated balancer)\n   */\n  async calculateReactionThermodynamics(\n    reactionData: import('./types').ReactionData,\n    temperature: number = this.standardTemperature\n  ): Promise<ThermodynamicsResult> {\n    // Convert ReactionData to BalancedEquation format\n    const reactants = reactionData.reactants.map(r => r.formula);\n    const products = reactionData.products.map(p => p.formula);\n    const coefficients = [\n      ...reactionData.reactants.map(r => r.coefficient),\n      ...reactionData.products.map(p => p.coefficient)\n    ];\n\n    // Create equation string for BalancedEquation\n    const reactantString = reactionData.reactants\n      .map(r => `${r.coefficient > 1 ? r.coefficient : ''}${r.formula}`)\n      .join(' + ');\n    const productString = reactionData.products\n      .map(p => `${p.coefficient > 1 ? p.coefficient : ''}${p.formula}`)\n      .join(' + ');\n    const equationString = `${reactantString} = ${productString}`;\n\n    const equation: BalancedEquation = {\n      equation: equationString,\n      reactants,\n      products,\n      coefficients\n    };\n\n    const conditions: ReactionConditions = {\n      temperature,\n      pressure: this.standardPressure\n    };\n\n    return this.calculateThermodynamics(equation, conditions);\n  }\n}\n","/**\n * Thermodynamics-Integrated Chemical Equation Balancer\n * Combines chemical equation balancing with comprehensive thermodynamic analysis\n * \n * @author Loganathane Virassamy\n * @version 1.4.0-alpha\n */\n\nimport { ChemicalEquationBalancer } from '../balancer';\nimport { ThermodynamicsCalculator } from './calculator';\nimport { ReactionData, ThermodynamicsResult, CompoundThermodynamics } from './types';\n\n/**\n * Classification of chemical reactions based on thermodynamic properties\n */\nexport enum ReactionType {\n    COMBUSTION = 'combustion',\n    SYNTHESIS = 'synthesis', \n    DECOMPOSITION = 'decomposition',\n    SINGLE_REPLACEMENT = 'single_replacement',\n    DOUBLE_REPLACEMENT = 'double_replacement',\n    ACID_BASE = 'acid_base',\n    REDOX = 'redox',\n    BIOLOGICAL = 'biological',\n    INDUSTRIAL = 'industrial'\n}\n\n/**\n * Reaction feasibility assessment\n */\nexport enum ReactionFeasibility {\n    HIGHLY_FAVORABLE = 'highly_favorable',     // ΔG° < -100 kJ/mol\n    FAVORABLE = 'favorable',                   // -100 < ΔG° < -20 kJ/mol  \n    MARGINALLY_FAVORABLE = 'marginally_favorable', // -20 < ΔG° < 0 kJ/mol\n    EQUILIBRIUM = 'equilibrium',               // ΔG° ≈ 0 kJ/mol\n    UNFAVORABLE = 'unfavorable',               // 0 < ΔG° < 20 kJ/mol\n    HIGHLY_UNFAVORABLE = 'highly_unfavorable'  // ΔG° > 20 kJ/mol\n}\n\n/**\n * Safety classification based on energy release\n */\nexport enum SafetyLevel {\n    SAFE = 'safe',                    // |ΔH°| < 100 kJ/mol\n    CAUTION = 'caution',              // 100 < |ΔH°| < 500 kJ/mol\n    WARNING = 'warning',              // 500 < |ΔH°| < 1000 kJ/mol\n    DANGER = 'danger',                // 1000 < |ΔH°| < 2000 kJ/mol\n    EXTREME_DANGER = 'extreme_danger' // |ΔH°| > 2000 kJ/mol\n}\n\n/**\n * Comprehensive thermodynamic balancing result\n */\nexport interface ThermodynamicsBalanceResult {\n    // Chemical balancing\n    balanced: string;\n    coefficients: Record<string, number>;\n    \n    // Thermodynamic analysis\n    thermodynamics: ThermodynamicsResult;\n    \n    // Reaction classification\n    reactionType: ReactionType;\n    feasibility: ReactionFeasibility;\n    safetyLevel: SafetyLevel;\n    \n    // Analysis and recommendations\n    energyReleased?: number;  // kJ/mol (if exothermic)\n    energyRequired?: number;  // kJ/mol (if endothermic)\n    spontaneous: boolean;\n    equilibriumConstant: number;\n    \n    // Condition optimization\n    optimalTemperature?: number;  // K\n    temperatureRange: { min: number; max: number };\n    pressureEffects: string;\n    \n    // Safety and practical information\n    safetyWarnings: string[];\n    recommendations: string[];\n    industrialApplications: string[];\n    \n    // Educational information\n    reactionMechanism?: string;\n    realWorldExamples: string[];\n}\n\n/**\n * Optimal reaction conditions\n */\nexport interface OptimalConditions {\n    temperature: number;    // K\n    pressure: number;       // atm\n    yield: number;          // %\n    reasoning: string[];\n}\n\n/**\n * Thermodynamics-Integrated Chemical Equation Balancer\n * Revolutionary chemistry tool combining balancing with energy analysis\n */\nexport class ThermodynamicsEquationBalancer {\n    private balancer: ChemicalEquationBalancer;\n    private thermoCalculator: ThermodynamicsCalculator;\n\n    constructor() {\n        this.balancer = new ChemicalEquationBalancer();\n        this.thermoCalculator = new ThermodynamicsCalculator();\n    }\n\n    /**\n     * Balance equation with comprehensive thermodynamic analysis\n     */\n    async balanceWithThermodynamics(\n        equation: string, \n        temperature: number = 298.15,\n        pressure: number = 1.0\n    ): Promise<ThermodynamicsBalanceResult> {\n        try {\n            // Step 1: Balance the chemical equation\n            const balanced = this.balancer.balance(equation);\n            const reactionData = this.parseEquationToReactionData(balanced);\n\n            // Step 2: Calculate thermodynamics\n            const thermodynamics = await this.thermoCalculator.calculateReactionThermodynamics(\n                reactionData, \n                temperature\n            );\n\n            // Step 3: Classify reaction\n            const reactionType = this.classifyReaction(equation, thermodynamics);\n            \n            // Step 4: Assess feasibility and safety\n            const feasibility = this.assessFeasibility(thermodynamics.gibbsFreeEnergy);\n            const safetyLevel = this.assessSafety(thermodynamics.enthalpy);\n\n            // Step 5: Generate analysis and recommendations\n            const analysis = this.generateAnalysis(\n                reactionType, \n                thermodynamics, \n                feasibility, \n                safetyLevel\n            );\n\n            // Step 6: Optimize conditions (simplified for now)\n            const optimalConditions = await this.findOptimalConditions(equation);\n\n            return {\n                balanced,\n                coefficients: this.extractCoefficients(balanced),\n                thermodynamics,\n                reactionType,\n                feasibility,\n                safetyLevel,\n                energyReleased: thermodynamics.enthalpy < 0 ? Math.abs(thermodynamics.enthalpy) : undefined,\n                energyRequired: thermodynamics.enthalpy > 0 ? thermodynamics.enthalpy : undefined,\n                spontaneous: thermodynamics.isSpontaneous,\n                equilibriumConstant: this.calculateEquilibriumConstant(thermodynamics.gibbsFreeEnergy, temperature),\n                optimalTemperature: optimalConditions.temperature,\n                temperatureRange: { min: 200, max: 800 }, // Will be calculated dynamically\n                pressureEffects: this.analyzePressureEffects(reactionData),\n                safetyWarnings: analysis.safetyWarnings,\n                recommendations: analysis.recommendations,\n                industrialApplications: analysis.industrialApplications,\n                reactionMechanism: analysis.reactionMechanism,\n                realWorldExamples: analysis.realWorldExamples\n            };\n\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n            throw new Error(`Thermodynamics balancing failed: ${errorMessage}`);\n        }\n    }\n\n    /**\n     * Find optimal reaction conditions for maximum yield\n     */\n    async findOptimalConditions(equation: string): Promise<OptimalConditions> {\n        const balanced = this.balancer.balance(equation);\n        const reactionData = this.parseEquationToReactionData(balanced);\n\n        // Test different temperatures\n        const temperatures = [250, 298.15, 350, 400, 500, 600, 750];\n        let bestConditions: OptimalConditions = {\n            temperature: 298.15,\n            pressure: 1.0,\n            yield: 0,\n            reasoning: []\n        };\n\n        for (const temp of temperatures) {\n            const thermo = await this.thermoCalculator.calculateReactionThermodynamics(reactionData, temp);\n            const K = this.calculateEquilibriumConstant(thermo.gibbsFreeEnergy, temp);\n            \n            // Estimate yield from equilibrium constant\n            const yieldPercent = this.estimateYieldFromK(K, reactionData);\n            \n            if (yieldPercent > bestConditions.yield) {\n                bestConditions = {\n                    temperature: temp,\n                    pressure: this.getOptimalPressure(reactionData),\n                    yield: yieldPercent,\n                    reasoning: this.generateOptimizationReasoning(temp, thermo, K)\n                };\n            }\n        }\n\n        return bestConditions;\n    }\n\n    /**\n     * Classify reaction type based on equation pattern and thermodynamics\n     */\n    private classifyReaction(equation: string, thermo: ThermodynamicsResult): ReactionType {\n        const normalized = equation.toLowerCase().replace(/\\s+/g, '');\n\n        // Biological reactions (check first before combustion)\n        if (normalized.includes('c6h12o6') || normalized.includes('glucose')) {\n            return ReactionType.BIOLOGICAL;\n        }\n\n        // Combustion: organic + O2 = CO2 + H2O\n        if (normalized.includes('o2') && normalized.includes('co2') && normalized.includes('h2o')) {\n            return ReactionType.COMBUSTION;\n        }\n\n        // Synthesis (A + B = C)\n        if (equation.split('=')[0].split('+').length >= 2 && \n            equation.split('=')[1].split('+').length === 1) {\n            return ReactionType.SYNTHESIS;\n        }\n\n        // Decomposition (A = B + C)\n        if (equation.split('=')[0].split('+').length === 1 && \n            equation.split('=')[1].split('+').length >= 2) {\n            return ReactionType.DECOMPOSITION;\n        }\n\n        // Acid-base reactions\n        if (normalized.includes('h+') || normalized.includes('oh-') || \n            normalized.includes('h2o') && thermo.enthalpy < -50) {\n            return ReactionType.ACID_BASE;\n        }\n\n        return ReactionType.REDOX; // Default\n    }\n\n    /**\n     * Assess reaction feasibility based on Gibbs free energy\n     */\n    private assessFeasibility(deltaG: number): ReactionFeasibility {\n        if (deltaG < -100) return ReactionFeasibility.HIGHLY_FAVORABLE;\n        if (deltaG < -20) return ReactionFeasibility.FAVORABLE;\n        if (deltaG < 0) return ReactionFeasibility.MARGINALLY_FAVORABLE;\n        if (Math.abs(deltaG) < 5) return ReactionFeasibility.EQUILIBRIUM;\n        if (deltaG < 20) return ReactionFeasibility.UNFAVORABLE;\n        return ReactionFeasibility.HIGHLY_UNFAVORABLE;\n    }\n\n    /**\n     * Assess safety level based on enthalpy change\n     */\n    private assessSafety(deltaH: number): SafetyLevel {\n        const absEnergy = Math.abs(deltaH);\n        if (absEnergy < 100) return SafetyLevel.SAFE;\n        if (absEnergy < 500) return SafetyLevel.CAUTION;\n        if (absEnergy < 1000) return SafetyLevel.WARNING;\n        if (absEnergy < 2000) return SafetyLevel.DANGER;\n        return SafetyLevel.EXTREME_DANGER;\n    }\n\n    /**\n     * Generate comprehensive analysis and recommendations\n     */\n    private generateAnalysis(\n        type: ReactionType, \n        thermo: ThermodynamicsResult, \n        feasibility: ReactionFeasibility,\n        safety: SafetyLevel\n    ) {\n        const analysis = {\n            safetyWarnings: [] as string[],\n            recommendations: [] as string[],\n            industrialApplications: [] as string[],\n            reactionMechanism: '',\n            realWorldExamples: [] as string[]\n        };\n\n        // Safety warnings\n        if (safety === SafetyLevel.EXTREME_DANGER) {\n            analysis.safetyWarnings.push('⚠️ EXTREME DANGER: Explosive reaction potential');\n            analysis.safetyWarnings.push('Requires specialized safety equipment and procedures');\n        } else if (safety === SafetyLevel.DANGER) {\n            analysis.safetyWarnings.push('⚠️ DANGER: Highly exothermic reaction');\n            analysis.safetyWarnings.push('Use proper cooling and controlled addition');\n        } else if (safety === SafetyLevel.WARNING) {\n            analysis.safetyWarnings.push('⚠️ WARNING: Significant heat release');\n            analysis.safetyWarnings.push('Monitor temperature carefully');\n        }\n\n        // Recommendations based on thermodynamics\n        if (thermo.isSpontaneous) {\n            analysis.recommendations.push('✅ Thermodynamically favorable reaction');\n            analysis.recommendations.push('Consider kinetic factors for reaction rate');\n        } else {\n            analysis.recommendations.push('⚡ External energy input required');\n            analysis.recommendations.push('Consider catalysis to lower activation energy');\n        }\n\n        // Type-specific applications\n        switch (type) {\n            case ReactionType.COMBUSTION:\n                analysis.industrialApplications.push('Power generation');\n                analysis.industrialApplications.push('Heating systems');\n                analysis.industrialApplications.push('Internal combustion engines');\n                analysis.realWorldExamples.push('Car engines', 'Power plants', 'Home heating');\n                break;\n            case ReactionType.BIOLOGICAL:\n                analysis.industrialApplications.push('Biofuel production');\n                analysis.industrialApplications.push('Food processing');\n                analysis.realWorldExamples.push('Cellular respiration', 'Fermentation');\n                break;\n        }\n\n        return analysis;\n    }\n\n    /**\n     * Calculate equilibrium constant from Gibbs free energy\n     */\n    private calculateEquilibriumConstant(deltaG: number, temperature: number): number {\n        const R = 8.314; // J/(mol·K)\n        return Math.exp(-deltaG * 1000 / (R * temperature));\n    }\n\n    /**\n     * Parse chemical equation to reaction data format\n     */\n    private parseEquationToReactionData(equation: string): ReactionData {\n        const [reactantSide, productSide] = equation.split('=').map(s => s.trim());\n        \n        const parseSpecies = (side: string) => {\n            return side.split('+').map(compound => {\n                const trimmed = compound.trim();\n                const match = trimmed.match(/^(\\d*)\\s*(.+)$/);\n                if (match) {\n                    const coefficient = match[1] ? parseInt(match[1]) : 1;\n                    const formula = match[2].trim();\n                    return { formula, coefficient };\n                }\n                return { formula: trimmed, coefficient: 1 };\n            });\n        };\n\n        return {\n            reactants: parseSpecies(reactantSide),\n            products: parseSpecies(productSide)\n        };\n    }\n\n    /**\n     * Extract coefficients from balanced equation\n     */\n    private extractCoefficients(equation: string): Record<string, number> {\n        const coefficients: Record<string, number> = {};\n        const [reactantSide, productSide] = equation.split('=');\n        \n        const extractFromSide = (side: string) => {\n            side.split('+').forEach(compound => {\n                const trimmed = compound.trim();\n                const match = trimmed.match(/^(\\d*)\\s*(.+)$/);\n                if (match) {\n                    const coefficient = match[1] ? parseInt(match[1]) : 1;\n                    const formula = match[2].trim();\n                    coefficients[formula] = coefficient;\n                }\n            });\n        };\n\n        extractFromSide(reactantSide);\n        extractFromSide(productSide);\n        \n        return coefficients;\n    }\n\n    /**\n     * Analyze pressure effects on reaction\n     */\n    private analyzePressureEffects(reactionData: ReactionData): string {\n        const reactantMoles = reactionData.reactants.reduce((sum: number, r) => sum + r.coefficient, 0);\n        const productMoles = reactionData.products.reduce((sum: number, p) => sum + p.coefficient, 0);\n        const deltaN = productMoles - reactantMoles;\n\n        if (deltaN < 0) {\n            return 'High pressure favors products (Le Chatelier\\'s principle)';\n        } else if (deltaN > 0) {\n            return 'Low pressure favors products (Le Chatelier\\'s principle)';\n        } else {\n            return 'Pressure has minimal effect on equilibrium';\n        }\n    }\n\n    /**\n     * Estimate yield from equilibrium constant\n     */\n    private estimateYieldFromK(K: number, reactionData: ReactionData): number {\n        // Simplified yield estimation\n        if (K > 1000) return 99;\n        if (K > 100) return 95;\n        if (K > 10) return 85;\n        if (K > 1) return 70;\n        if (K > 0.1) return 50;\n        if (K > 0.01) return 25;\n        return 5;\n    }\n\n    /**\n     * Get optimal pressure based on reaction stoichiometry\n     */\n    private getOptimalPressure(reactionData: ReactionData): number {\n        const reactantMoles = reactionData.reactants.reduce((sum: number, r) => sum + r.coefficient, 0);\n        const productMoles = reactionData.products.reduce((sum: number, p) => sum + p.coefficient, 0);\n        \n        // If products have fewer moles, high pressure favors products\n        if (productMoles < reactantMoles) return 10; // High pressure\n        if (productMoles > reactantMoles) return 0.1; // Low pressure\n        return 1.0; // Standard pressure\n    }\n\n    /**\n     * Generate optimization reasoning\n     */\n    private generateOptimizationReasoning(\n        temperature: number, \n        thermo: ThermodynamicsResult, \n        K: number\n    ): string[] {\n        const reasoning = [];\n        \n        if (temperature > 298.15) {\n            if (thermo.enthalpy > 0) {\n                reasoning.push(`Higher temperature (${temperature}K) favors endothermic reaction`);\n            } else {\n                reasoning.push(`Higher temperature (${temperature}K) may reduce yield but increase rate`);\n            }\n        } else {\n            reasoning.push(`Standard temperature (${temperature}K) conditions`);\n        }\n        \n        reasoning.push(`Equilibrium constant K = ${K.toExponential(2)}`);\n        reasoning.push(`ΔG° = ${thermo.gibbsFreeEnergy.toFixed(1)} kJ/mol at ${temperature}K`);\n        \n        return reasoning;\n    }\n}\n","/**\n * Energy Profile Generator\n * Creates visualization-ready energy profile data for chemical reactions\n * Part of CREB-JS v1.6.0 - Energy Profile Visualization Feature\n */\n\nimport { \n  EnergyProfile, \n  EnergyProfilePoint, \n  TransitionState, \n  ReactionCoordinate, \n  BondChange,\n  ReactionConditions,\n  ThermodynamicsResult \n} from './types';\nimport { KineticsResult, ArrheniusData, ReactionStep } from '../kinetics/types';\n\nexport class EnergyProfileGenerator {\n  private temperature: number = 298.15; // Default 25°C\n  private pressure: number = 101325;    // Default 1 atm\n\n  /**\n   * Generate energy profile from thermodynamics and kinetics data\n   */\n  generateProfile(\n    thermodynamics: ThermodynamicsResult,\n    kinetics?: KineticsResult,\n    customSteps?: TransitionState[]\n  ): EnergyProfile {\n    const points: EnergyProfilePoint[] = [];\n    let activationEnergyForward = 0;\n    let activationEnergyReverse = 0;\n\n    // Start with reactants at energy = 0\n    points.push({\n      coordinate: 0,\n      energy: 0,\n      type: 'reactant',\n      label: 'Reactants',\n      species: this.extractReactants(thermodynamics)\n    });\n\n    // Add transition states and intermediates\n    if (kinetics?.mechanism && kinetics.mechanism.length > 0) {\n      this.addMechanismSteps(points, kinetics.mechanism, thermodynamics.deltaH);\n      activationEnergyForward = kinetics.activationEnergy;\n      activationEnergyReverse = kinetics.activationEnergy + thermodynamics.deltaH;\n    } else if (customSteps) {\n      this.addCustomSteps(points, customSteps);\n    } else if (kinetics) {\n      // Simple single-step reaction with kinetics data\n      this.addSimpleTransitionState(points, thermodynamics, kinetics.activationEnergy);\n      activationEnergyForward = kinetics.activationEnergy;\n      activationEnergyReverse = kinetics.activationEnergy + thermodynamics.deltaH;\n    } else {\n      // Simple single-step reaction\n      this.addSimpleTransitionState(points, thermodynamics);\n      activationEnergyForward = this.estimateActivationEnergy(thermodynamics);\n      activationEnergyReverse = activationEnergyForward + thermodynamics.deltaH;\n    }\n\n    // End with products\n    points.push({\n      coordinate: 1,\n      energy: thermodynamics.deltaH,\n      type: 'product',\n      label: 'Products',\n      species: this.extractProducts(thermodynamics)\n    });\n\n    // Find rate-determining step\n    const rateDeterminingStep = this.findRateDeterminingStep(points);\n\n    return {\n      points,\n      deltaE: thermodynamics.deltaH,\n      activationEnergyForward,\n      activationEnergyReverse,\n      steps: points.filter(p => p.type === 'transition-state').length,\n      rateDeterminingStep,\n      temperature: this.temperature,\n      pressure: this.pressure,\n      isExothermic: thermodynamics.deltaH < 0\n    };\n  }\n\n  /**\n   * Generate energy profile for multi-step mechanism\n   */\n  generateMechanismProfile(\n    mechanism: ReactionStep[],\n    overallThermodynamics: ThermodynamicsResult\n  ): EnergyProfile {\n    const points: EnergyProfilePoint[] = [];\n    let currentEnergy = 0;\n    \n    // Reactants\n    points.push({\n      coordinate: 0,\n      energy: 0,\n      type: 'reactant',\n      label: 'Reactants'\n    });\n\n    // Process each step\n    mechanism.forEach((step, index) => {\n      const stepCoordinate = (index + 0.5) / mechanism.length;\n      const nextCoordinate = (index + 1) / mechanism.length;\n      \n      // Estimate step energetics\n      const stepDeltaH = overallThermodynamics.deltaH / mechanism.length;\n      const stepActivationE = this.estimateStepActivationEnergy(step, stepDeltaH);\n      \n      // Transition state\n      points.push({\n        coordinate: stepCoordinate,\n        energy: currentEnergy + stepActivationE,\n        type: 'transition-state',\n        label: `TS${index + 1}`,\n        species: this.extractSpeciesFromEquation(step.equation)\n      });\n\n      // Intermediate or product\n      currentEnergy += stepDeltaH;\n      if (index < mechanism.length - 1) {\n        points.push({\n          coordinate: nextCoordinate,\n          energy: currentEnergy,\n          type: 'intermediate',\n          label: `Intermediate${index + 1}`\n        });\n      }\n    });\n\n    // Final products\n    points.push({\n      coordinate: 1,\n      energy: overallThermodynamics.deltaH,\n      type: 'product',\n      label: 'Products'\n    });\n\n    return {\n      points,\n      deltaE: overallThermodynamics.deltaH,\n      activationEnergyForward: Math.max(...points.filter(p => p.type === 'transition-state').map(p => p.energy)),\n      activationEnergyReverse: Math.max(...points.filter(p => p.type === 'transition-state').map(p => p.energy)) + overallThermodynamics.deltaH,\n      steps: mechanism.length,\n      rateDeterminingStep: this.findRateDeterminingStep(points),\n      temperature: this.temperature,\n      pressure: this.pressure,\n      isExothermic: overallThermodynamics.deltaH < 0\n    };\n  }\n\n  /**\n   * Generate temperature-dependent energy profiles\n   */\n  generateTemperatureProfiles(\n    thermodynamics: ThermodynamicsResult,\n    temperatures: number[],\n    kinetics?: KineticsResult\n  ): Array<{ temperature: number; profile: EnergyProfile }> {\n    return temperatures.map(temp => {\n      this.temperature = temp;\n      \n      // Adjust thermodynamics for temperature\n      const adjustedThermo = this.adjustThermodynamicsForTemperature(thermodynamics, temp);\n      \n      // Adjust kinetics for temperature\n      let adjustedKinetics = kinetics;\n      if (kinetics && kinetics.temperatureDependence) {\n        adjustedKinetics = this.adjustKineticsForTemperature(kinetics, temp);\n      }\n\n      const profile = this.generateProfile(adjustedThermo, adjustedKinetics);\n      \n      return { temperature: temp, profile };\n    });\n  }\n\n  /**\n   * Generate reaction coordinate data\n   */\n  generateReactionCoordinate(\n    reactionType: 'SN1' | 'SN2' | 'E1' | 'E2' | 'addition' | 'elimination' | 'substitution'\n  ): ReactionCoordinate {\n    const coordinates = {\n      'SN1': {\n        description: 'C-leaving group distance',\n        units: 'Å',\n        physicalMeaning: 'Bond breaking leads to carbocation formation',\n        range: [1.5, 3.5] as [number, number]\n      },\n      'SN2': {\n        description: 'Nucleophile-C-leaving group angle',\n        units: 'degrees',\n        physicalMeaning: 'Backside attack through linear transition state',\n        range: [109, 180] as [number, number]\n      },\n      'E1': {\n        description: 'C-leaving group distance',\n        units: 'Å',\n        physicalMeaning: 'Elimination via carbocation intermediate',\n        range: [1.5, 3.5] as [number, number]\n      },\n      'E2': {\n        description: 'Base-H and C-leaving group distances',\n        units: 'Å',\n        physicalMeaning: 'Concerted elimination mechanism',\n        range: [1.0, 3.0] as [number, number]\n      },\n      'addition': {\n        description: 'C=C bond length',\n        units: 'Å',\n        physicalMeaning: 'Double bond breaking during addition',\n        range: [1.34, 1.54] as [number, number]\n      },\n      'elimination': {\n        description: 'C-C bond distance',\n        units: 'Å',\n        physicalMeaning: 'Bond formation during elimination',\n        range: [1.54, 1.34] as [number, number]\n      },\n      'substitution': {\n        description: 'Bond forming/breaking ratio',\n        units: 'dimensionless',\n        physicalMeaning: 'Extent of bond formation vs. breaking',\n        range: [0, 1] as [number, number]\n      }\n    };\n\n    return coordinates[reactionType];\n  }\n\n  /**\n   * Export profile data for visualization libraries\n   */\n  exportForVisualization(\n    profile: EnergyProfile,\n    format: 'plotly' | 'chartjs' | 'd3' | 'csv'\n  ): any {\n    switch (format) {\n      case 'plotly':\n        return this.exportForPlotly(profile);\n      case 'chartjs':\n        return this.exportForChartJS(profile);\n      case 'd3':\n        return this.exportForD3(profile);\n      case 'csv':\n        return this.exportForCSV(profile);\n      default:\n        throw new Error(`Unsupported export format: ${format}`);\n    }\n  }\n\n  // Private helper methods\n\n  private addMechanismSteps(points: EnergyProfilePoint[], mechanism: ReactionStep[], deltaH: number): void {\n    const stepDeltaH = deltaH / mechanism.length;\n    let currentEnergy = 0;\n\n    mechanism.forEach((step, index) => {\n      const coordinate = (index + 0.5) / (mechanism.length + 1);\n      const activationE = this.estimateStepActivationEnergy(step, stepDeltaH);\n      \n      points.push({\n        coordinate,\n        energy: currentEnergy + activationE,\n        type: 'transition-state',\n        label: `TS${index + 1}`,\n        species: this.extractSpeciesFromEquation(step.equation)\n      });\n\n      if (index < mechanism.length - 1) {\n        currentEnergy += stepDeltaH;\n        points.push({\n          coordinate: (index + 1) / (mechanism.length + 1),\n          energy: currentEnergy,\n          type: 'intermediate',\n          label: `Int${index + 1}`\n        });\n      }\n    });\n  }\n\n  private addCustomSteps(points: EnergyProfilePoint[], customSteps: TransitionState[]): void {\n    customSteps.forEach((ts, index) => {\n      points.push({\n        coordinate: ts.coordinate,\n        energy: ts.energy,\n        type: 'transition-state',\n        label: `TS${index + 1}`,\n        species: ts.involvedSpecies\n      });\n    });\n  }\n\n  private addSimpleTransitionState(points: EnergyProfilePoint[], thermodynamics: ThermodynamicsResult, providedActivationE?: number): void {\n    const activationE = providedActivationE !== undefined ? providedActivationE : this.estimateActivationEnergy(thermodynamics);\n    \n    points.push({\n      coordinate: 0.5,\n      energy: activationE,\n      type: 'transition-state',\n      label: 'Transition State'\n    });\n  }\n\n  private estimateActivationEnergy(thermodynamics: ThermodynamicsResult): number {\n    // Hammond's postulate: endothermic reactions have late transition states\n    const baseActivation = 80; // kJ/mol baseline\n    const hammondCorrection = Math.max(0, thermodynamics.deltaH * 0.3);\n    return baseActivation + hammondCorrection;\n  }\n\n  private estimateStepActivationEnergy(step: ReactionStep, stepDeltaH: number): number {\n    const baseActivation = 60; // kJ/mol for elementary steps\n    const thermodynamicCorrection = Math.max(0, stepDeltaH * 0.3);\n    \n    // Adjust based on step type\n    const typeFactors = {\n      'elementary': 1.0,\n      'fast-equilibrium': 0.7,\n      'rate-determining': 1.5\n    };\n    \n    return (baseActivation + thermodynamicCorrection) * typeFactors[step.type];\n  }\n\n  private findRateDeterminingStep(points: EnergyProfilePoint[]): number {\n    const transitionStates = points.filter(p => p.type === 'transition-state');\n    if (transitionStates.length === 0) return 0;\n    \n    const highestEnergy = Math.max(...transitionStates.map(p => p.energy));\n    return transitionStates.findIndex(p => p.energy === highestEnergy);\n  }\n\n  private extractReactants(thermodynamics: ThermodynamicsResult): string[] {\n    // This would need to be implemented based on the actual equation structure\n    return ['Reactants'];\n  }\n\n  private extractProducts(thermodynamics: ThermodynamicsResult): string[] {\n    // This would need to be implemented based on the actual equation structure\n    return ['Products'];\n  }\n\n  private extractSpeciesFromEquation(equation: string): string[] {\n    // Parse equation to extract species\n    const parts = equation.split('->')[0].trim().split('+');\n    return parts.map(part => part.trim());\n  }\n\n  private adjustThermodynamicsForTemperature(\n    original: ThermodynamicsResult, \n    temperature: number\n  ): ThermodynamicsResult {\n    // Simplified temperature dependence\n    const tempRatio = temperature / 298.15;\n    \n    return {\n      ...original,\n      deltaH: original.deltaH * tempRatio,\n      deltaG: original.deltaG + original.deltaS * (temperature - 298.15) / 1000,\n      conditions: { ...original.conditions, temperature }\n    };\n  }\n\n  private adjustKineticsForTemperature(original: KineticsResult, temperature: number): KineticsResult {\n    const arrhenius = original.temperatureDependence;\n    const R = 8.314; // J/(mol·K)\n    \n    // Arrhenius equation: k = A * exp(-Ea/RT)\n    const newRateConstant = arrhenius.preExponentialFactor * \n      Math.exp(-arrhenius.activationEnergy * 1000 / (R * temperature));\n    \n    return {\n      ...original,\n      rateConstant: newRateConstant,\n      conditions: { ...original.conditions, temperature }\n    };\n  }\n\n  private exportForPlotly(profile: EnergyProfile): any {\n    return {\n      data: [{\n        x: profile.points.map(p => p.coordinate),\n        y: profile.points.map(p => p.energy),\n        type: 'scatter',\n        mode: 'lines+markers',\n        name: 'Energy Profile',\n        line: { shape: 'spline' },\n        marker: {\n          size: profile.points.map(p => p.type === 'transition-state' ? 10 : 6),\n          color: profile.points.map(p => {\n            switch (p.type) {\n              case 'reactant': return 'blue';\n              case 'product': return 'green';\n              case 'transition-state': return 'red';\n              case 'intermediate': return 'orange';\n              default: return 'gray';\n            }\n          })\n        }\n      }],\n      layout: {\n        title: 'Reaction Energy Profile',\n        xaxis: { title: 'Reaction Coordinate' },\n        yaxis: { title: 'Energy (kJ/mol)' },\n        annotations: profile.points.map(p => ({\n          x: p.coordinate,\n          y: p.energy,\n          text: p.label,\n          showarrow: true,\n          arrowhead: 2\n        }))\n      }\n    };\n  }\n\n  private exportForChartJS(profile: EnergyProfile): any {\n    return {\n      type: 'line',\n      data: {\n        labels: profile.points.map(p => p.coordinate.toFixed(2)),\n        datasets: [{\n          label: 'Energy Profile',\n          data: profile.points.map(p => p.energy),\n          borderColor: 'rgb(75, 192, 192)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          tension: 0.4\n        }]\n      },\n      options: {\n        responsive: true,\n        scales: {\n          x: { title: { display: true, text: 'Reaction Coordinate' } },\n          y: { title: { display: true, text: 'Energy (kJ/mol)' } }\n        },\n        plugins: {\n          tooltip: {\n            callbacks: {\n              title: (context: any) => profile.points[context[0].dataIndex].label || '',\n              label: (context: any) => `Energy: ${context.parsed.y.toFixed(2)} kJ/mol`\n            }\n          }\n        }\n      }\n    };\n  }\n\n  private exportForD3(profile: EnergyProfile): any {\n    return {\n      nodes: profile.points.map((p, i) => ({\n        id: i,\n        x: p.coordinate * 100,\n        y: 100 - (p.energy / Math.max(...profile.points.map(pt => pt.energy))) * 80,\n        type: p.type,\n        label: p.label,\n        energy: p.energy\n      })),\n      links: profile.points.slice(0, -1).map((_, i) => ({\n        source: i,\n        target: i + 1\n      }))\n    };\n  }\n\n  private exportForCSV(profile: EnergyProfile): string {\n    const header = 'Coordinate,Energy(kJ/mol),Type,Label';\n    const rows = profile.points.map(p => \n      `${p.coordinate},${p.energy},${p.type},\"${p.label || ''}\"`\n    );\n    return [header, ...rows].join('\\n');\n  }\n\n  /**\n   * Set calculation conditions\n   */\n  setConditions(temperature: number, pressure: number): void {\n    this.temperature = temperature;\n    this.pressure = pressure;\n  }\n\n  /**\n   * Generate energy profile with bond-by-bond analysis\n   */\n  generateDetailedProfile(\n    thermodynamics: ThermodynamicsResult,\n    bondChanges: BondChange[]\n  ): EnergyProfile & { bondAnalysis: BondChange[] } {\n    const profile = this.generateProfile(thermodynamics);\n    \n    return {\n      ...profile,\n      bondAnalysis: bondChanges\n    };\n  }\n}\n\n/**\n * Convenience function to create energy profile\n */\nexport function createEnergyProfile(\n  thermodynamics: ThermodynamicsResult,\n  kinetics?: KineticsResult,\n  options?: { temperature?: number; pressure?: number }\n): EnergyProfile {\n  const generator = new EnergyProfileGenerator();\n  \n  if (options?.temperature || options?.pressure) {\n    generator.setConditions(\n      options.temperature || 298.15,\n      options.pressure || 101325\n    );\n  }\n  \n  return generator.generateProfile(thermodynamics, kinetics);\n}\n\n/**\n * Export energy profile for popular visualization libraries\n */\nexport function exportEnergyProfile(\n  profile: EnergyProfile,\n  format: 'plotly' | 'chartjs' | 'd3' | 'csv'\n): any {\n  const generator = new EnergyProfileGenerator();\n  return generator.exportForVisualization(profile, format);\n}\n","/**\n * CREB Reaction Kinetics Calculator\n * Core calculator for reaction kinetics analysis\n */\n\nimport { \n  ReactionConditions, \n  ArrheniusData, \n  KineticsResult, \n  TemperatureProfile,\n  ReactionClass,\n  RateLawType,\n  ReactionStep,\n  CatalystData\n} from './types';\nimport { EquationParser } from '../utils';\n\nexport class ReactionKinetics {\n  private static readonly GAS_CONSTANT = 8.314; // J/(mol·K)\n  private static readonly KELVIN_CELSIUS_OFFSET = 273.15;\n\n  /**\n   * Calculate reaction rate constant using Arrhenius equation\n   * k = A * exp(-Ea / (R * T))\n   */\n  static calculateRateConstant(\n    arrhenius: ArrheniusData, \n    temperature: number\n  ): number {\n    const { preExponentialFactor, activationEnergy } = arrhenius;\n    const energyJoules = activationEnergy * 1000; // Convert kJ/mol to J/mol\n    \n    return preExponentialFactor * Math.exp(\n      -energyJoules / (this.GAS_CONSTANT * temperature)\n    );\n  }\n\n  /**\n   * Calculate activation energy from rate constants at two temperatures\n   * Ea = R * ln(k2/k1) / (1/T1 - 1/T2)\n   */\n  static calculateActivationEnergy(\n    k1: number, T1: number,\n    k2: number, T2: number\n  ): number {\n    const lnRatio = Math.log(k2 / k1);\n    const tempTerm = (1 / T1) - (1 / T2);\n    \n    return (this.GAS_CONSTANT * lnRatio / tempTerm) / 1000; // Convert to kJ/mol\n  }\n\n  /**\n   * Generate temperature profile for reaction kinetics\n   */\n  static generateTemperatureProfile(\n    arrhenius: ArrheniusData,\n    tempRange: [number, number],\n    points: number = 20\n  ): TemperatureProfile[] {\n    const [minTemp, maxTemp] = tempRange;\n    const step = (maxTemp - minTemp) / (points - 1);\n    \n    return Array.from({ length: points }, (_, i) => {\n      const temperature = minTemp + (i * step);\n      const rateConstant = this.calculateRateConstant(arrhenius, temperature);\n      \n      return {\n        temperature,\n        rateConstant,\n        reactionRate: rateConstant // Base rate (will be modified by concentrations)\n      };\n    });\n  }\n\n  /**\n   * Determine reaction class from chemical equation\n   */\n  static classifyReaction(equation: string): ReactionClass {\n    try {\n      const parser = new EquationParser(equation);\n      const parsed = parser.parse();\n      const reactantCount = parsed.reactants.length;\n      \n      // Basic classification based on number of reactants\n      if (reactantCount === 1) return 'unimolecular';\n      if (reactantCount === 2) return 'bimolecular';\n      if (reactantCount === 3) return 'termolecular';\n      \n      return 'complex';\n    } catch {\n      return 'complex';\n    }\n  }\n\n  /**\n   * Calculate half-life for first-order reactions\n   * t₁/₂ = ln(2) / k\n   */\n  static calculateHalfLife(rateConstant: number, order: number = 1): number {\n    if (order === 1) {\n      return Math.log(2) / rateConstant;\n    }\n    \n    // For other orders, half-life depends on initial concentration\n    // Return NaN to indicate additional parameters needed\n    return NaN;\n  }\n\n  /**\n   * Estimate pre-exponential factor using transition state theory\n   * A ≈ (kB * T / h) * exp(ΔS‡ / R)\n   */\n  static estimatePreExponentialFactor(\n    temperature: number,\n    entropyOfActivation: number = 0 // J/(mol·K), default assumes no entropy change\n  ): number {\n    const kB = 1.381e-23; // Boltzmann constant (J/K)\n    const h = 6.626e-34;  // Planck constant (J·s)\n    \n    const frequencyFactor = (kB * temperature) / h;\n    const entropyTerm = Math.exp(entropyOfActivation / this.GAS_CONSTANT);\n    \n    return frequencyFactor * entropyTerm;\n  }\n\n  /**\n   * Apply catalyst effect to reaction kinetics\n   */\n  static applyCatalystEffect(\n    baseKinetics: Partial<KineticsResult>,\n    catalyst: CatalystData\n  ): Partial<KineticsResult> {\n    const { effectOnRate, effectOnActivationEnergy } = catalyst;\n    \n    return {\n      ...baseKinetics,\n      rateConstant: (baseKinetics.rateConstant || 0) * effectOnRate,\n      activationEnergy: (baseKinetics.activationEnergy || 0) + effectOnActivationEnergy,\n      catalystEffect: catalyst\n    };\n  }\n\n  /**\n   * Generate rate law expression\n   */\n  static generateRateLaw(\n    equation: string,\n    orders: Record<string, number>,\n    rateConstant: number\n  ): string {\n    try {\n      const parser = new EquationParser(equation);\n      const parsed = parser.parse();\n      const reactants = parsed.reactants;\n      \n      let rateLaw = `Rate = ${rateConstant.toExponential(3)}`;\n      \n      for (const reactant of reactants) {\n        const order = orders[reactant] || 1;\n        if (order === 1) {\n          rateLaw += `[${reactant}]`;\n        } else if (order !== 0) {\n          rateLaw += `[${reactant}]^${order}`;\n        }\n      }\n      \n      return rateLaw;\n    } catch {\n      return `Rate = ${rateConstant.toExponential(3)}[A]^n[B]^m`;\n    }\n  }\n\n  /**\n   * Comprehensive kinetics analysis\n   */\n  static analyzeKinetics(\n    equation: string,\n    conditions: ReactionConditions,\n    arrheniusData?: ArrheniusData\n  ): KineticsResult {\n    const reactionClass = this.classifyReaction(equation);\n    \n    // If no Arrhenius data provided, estimate based on reaction type\n    const arrhenius = arrheniusData || this.estimateArrheniusParameters(equation, reactionClass);\n    \n    const rateConstant = this.calculateRateConstant(arrhenius, conditions.temperature);\n    const halfLife = this.calculateHalfLife(rateConstant);\n    \n    // Generate basic reaction orders (1 for each reactant by default)\n    const parser = new EquationParser(equation);\n    const parsed = parser.parse();\n    const orders = parsed.reactants.reduce((acc, reactant) => {\n      acc[reactant] = 1; // Assume first order in each reactant\n      return acc;\n    }, {} as Record<string, number>);\n    \n    const overallOrder = Object.values(orders).reduce((sum, order) => sum + order, 0);\n    const rateLaw = this.generateRateLaw(equation, orders, rateConstant);\n    \n    return {\n      equation,\n      rateConstant,\n      activationEnergy: arrhenius.activationEnergy,\n      reactionOrder: overallOrder,\n      mechanism: [{\n        equation,\n        type: 'elementary',\n        rateConstant,\n        order: orders,\n        mechanism: 'Single-step elementary reaction'\n      }],\n      temperatureDependence: arrhenius,\n      rateLaw,\n      conditions,\n      halfLife: isFinite(halfLife) ? halfLife : undefined,\n      confidence: arrheniusData ? 0.8 : 0.5, // Lower confidence for estimates\n      dataSource: arrheniusData ? 'literature' : 'estimated'\n    };\n  }\n\n  /**\n   * Estimate Arrhenius parameters for unknown reactions\n   */\n  private static estimateArrheniusParameters(\n    equation: string,\n    reactionClass: ReactionClass\n  ): ArrheniusData {\n    // Rough estimates based on reaction class\n    const estimates = {\n      unimolecular: { A: 1e13, Ea: 150 },      // s⁻¹, kJ/mol\n      bimolecular: { A: 1e10, Ea: 50 },       // M⁻¹s⁻¹, kJ/mol\n      termolecular: { A: 1e6, Ea: 25 },       // M⁻²s⁻¹, kJ/mol\n      'enzyme-catalyzed': { A: 1e7, Ea: 40 },\n      autocatalytic: { A: 1e8, Ea: 60 },\n      'chain-reaction': { A: 1e12, Ea: 30 },\n      oscillating: { A: 1e9, Ea: 70 },\n      complex: { A: 1e9, Ea: 80 }\n    };\n    \n    const { A, Ea } = estimates[reactionClass] || estimates.complex;\n    \n    return {\n      preExponentialFactor: A,\n      activationEnergy: Ea,\n      temperatureRange: [250, 500], // K\n      rSquared: 0.5 // Low confidence for estimates\n    };\n  }\n}\n","/**\n * CREB Reaction Mechanism Analyzer\n * Analyzes complex reaction mechanisms and pathways\n */\n\nimport { \n  ReactionStep, \n  ReactionConditions, \n  KineticsResult,\n  ArrheniusData,\n  ReactionClass \n} from './types';\nimport { ReactionKinetics } from './calculator';\nimport { EquationParser } from '../utils';\n\nexport interface MechanismStep {\n  stepNumber: number;\n  equation: string;\n  type: 'elementary' | 'fast-equilibrium' | 'rate-determining' | 'pre-equilibrium';\n  intermediates: string[];\n  rateConstant: number;\n  reverseRateConstant?: number;\n  steadyStateSpecies?: string[];\n}\n\nexport interface MechanismAnalysis {\n  mechanism: MechanismStep[];\n  overallReaction: string;\n  rateExpression: string;\n  rateDeterminingStep: number;\n  intermediates: string[];\n  catalysts: string[];\n  approximations: string[];\n  validity: {\n    steadyState: boolean;\n    preEquilibrium: boolean;\n    rateApproximation: boolean;\n  };\n  confidence: number;\n}\n\nexport interface PathwayComparison {\n  pathway1: MechanismAnalysis;\n  pathway2: MechanismAnalysis;\n  preferredPathway: 1 | 2;\n  reasons: string[];\n  selectivityFactor: number;\n}\n\nexport class MechanismAnalyzer {\n  \n  /**\n   * Analyze a multi-step reaction mechanism\n   */\n  static analyzeMechanism(\n    steps: MechanismStep[],\n    conditions: ReactionConditions\n  ): MechanismAnalysis {\n    // Find intermediates (species that appear as both products and reactants)\n    const intermediates = this.findIntermediates(steps);\n    \n    // Find catalysts (species that appear on both sides but are not consumed)\n    const catalysts = this.findCatalysts(steps);\n    \n    // Determine rate-determining step\n    const rateDeterminingStep = this.findRateDeterminingStep(steps);\n    \n    // Generate overall reaction equation\n    const overallReaction = this.deriveOverallReaction(steps);\n    \n    // Apply steady-state approximation\n    const rateExpression = this.deriveSteadyStateRateExpression(steps, intermediates);\n    \n    // Determine valid approximations\n    const approximations = this.identifyValidApproximations(steps, conditions);\n    \n    return {\n      mechanism: steps,\n      overallReaction,\n      rateExpression,\n      rateDeterminingStep,\n      intermediates,\n      catalysts,\n      approximations,\n      validity: {\n        steadyState: intermediates.length > 0,\n        preEquilibrium: this.hasPreEquilibrium(steps),\n        rateApproximation: rateDeterminingStep >= 0\n      },\n      confidence: this.calculateMechanismConfidence(steps, approximations)\n    };\n  }\n\n  /**\n   * Compare two competing reaction pathways\n   */\n  static comparePathways(\n    pathway1: MechanismStep[],\n    pathway2: MechanismStep[],\n    conditions: ReactionConditions\n  ): PathwayComparison {\n    const analysis1 = this.analyzeMechanism(pathway1, conditions);\n    const analysis2 = this.analyzeMechanism(pathway2, conditions);\n    \n    // Calculate overall rate constants for comparison\n    const rate1 = this.calculateOverallRate(pathway1, conditions);\n    const rate2 = this.calculateOverallRate(pathway2, conditions);\n    \n    const selectivityFactor = rate1 / rate2;\n    const preferredPathway = rate1 > rate2 ? 1 : 2;\n    \n    const reasons = this.generateComparisonReasons(analysis1, analysis2, rate1, rate2);\n    \n    return {\n      pathway1: analysis1,\n      pathway2: analysis2,\n      preferredPathway,\n      reasons,\n      selectivityFactor\n    };\n  }\n\n  /**\n   * Apply pre-equilibrium approximation\n   */\n  static applyPreEquilibriumApproximation(\n    steps: MechanismStep[],\n    equilibriumSteps: number[]\n  ): string {\n    // For fast pre-equilibrium steps, assume rapid equilibrium\n    // K_eq = k_forward / k_reverse\n    \n    let rateExpression = \"Rate = \";\n    const slowStep = steps.find(step => !equilibriumSteps.includes(step.stepNumber));\n    \n    if (slowStep) {\n      rateExpression += `k${slowStep.stepNumber}`;\n      \n      // Add concentration terms modified by equilibrium constants\n      equilibriumSteps.forEach(stepNum => {\n        const step = steps.find(s => s.stepNumber === stepNum);\n        if (step && step.reverseRateConstant) {\n          const keq = step.rateConstant / step.reverseRateConstant;\n          rateExpression += ` × K${stepNum}(${keq.toExponential(2)})`;\n        }\n      });\n    }\n    \n    return rateExpression;\n  }\n\n  /**\n   * Apply steady-state approximation\n   */\n  static applySteadyStateApproximation(\n    steps: MechanismStep[],\n    steadyStateSpecies: string[]\n  ): string {\n    // For steady-state species: d[I]/dt = 0\n    // Rate of formation = Rate of consumption\n    \n    let rateExpression = \"Rate = \";\n    \n    // Simplified: find the slowest step\n    const slowestStep = steps.reduce((prev, current) => \n      prev.rateConstant < current.rateConstant ? prev : current\n    );\n    \n    rateExpression += `k${slowestStep.stepNumber}`;\n    \n    // Add pre-equilibrium factors if applicable\n    steadyStateSpecies.forEach(species => {\n      rateExpression += `[${species}]_ss`;\n    });\n    \n    return rateExpression;\n  }\n\n  /**\n   * Find species that appear as both products and reactants (intermediates)\n   */\n  private static findIntermediates(steps: MechanismStep[]): string[] {\n    const products = new Set<string>();\n    const reactants = new Set<string>();\n    \n    steps.forEach(step => {\n      try {\n        const parser = new EquationParser(step.equation);\n        const parsed = parser.parse();\n        \n        parsed.reactants.forEach(r => reactants.add(r));\n        parsed.products.forEach(p => products.add(p));\n      } catch {\n        // Skip invalid equations\n      }\n    });\n    \n    // Intermediates appear in both sets\n    return Array.from(products).filter(species => reactants.has(species));\n  }\n\n  /**\n   * Find species that appear on both sides but are not consumed (catalysts)\n   */\n  private static findCatalysts(steps: MechanismStep[]): string[] {\n    const speciesBalance: Record<string, number> = {};\n    \n    steps.forEach(step => {\n      try {\n        const parser = new EquationParser(step.equation);\n        const parsed = parser.parse();\n        \n        // Subtract reactants, add products\n        parsed.reactants.forEach(r => {\n          speciesBalance[r] = (speciesBalance[r] || 0) - 1;\n        });\n        \n        parsed.products.forEach(p => {\n          speciesBalance[p] = (speciesBalance[p] || 0) + 1;\n        });\n      } catch {\n        // Skip invalid equations\n      }\n    });\n    \n    // Catalysts have net balance of zero\n    return Object.keys(speciesBalance).filter(species => speciesBalance[species] === 0);\n  }\n\n  /**\n   * Identify the rate-determining step (slowest step)\n   */\n  private static findRateDeterminingStep(steps: MechanismStep[]): number {\n    let slowestStep = steps[0];\n    let slowestIndex = 0;\n    \n    steps.forEach((step, index) => {\n      if (step.rateConstant < slowestStep.rateConstant) {\n        slowestStep = step;\n        slowestIndex = index;\n      }\n    });\n    \n    return slowestIndex;\n  }\n\n  /**\n   * Derive overall reaction from mechanism steps\n   */\n  private static deriveOverallReaction(steps: MechanismStep[]): string {\n    const netReactants: Record<string, number> = {};\n    const netProducts: Record<string, number> = {};\n    \n    steps.forEach(step => {\n      try {\n        const parser = new EquationParser(step.equation);\n        const parsed = parser.parse();\n        \n        parsed.reactants.forEach(r => {\n          netReactants[r] = (netReactants[r] || 0) + 1;\n        });\n        \n        parsed.products.forEach(p => {\n          netProducts[p] = (netProducts[p] || 0) + 1;\n        });\n      } catch {\n        // Skip invalid equations\n      }\n    });\n    \n    // Remove intermediates (species that appear on both sides)\n    const allSpecies = new Set([...Object.keys(netReactants), ...Object.keys(netProducts)]);\n    allSpecies.forEach(species => {\n      const reactantCount = netReactants[species] || 0;\n      const productCount = netProducts[species] || 0;\n      \n      if (reactantCount > 0 && productCount > 0) {\n        const minCount = Math.min(reactantCount, productCount);\n        netReactants[species] -= minCount;\n        netProducts[species] -= minCount;\n        \n        if (netReactants[species] === 0) delete netReactants[species];\n        if (netProducts[species] === 0) delete netProducts[species];\n      }\n    });\n    \n    // Build equation string\n    const reactantStr = Object.entries(netReactants)\n      .filter(([_, count]) => count > 0)\n      .map(([species, count]) => count > 1 ? `${count}${species}` : species)\n      .join(' + ');\n      \n    const productStr = Object.entries(netProducts)\n      .filter(([_, count]) => count > 0)\n      .map(([species, count]) => count > 1 ? `${count}${species}` : species)\n      .join(' + ');\n    \n    return `${reactantStr} = ${productStr}`;\n  }\n\n  /**\n   * Derive rate expression using steady-state approximation\n   */\n  private static deriveSteadyStateRateExpression(\n    steps: MechanismStep[], \n    intermediates: string[]\n  ): string {\n    if (intermediates.length === 0) {\n      // Simple elementary reaction\n      const step = steps[0];\n      return `Rate = k${step.stepNumber}[reactants]`;\n    }\n    \n    // Complex mechanism - simplified steady-state treatment\n    const rateDeterminingStep = this.findRateDeterminingStep(steps);\n    const rdsStep = steps[rateDeterminingStep];\n    \n    return `Rate = k${rdsStep.stepNumber}[reactants] (steady-state approximation)`;\n  }\n\n  /**\n   * Check if mechanism has pre-equilibrium steps\n   */\n  private static hasPreEquilibrium(steps: MechanismStep[]): boolean {\n    return steps.some(step => step.type === 'fast-equilibrium' || step.reverseRateConstant !== undefined);\n  }\n\n  /**\n   * Identify valid approximations for the mechanism\n   */\n  private static identifyValidApproximations(\n    steps: MechanismStep[], \n    conditions: ReactionConditions\n  ): string[] {\n    const approximations: string[] = [];\n    \n    // Check for pre-equilibrium\n    if (this.hasPreEquilibrium(steps)) {\n      approximations.push('Pre-equilibrium approximation');\n    }\n    \n    // Check for steady-state intermediates\n    const intermediates = this.findIntermediates(steps);\n    if (intermediates.length > 0) {\n      approximations.push('Steady-state approximation');\n    }\n    \n    // Check for rate-determining step\n    const rateDeterminingStep = this.findRateDeterminingStep(steps);\n    if (rateDeterminingStep >= 0) {\n      approximations.push('Rate-determining step approximation');\n    }\n    \n    return approximations;\n  }\n\n  /**\n   * Calculate overall reaction rate for pathway comparison\n   */\n  private static calculateOverallRate(\n    steps: MechanismStep[], \n    conditions: ReactionConditions\n  ): number {\n    // Simplified: use the slowest step as the overall rate\n    const rateDeterminingStep = this.findRateDeterminingStep(steps);\n    const rdsStep = steps[rateDeterminingStep];\n    \n    // Apply temperature dependence (simplified)\n    const temperatureFactor = Math.exp(-50000 / (8.314 * conditions.temperature)); // Rough estimate\n    \n    return rdsStep.rateConstant * temperatureFactor;\n  }\n\n  /**\n   * Generate reasons for pathway preference\n   */\n  private static generateComparisonReasons(\n    analysis1: MechanismAnalysis,\n    analysis2: MechanismAnalysis,\n    rate1: number,\n    rate2: number\n  ): string[] {\n    const reasons: string[] = [];\n    \n    if (rate1 > rate2) {\n      reasons.push(`Pathway 1 is ${(rate1/rate2).toFixed(2)}x faster`);\n    } else {\n      reasons.push(`Pathway 2 is ${(rate2/rate1).toFixed(2)}x faster`);\n    }\n    \n    if (analysis1.intermediates.length < analysis2.intermediates.length) {\n      reasons.push('Pathway 1 has fewer intermediates');\n    } else if (analysis2.intermediates.length < analysis1.intermediates.length) {\n      reasons.push('Pathway 2 has fewer intermediates');\n    }\n    \n    if (analysis1.confidence > analysis2.confidence) {\n      reasons.push('Pathway 1 has higher mechanistic confidence');\n    } else if (analysis2.confidence > analysis1.confidence) {\n      reasons.push('Pathway 2 has higher mechanistic confidence');\n    }\n    \n    return reasons;\n  }\n\n  /**\n   * Calculate confidence in mechanism analysis\n   */\n  private static calculateMechanismConfidence(\n    steps: MechanismStep[], \n    approximations: string[]\n  ): number {\n    let confidence = 0.5; // Base confidence\n    \n    // Higher confidence for well-defined mechanisms\n    if (steps.length > 1 && steps.length <= 5) confidence += 0.2;\n    \n    // Higher confidence if approximations are valid\n    if (approximations.length > 0) confidence += 0.1 * approximations.length;\n    \n    // Lower confidence for complex mechanisms\n    if (steps.length > 5) confidence -= 0.1;\n    \n    return Math.min(Math.max(confidence, 0), 1);\n  }\n}\n","/**\n * CREB Reaction Safety Analyzer\n * Analyzes reaction safety and provides hazard assessments\n */\n\nimport { ReactionConditions, KineticsResult } from './types';\nimport { EquationParser } from '../utils';\n\nexport interface SafetyData {\n  compound: string;\n  hazardClass: 'low' | 'moderate' | 'high' | 'extreme';\n  flashPoint?: number;          // °C\n  autoIgnitionTemp?: number;    // °C\n  explosiveLimits?: [number, number]; // [LEL, UEL] % by volume\n  toxicity: ToxicityData;\n  reactivity: ReactivityData;\n  physicalHazards: string[];\n  healthHazards: string[];\n  environmentalHazards: string[];\n}\n\nexport interface ToxicityData {\n  ld50Oral?: number;           // mg/kg (rat)\n  ld50Dermal?: number;         // mg/kg (rabbit)\n  lc50Inhalation?: number;     // mg/L (rat, 4h)\n  carcinogen: boolean;\n  mutagen: boolean;\n  teratogen: boolean;\n  classification: 'non-toxic' | 'harmful' | 'toxic' | 'very-toxic';\n}\n\nexport interface ReactivityData {\n  incompatibilities: string[];  // Chemicals to avoid\n  hazardousDecomposition: string[]; // Dangerous decomposition products\n  polymerization: 'stable' | 'may-occur' | 'hazardous';\n  waterReactive: boolean;\n  airSensitive: boolean;\n  lightSensitive: boolean;\n  shockSensitive: boolean;\n}\n\nexport interface ReactionSafetyAssessment {\n  equation: string;\n  overallRiskLevel: 'low' | 'moderate' | 'high' | 'extreme';\n  conditions: ReactionConditions;\n  hazards: {\n    thermal: ThermalHazard[];\n    chemical: ChemicalHazard[];\n    physical: PhysicalHazard[];\n    environmental: EnvironmentalHazard[];\n  };\n  recommendations: SafetyRecommendation[];\n  requiredPPE: string[];\n  containmentLevel: 'standard' | 'enhanced' | 'specialized';\n  monitoringParameters: string[];\n  emergencyProcedures: string[];\n  riskScore: number; // 0-100\n}\n\nexport interface ThermalHazard {\n  type: 'exothermic' | 'endothermic' | 'runaway' | 'explosion';\n  severity: 'low' | 'moderate' | 'high' | 'extreme';\n  description: string;\n  mitigationStrategies: string[];\n}\n\nexport interface ChemicalHazard {\n  type: 'toxic-gas' | 'corrosive' | 'incompatible' | 'unstable';\n  compounds: string[];\n  severity: 'low' | 'moderate' | 'high' | 'extreme';\n  description: string;\n  mitigationStrategies: string[];\n}\n\nexport interface PhysicalHazard {\n  type: 'pressure' | 'temperature' | 'mechanical' | 'electrical';\n  severity: 'low' | 'moderate' | 'high' | 'extreme';\n  description: string;\n  mitigationStrategies: string[];\n}\n\nexport interface EnvironmentalHazard {\n  type: 'aquatic-toxic' | 'air-pollutant' | 'soil-contaminant' | 'persistent';\n  compounds: string[];\n  severity: 'low' | 'moderate' | 'high' | 'extreme';\n  description: string;\n  mitigationStrategies: string[];\n}\n\nexport interface SafetyRecommendation {\n  category: 'equipment' | 'procedure' | 'monitoring' | 'emergency';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  implementation: string;\n}\n\nexport class ReactionSafetyAnalyzer {\n  private static readonly HAZARDOUS_COMPOUNDS = new Map<string, SafetyData>([\n    ['H2', {\n      compound: 'H2',\n      hazardClass: 'high',\n      flashPoint: -253,\n      autoIgnitionTemp: 500,\n      explosiveLimits: [4, 75],\n      toxicity: {\n        classification: 'non-toxic',\n        carcinogen: false,\n        mutagen: false,\n        teratogen: false\n      },\n      reactivity: {\n        incompatibilities: ['F2', 'Cl2', 'O2', 'oxidizing agents'],\n        hazardousDecomposition: [],\n        polymerization: 'stable',\n        waterReactive: false,\n        airSensitive: false,\n        lightSensitive: false,\n        shockSensitive: false\n      },\n      physicalHazards: ['Flammable gas', 'Asphyxiant', 'Pressure hazard'],\n      healthHazards: ['Asphyxiant'],\n      environmentalHazards: []\n    }],\n    ['Cl2', {\n      compound: 'Cl2',\n      hazardClass: 'extreme',\n      toxicity: {\n        lc50Inhalation: 0.293,\n        classification: 'very-toxic',\n        carcinogen: false,\n        mutagen: false,\n        teratogen: false\n      },\n      reactivity: {\n        incompatibilities: ['H2', 'NH3', 'hydrocarbons', 'metals'],\n        hazardousDecomposition: ['HCl'],\n        polymerization: 'stable',\n        waterReactive: true,\n        airSensitive: false,\n        lightSensitive: true,\n        shockSensitive: false\n      },\n      physicalHazards: ['Corrosive gas', 'Pressure hazard'],\n      healthHazards: ['Severe respiratory irritant', 'Corrosive to tissues'],\n      environmentalHazards: ['Aquatic toxin', 'Ozone depleting']\n    }],\n    ['HF', {\n      compound: 'HF',\n      hazardClass: 'extreme',\n      toxicity: {\n        ld50Oral: 15,\n        ld50Dermal: 410,\n        lc50Inhalation: 0.342,\n        classification: 'very-toxic',\n        carcinogen: false,\n        mutagen: false,\n        teratogen: false\n      },\n      reactivity: {\n        incompatibilities: ['glass', 'metals', 'silicates'],\n        hazardousDecomposition: ['F2'],\n        polymerization: 'stable',\n        waterReactive: false,\n        airSensitive: false,\n        lightSensitive: false,\n        shockSensitive: false\n      },\n      physicalHazards: ['Highly corrosive'],\n      healthHazards: ['Severe burns', 'Bone and teeth damage', 'Systemic toxicity'],\n      environmentalHazards: ['Aquatic toxin']\n    }]\n  ]);\n\n  /**\n   * Perform comprehensive safety assessment of a reaction\n   */\n  static assessReactionSafety(\n    equation: string,\n    conditions: ReactionConditions,\n    kineticsData?: KineticsResult\n  ): ReactionSafetyAssessment {\n    // Parse the reaction to identify compounds\n    const compounds = this.extractCompoundsFromEquation(equation);\n    \n    // Assess individual compound hazards\n    const compoundHazards = compounds.map(compound => \n      this.getCompoundSafetyData(compound)\n    ).filter(Boolean) as SafetyData[];\n    \n    // Analyze thermal hazards\n    const thermalHazards = this.assessThermalHazards(equation, conditions, kineticsData);\n    \n    // Analyze chemical hazards\n    const chemicalHazards = this.assessChemicalHazards(compoundHazards, conditions);\n    \n    // Analyze physical hazards\n    const physicalHazards = this.assessPhysicalHazards(conditions, compoundHazards);\n    \n    // Analyze environmental hazards\n    const environmentalHazards = this.assessEnvironmentalHazards(compoundHazards);\n    \n    // Calculate overall risk\n    const riskScore = this.calculateRiskScore(thermalHazards, chemicalHazards, physicalHazards);\n    const overallRiskLevel = this.determineRiskLevel(riskScore);\n    \n    // Generate recommendations\n    const recommendations = this.generateSafetyRecommendations(\n      overallRiskLevel, \n      thermalHazards, \n      chemicalHazards, \n      physicalHazards\n    );\n    \n    // Determine required PPE\n    const requiredPPE = this.determineRequiredPPE(compoundHazards, overallRiskLevel);\n    \n    // Determine containment level\n    const containmentLevel = this.determineContainmentLevel(overallRiskLevel, compoundHazards);\n    \n    // Identify monitoring parameters\n    const monitoringParameters = this.identifyMonitoringParameters(compoundHazards, conditions);\n    \n    // Generate emergency procedures\n    const emergencyProcedures = this.generateEmergencyProcedures(overallRiskLevel, compoundHazards);\n    \n    return {\n      equation,\n      overallRiskLevel,\n      conditions,\n      hazards: {\n        thermal: thermalHazards,\n        chemical: chemicalHazards,\n        physical: physicalHazards,\n        environmental: environmentalHazards\n      },\n      recommendations,\n      requiredPPE,\n      containmentLevel,\n      monitoringParameters,\n      emergencyProcedures,\n      riskScore\n    };\n  }\n\n  /**\n   * Extract all chemical compounds from equation\n   */\n  private static extractCompoundsFromEquation(equation: string): string[] {\n    try {\n      const parser = new EquationParser(equation);\n      const parsed = parser.parse();\n      return [...parsed.reactants, ...parsed.products];\n    } catch {\n      return [];\n    }\n  }\n\n  /**\n   * Get safety data for a specific compound\n   */\n  private static getCompoundSafetyData(compound: string): SafetyData | null {\n    // Check our database first\n    if (this.HAZARDOUS_COMPOUNDS.has(compound)) {\n      return this.HAZARDOUS_COMPOUNDS.get(compound)!;\n    }\n    \n    // Estimate safety data for unknown compounds\n    return this.estimateCompoundSafety(compound);\n  }\n\n  /**\n   * Estimate safety data for unknown compounds\n   */\n  private static estimateCompoundSafety(compound: string): SafetyData {\n    // Basic estimation based on molecular features\n    let hazardClass: 'low' | 'moderate' | 'high' | 'extreme' = 'moderate';\n    const physicalHazards: string[] = [];\n    const healthHazards: string[] = [];\n    const environmentalHazards: string[] = [];\n    \n    // Simple heuristics\n    if (compound.includes('F')) {\n      hazardClass = 'high';\n      healthHazards.push('Potentially corrosive');\n    }\n    \n    if (compound.includes('Cl') || compound.includes('Br')) {\n      hazardClass = 'moderate';\n      environmentalHazards.push('Potentially harmful to aquatic life');\n    }\n    \n    if (compound.length === 2 && /^[A-Z][a-z]?$/.test(compound)) {\n      // Likely an element\n      physicalHazards.push('Elemental reactivity');\n    }\n    \n    return {\n      compound,\n      hazardClass,\n      toxicity: {\n        classification: 'harmful',\n        carcinogen: false,\n        mutagen: false,\n        teratogen: false\n      },\n      reactivity: {\n        incompatibilities: [],\n        hazardousDecomposition: [],\n        polymerization: 'stable',\n        waterReactive: false,\n        airSensitive: false,\n        lightSensitive: false,\n        shockSensitive: false\n      },\n      physicalHazards,\n      healthHazards,\n      environmentalHazards\n    };\n  }\n\n  /**\n   * Assess thermal hazards\n   */\n  private static assessThermalHazards(\n    equation: string,\n    conditions: ReactionConditions,\n    kineticsData?: KineticsResult\n  ): ThermalHazard[] {\n    const hazards: ThermalHazard[] = [];\n    \n    // High temperature warning\n    if (conditions.temperature > 373) { // Above 100°C\n      hazards.push({\n        type: 'exothermic',\n        severity: conditions.temperature > 573 ? 'high' : 'moderate',\n        description: `High reaction temperature (${conditions.temperature - 273.15}°C)`,\n        mitigationStrategies: [\n          'Use appropriate heating equipment',\n          'Monitor temperature continuously',\n          'Ensure adequate cooling capability'\n        ]\n      });\n    }\n    \n    // Pressure hazard\n    if (conditions.pressure && conditions.pressure > 5) {\n      hazards.push({\n        type: 'explosion',\n        severity: conditions.pressure > 20 ? 'high' : 'moderate',\n        description: `High pressure conditions (${conditions.pressure} atm)`,\n        mitigationStrategies: [\n          'Use pressure-rated equipment',\n          'Install pressure relief systems',\n          'Monitor pressure continuously'\n        ]\n      });\n    }\n    \n    // Runaway reaction potential\n    if (kineticsData && kineticsData.activationEnergy < 50) {\n      hazards.push({\n        type: 'runaway',\n        severity: 'high',\n        description: 'Low activation energy may lead to runaway reaction',\n        mitigationStrategies: [\n          'Use thermal mass to moderate heating',\n          'Install emergency cooling',\n          'Monitor reaction rate carefully'\n        ]\n      });\n    }\n    \n    return hazards;\n  }\n\n  /**\n   * Assess chemical hazards\n   */\n  private static assessChemicalHazards(\n    compoundHazards: SafetyData[],\n    conditions: ReactionConditions\n  ): ChemicalHazard[] {\n    const hazards: ChemicalHazard[] = [];\n    \n    // Check for toxic compounds\n    const toxicCompounds = compoundHazards.filter(c => \n      c.toxicity.classification === 'toxic' || c.toxicity.classification === 'very-toxic'\n    );\n    \n    if (toxicCompounds.length > 0) {\n      hazards.push({\n        type: 'toxic-gas',\n        compounds: toxicCompounds.map(c => c.compound),\n        severity: toxicCompounds.some(c => c.toxicity.classification === 'very-toxic') ? 'extreme' : 'high',\n        description: 'Reaction involves toxic compounds',\n        mitigationStrategies: [\n          'Use in well-ventilated area or fume hood',\n          'Wear appropriate respiratory protection',\n          'Have antidotes/treatments readily available'\n        ]\n      });\n    }\n    \n    // Check for corrosive compounds\n    const corrosiveCompounds = compoundHazards.filter(c => \n      c.physicalHazards.some(h => h.toLowerCase().includes('corrosive'))\n    );\n    \n    if (corrosiveCompounds.length > 0) {\n      hazards.push({\n        type: 'corrosive',\n        compounds: corrosiveCompounds.map(c => c.compound),\n        severity: 'high',\n        description: 'Reaction involves corrosive materials',\n        mitigationStrategies: [\n          'Use corrosion-resistant equipment',\n          'Wear acid-resistant PPE',\n          'Have neutralizing agents available'\n        ]\n      });\n    }\n    \n    return hazards;\n  }\n\n  /**\n   * Assess physical hazards\n   */\n  private static assessPhysicalHazards(\n    conditions: ReactionConditions,\n    compoundHazards: SafetyData[]\n  ): PhysicalHazard[] {\n    const hazards: PhysicalHazard[] = [];\n    \n    // Temperature hazards\n    if (conditions.temperature > 373 || conditions.temperature < 273) {\n      hazards.push({\n        type: 'temperature',\n        severity: Math.abs(conditions.temperature - 298) > 200 ? 'high' : 'moderate',\n        description: 'Extreme temperature conditions',\n        mitigationStrategies: [\n          'Use appropriate temperature-rated equipment',\n          'Protect against thermal burns/frostbite',\n          'Monitor temperature continuously'\n        ]\n      });\n    }\n    \n    // Pressure hazards\n    if (conditions.pressure && conditions.pressure > 1) {\n      hazards.push({\n        type: 'pressure',\n        severity: conditions.pressure > 10 ? 'high' : 'moderate',\n        description: 'Elevated pressure conditions',\n        mitigationStrategies: [\n          'Use pressure-rated vessels',\n          'Install pressure relief devices',\n          'Regular equipment inspection'\n        ]\n      });\n    }\n    \n    return hazards;\n  }\n\n  /**\n   * Assess environmental hazards\n   */\n  private static assessEnvironmentalHazards(compoundHazards: SafetyData[]): EnvironmentalHazard[] {\n    const hazards: EnvironmentalHazard[] = [];\n    \n    const environmentallyHazardous = compoundHazards.filter(c => \n      c.environmentalHazards.length > 0\n    );\n    \n    if (environmentallyHazardous.length > 0) {\n      hazards.push({\n        type: 'aquatic-toxic',\n        compounds: environmentallyHazardous.map(c => c.compound),\n        severity: 'moderate',\n        description: 'Compounds may be harmful to environment',\n        mitigationStrategies: [\n          'Proper waste disposal procedures',\n          'Prevent release to environment',\n          'Use containment measures'\n        ]\n      });\n    }\n    \n    return hazards;\n  }\n\n  /**\n   * Calculate overall risk score\n   */\n  private static calculateRiskScore(\n    thermal: ThermalHazard[],\n    chemical: ChemicalHazard[],\n    physical: PhysicalHazard[]\n  ): number {\n    const severityToScore = { low: 10, moderate: 25, high: 50, extreme: 100 };\n    \n    let score = 0;\n    \n    thermal.forEach(h => score += severityToScore[h.severity]);\n    chemical.forEach(h => score += severityToScore[h.severity]);\n    physical.forEach(h => score += severityToScore[h.severity]);\n    \n    return Math.min(score, 100);\n  }\n\n  /**\n   * Determine overall risk level from score\n   */\n  private static determineRiskLevel(score: number): 'low' | 'moderate' | 'high' | 'extreme' {\n    if (score >= 75) return 'extreme';\n    if (score >= 50) return 'high';\n    if (score >= 25) return 'moderate';\n    return 'low';\n  }\n\n  /**\n   * Generate safety recommendations\n   */\n  private static generateSafetyRecommendations(\n    riskLevel: 'low' | 'moderate' | 'high' | 'extreme',\n    thermal: ThermalHazard[],\n    chemical: ChemicalHazard[],\n    physical: PhysicalHazard[]\n  ): SafetyRecommendation[] {\n    const recommendations: SafetyRecommendation[] = [];\n    \n    // Always include basic safety recommendations\n    recommendations.push({\n      category: 'equipment',\n      priority: 'medium',\n      description: 'Use appropriate personal protective equipment',\n      implementation: 'Ensure all personnel wear required PPE before handling chemicals'\n    });\n    \n    recommendations.push({\n      category: 'procedure',\n      priority: 'medium', \n      description: 'Follow standard laboratory safety procedures',\n      implementation: 'Adhere to established protocols for chemical handling and storage'\n    });\n    \n    // Risk-level based recommendations\n    if (riskLevel === 'extreme') {\n      recommendations.push({\n        category: 'procedure',\n        priority: 'critical',\n        description: 'Expert supervision required',\n        implementation: 'Ensure experienced personnel supervise all operations'\n      });\n    }\n    \n    if (riskLevel === 'high' || riskLevel === 'extreme') {\n      recommendations.push({\n        category: 'emergency',\n        priority: 'high',\n        description: 'Emergency response plan required',\n        implementation: 'Develop and practice emergency procedures'\n      });\n    }\n    \n    // Hazard-specific recommendations\n    thermal.forEach(hazard => {\n      hazard.mitigationStrategies.forEach(strategy => {\n        recommendations.push({\n          category: 'equipment',\n          priority: hazard.severity === 'extreme' ? 'critical' : 'high',\n          description: strategy,\n          implementation: `Implement for thermal hazard: ${hazard.description}`\n        });\n      });\n    });\n    \n    return recommendations;\n  }\n\n  /**\n   * Determine required PPE\n   */\n  private static determineRequiredPPE(\n    compoundHazards: SafetyData[],\n    riskLevel: 'low' | 'moderate' | 'high' | 'extreme'\n  ): string[] {\n    const ppe = new Set<string>();\n    \n    // Base PPE\n    ppe.add('Safety glasses');\n    ppe.add('Lab coat');\n    ppe.add('Closed-toe shoes');\n    \n    // Risk-level based PPE\n    if (riskLevel === 'moderate' || riskLevel === 'high' || riskLevel === 'extreme') {\n      ppe.add('Chemical-resistant gloves');\n    }\n    \n    if (riskLevel === 'high' || riskLevel === 'extreme') {\n      ppe.add('Face shield');\n      ppe.add('Respirator');\n    }\n    \n    if (riskLevel === 'extreme') {\n      ppe.add('Full chemical suit');\n      ppe.add('Self-contained breathing apparatus');\n    }\n    \n    // Compound-specific PPE\n    compoundHazards.forEach(compound => {\n      if (compound.toxicity.classification === 'very-toxic') {\n        ppe.add('Respiratory protection');\n      }\n      if (compound.physicalHazards.some(h => h.includes('corrosive'))) {\n        ppe.add('Acid-resistant apron');\n      }\n    });\n    \n    return Array.from(ppe);\n  }\n\n  /**\n   * Determine containment level\n   */\n  private static determineContainmentLevel(\n    riskLevel: 'low' | 'moderate' | 'high' | 'extreme',\n    compoundHazards: SafetyData[]\n  ): 'standard' | 'enhanced' | 'specialized' {\n    if (riskLevel === 'extreme') return 'specialized';\n    if (riskLevel === 'high') return 'enhanced';\n    \n    const hasHighlyToxic = compoundHazards.some(c => \n      c.toxicity.classification === 'very-toxic'\n    );\n    \n    return hasHighlyToxic ? 'enhanced' : 'standard';\n  }\n\n  /**\n   * Identify monitoring parameters\n   */\n  private static identifyMonitoringParameters(\n    compoundHazards: SafetyData[],\n    conditions: ReactionConditions\n  ): string[] {\n    const parameters = new Set<string>();\n    \n    // Always monitor these\n    parameters.add('Temperature');\n    \n    if (conditions.pressure && conditions.pressure > 1) {\n      parameters.add('Pressure');\n    }\n    \n    // Compound-specific monitoring\n    compoundHazards.forEach(compound => {\n      if (compound.toxicity.classification === 'toxic' || compound.toxicity.classification === 'very-toxic') {\n        parameters.add(`${compound.compound} concentration`);\n      }\n      if (compound.physicalHazards.some(h => h.includes('gas'))) {\n        parameters.add('Gas leak detection');\n      }\n    });\n    \n    return Array.from(parameters);\n  }\n\n  /**\n   * Generate emergency procedures\n   */\n  private static generateEmergencyProcedures(\n    riskLevel: 'low' | 'moderate' | 'high' | 'extreme',\n    compoundHazards: SafetyData[]\n  ): string[] {\n    const procedures: string[] = [];\n    \n    // Base procedures\n    procedures.push('Know location of emergency equipment');\n    procedures.push('Know evacuation routes');\n    \n    if (riskLevel === 'moderate' || riskLevel === 'high' || riskLevel === 'extreme') {\n      procedures.push('Emergency shutdown procedures');\n      procedures.push('Spill cleanup procedures');\n    }\n    \n    if (riskLevel === 'high' || riskLevel === 'extreme') {\n      procedures.push('Emergency decontamination procedures');\n      procedures.push('Emergency medical response');\n    }\n    \n    // Compound-specific procedures\n    const hasToxic = compoundHazards.some(c => \n      c.toxicity.classification === 'toxic' || c.toxicity.classification === 'very-toxic'\n    );\n    \n    if (hasToxic) {\n      procedures.push('Exposure response procedures');\n      procedures.push('Antidote administration if applicable');\n    }\n    \n    return procedures;\n  }\n}\n","/**\n * CREB Advanced Kinetics & Analytics Module\n * Entry point for reaction kinetics analysis, mechanism studies, and safety assessment\n */\n\n// Core kinetics calculator\nexport { ReactionKinetics } from './calculator';\n\n// Mechanism analysis\nexport { \n  MechanismAnalyzer,\n  type MechanismStep,\n  type MechanismAnalysis,\n  type PathwayComparison\n} from './mechanismAnalyzer';\n\n// Safety analysis\nexport { \n  ReactionSafetyAnalyzer,\n  type SafetyData,\n  type ToxicityData,\n  type ReactivityData,\n  type ReactionSafetyAssessment,\n  type ThermalHazard,\n  type ChemicalHazard,\n  type PhysicalHazard,\n  type EnvironmentalHazard,\n  type SafetyRecommendation\n} from './safetyAnalyzer';\n\n// Type definitions\nexport {\n  type ReactionConditions,\n  type ArrheniusData,\n  type ReactionStep,\n  type KineticsResult,\n  type CatalystData,\n  type TemperatureProfile,\n  type KineticsDatabase,\n  type ReactionClass,\n  type RateLawType\n} from './types';\n\n// Import types for internal use\nimport { ReactionConditions } from './types';\n\n/**\n * Comprehensive Kinetics Analysis Suite\n * Combines kinetics, mechanism, and safety analysis\n */\nexport class AdvancedKineticsAnalyzer {\n  \n  /**\n   * Perform comprehensive analysis of a chemical reaction\n   * Includes kinetics, mechanism analysis, and safety assessment\n   */\n  static async analyzeReaction(\n    equation: string,\n    conditions: ReactionConditions,\n    options: {\n      includeKinetics?: boolean;\n      includeMechanism?: boolean;\n      includeSafety?: boolean;\n      mechanismSteps?: any[]; // MechanismStep[] if mechanism analysis requested\n    } = {}\n  ) {\n    const {\n      includeKinetics = true,\n      includeMechanism = false,\n      includeSafety = true,\n      mechanismSteps = []\n    } = options;\n    \n    const results: any = {\n      equation,\n      conditions,\n      timestamp: new Date().toISOString()\n    };\n    \n    try {\n      // Kinetics analysis\n      if (includeKinetics) {\n        const { ReactionKinetics } = await import('./calculator');\n        results.kinetics = ReactionKinetics.analyzeKinetics(equation, conditions);\n      }\n      \n      // Mechanism analysis\n      if (includeMechanism && mechanismSteps.length > 0) {\n        const { MechanismAnalyzer } = await import('./mechanismAnalyzer');\n        results.mechanism = MechanismAnalyzer.analyzeMechanism(mechanismSteps, conditions);\n      }\n      \n      // Safety analysis\n      if (includeSafety) {\n        const { ReactionSafetyAnalyzer } = await import('./safetyAnalyzer');\n        results.safety = ReactionSafetyAnalyzer.assessReactionSafety(\n          equation, \n          conditions, \n          results.kinetics\n        );\n      }\n      \n      // Generate summary\n      results.summary = this.generateAnalysisSummary(results);\n      \n      return results;\n      \n    } catch (error) {\n      return {\n        ...results,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n        success: false\n      };\n    }\n  }\n  \n  /**\n   * Compare multiple reaction pathways\n   */\n  static async compareReactionPathways(\n    pathways: Array<{\n      equation: string;\n      conditions: ReactionConditions;\n      mechanismSteps?: any[];\n    }>\n  ) {\n    const analyses = await Promise.all(\n      pathways.map(pathway => \n        this.analyzeReaction(pathway.equation, pathway.conditions, {\n          includeKinetics: true,\n          includeMechanism: !!pathway.mechanismSteps,\n          includeSafety: true,\n          mechanismSteps: pathway.mechanismSteps || []\n        })\n      )\n    );\n    \n    // Find the most favorable pathway\n    const rankedPathways = analyses\n      .map((analysis, index) => ({\n        index,\n        analysis,\n        score: this.calculatePathwayScore(analysis)\n      }))\n      .sort((a, b) => b.score - a.score);\n    \n    return {\n      pathways: analyses,\n      recommendation: rankedPathways[0],\n      comparison: this.generatePathwayComparison(rankedPathways)\n    };\n  }\n  \n  /**\n   * Generate temperature-dependent kinetics profile\n   */\n  static async generateTemperatureProfile(\n    equation: string,\n    temperatureRange: [number, number],\n    baseConditions: ReactionConditions,\n    points: number = 10\n  ) {\n    const { ReactionKinetics } = await import('./calculator');\n    \n    const [minTemp, maxTemp] = temperatureRange;\n    const step = (maxTemp - minTemp) / (points - 1);\n    \n    const profile = [];\n    \n    for (let i = 0; i < points; i++) {\n      const temperature = minTemp + (i * step);\n      const conditions = { ...baseConditions, temperature };\n      \n      const kinetics = ReactionKinetics.analyzeKinetics(equation, conditions);\n      \n      profile.push({\n        temperature,\n        temperatureCelsius: temperature - 273.15,\n        rateConstant: kinetics.rateConstant,\n        halfLife: kinetics.halfLife,\n        activationEnergy: kinetics.activationEnergy\n      });\n    }\n    \n    return {\n      equation,\n      temperatureRange,\n      profile,\n      summary: {\n        temperatureRangeCelsius: [minTemp - 273.15, maxTemp - 273.15],\n        rateConstantRange: [\n          Math.min(...profile.map(p => p.rateConstant)),\n          Math.max(...profile.map(p => p.rateConstant))\n        ],\n        averageActivationEnergy: profile.reduce((sum, p) => sum + p.activationEnergy, 0) / profile.length\n      }\n    };\n  }\n  \n  /**\n   * Generate analysis summary\n   */\n  private static generateAnalysisSummary(results: any): string {\n    const summaryParts: string[] = [];\n    \n    if (results.kinetics) {\n      const k = results.kinetics;\n      summaryParts.push(\n        `Kinetics: Rate constant = ${k.rateConstant.toExponential(2)} at ${(k.conditions.temperature - 273.15).toFixed(1)}°C`\n      );\n      summaryParts.push(\n        `Activation energy = ${k.activationEnergy.toFixed(1)} kJ/mol`\n      );\n      if (k.halfLife) {\n        summaryParts.push(`Half-life = ${k.halfLife.toExponential(2)} s`);\n      }\n    }\n    \n    if (results.mechanism) {\n      const m = results.mechanism;\n      summaryParts.push(\n        `Mechanism: ${m.mechanism.length} steps, ${m.intermediates.length} intermediates`\n      );\n      summaryParts.push(\n        `Rate-determining step: ${m.rateDeterminingStep + 1}`\n      );\n    }\n    \n    if (results.safety) {\n      const s = results.safety;\n      summaryParts.push(\n        `Safety: ${s.overallRiskLevel.toUpperCase()} risk (score: ${s.riskScore})`\n      );\n      summaryParts.push(\n        `PPE required: ${s.requiredPPE.join(', ')}`\n      );\n      summaryParts.push(\n        `Containment: ${s.containmentLevel}`\n      );\n    }\n    \n    return summaryParts.join('\\n');\n  }\n  \n  /**\n   * Calculate pathway score for comparison\n   */\n  private static calculatePathwayScore(analysis: any): number {\n    let score = 50; // Base score\n    \n    // Kinetics factors\n    if (analysis.kinetics) {\n      const k = analysis.kinetics;\n      \n      // Higher rate constant is better (within reason)\n      if (k.rateConstant > 1e-3 && k.rateConstant < 1e3) {\n        score += 10;\n      }\n      \n      // Moderate activation energy is preferred\n      if (k.activationEnergy > 20 && k.activationEnergy < 150) {\n        score += 10;\n      }\n      \n      // Higher confidence is better\n      score += k.confidence * 20;\n    }\n    \n    // Safety factors\n    if (analysis.safety) {\n      const s = analysis.safety;\n      \n      // Lower risk is better\n      const riskPenalty: Record<string, number> = {\n        'low': 0,\n        'moderate': -10,\n        'high': -25,\n        'extreme': -50\n      };\n      \n      score += riskPenalty[s.overallRiskLevel] || 0;\n      \n      // Fewer hazards is better\n      const totalHazards = \n        s.hazards.thermal.length + \n        s.hazards.chemical.length + \n        s.hazards.physical.length;\n      \n      score -= totalHazards * 5;\n    }\n    \n    // Mechanism factors\n    if (analysis.mechanism) {\n      const m = analysis.mechanism;\n      \n      // Simpler mechanisms are often preferred\n      score += Math.max(0, 20 - m.mechanism.length * 3);\n      \n      // Higher confidence is better\n      score += m.confidence * 15;\n    }\n    \n    return Math.max(0, Math.min(100, score));\n  }\n  \n  /**\n   * Generate pathway comparison summary\n   */\n  private static generatePathwayComparison(rankedPathways: any[]): string {\n    if (rankedPathways.length < 2) {\n      return 'Insufficient pathways for comparison';\n    }\n    \n    const best = rankedPathways[0];\n    const comparison: string[] = [];\n    \n    comparison.push(\n      `Recommended pathway: ${best.analysis.equation} (Score: ${best.score.toFixed(1)})`\n    );\n    \n    // Compare with next best\n    for (let i = 1; i < Math.min(3, rankedPathways.length); i++) {\n      const alt = rankedPathways[i];\n      const scoreDiff = best.score - alt.score;\n      \n      comparison.push(\n        `Alternative ${i}: ${alt.analysis.equation} (Score: ${alt.score.toFixed(1)}, ${scoreDiff.toFixed(1)} points lower)`\n      );\n    }\n    \n    return comparison.join('\\n');\n  }\n}\n","/**\n * Enhanced Chemical Database Manager\n * Provides comprehensive data integration and management capabilities\n */\n\nimport { \n  CompoundDatabase, \n  DatabaseSource, \n  DataValidationRule, \n  DataImportResult, \n  DataExportOptions,\n  DatabaseQuery,\n  DatabaseProvider,\n  ExtendedThermodynamicProperties\n} from './types';\nimport { ThermodynamicProperties } from '../thermodynamics/types';\nimport { AdvancedCache } from '../performance/cache/AdvancedCache';\nimport { Injectable } from '../core/decorators/Injectable';\nimport { ValidationPipeline, createValidationPipeline, ChemicalFormulaValidator, ThermodynamicPropertiesValidator } from './validation';\nimport { ValidationError } from '../core/errors/CREBError';\n\n@Injectable()\nexport class ChemicalDatabaseManager {\n  private compounds: Map<string, CompoundDatabase> = new Map();\n  private sources: Map<string, DatabaseSource> = new Map();\n  private validationRules: DataValidationRule[] = [];\n  private readonly validationPipeline: ValidationPipeline;\n  private cache = new AdvancedCache<any>({\n    maxSize: 1000,\n    defaultTtl: 1800000, // 30 minutes\n    enableMetrics: true\n  });\n\n  constructor() {\n    this.validationPipeline = this.initializeValidationPipeline();\n    this.initializeDefaultSources();\n    this.initializeValidationRules();\n    this.loadDefaultCompounds();\n  }\n\n  /**\n   * Initialize the validation pipeline with chemistry validators\n   */\n  private initializeValidationPipeline(): ValidationPipeline {\n    const pipeline = createValidationPipeline();\n    \n    // Add chemical formula validator\n    pipeline.addValidator(new ChemicalFormulaValidator());\n    \n    // Add thermodynamic properties validator\n    pipeline.addValidator(new ThermodynamicPropertiesValidator());\n    \n    return pipeline;\n  }\n\n  /**\n   * Initialize default database sources\n   */\n  private initializeDefaultSources(): void {\n    const defaultSources: DatabaseSource[] = [\n      {\n        id: 'nist',\n        name: 'NIST WebBook',\n        url: 'https://webbook.nist.gov/chemistry/',\n        priority: 1,\n        enabled: true,\n        cacheTimeout: 86400 // 24 hours\n      },\n      {\n        id: 'pubchem',\n        name: 'PubChem',\n        url: 'https://pubchem.ncbi.nlm.nih.gov/rest/pug/',\n        priority: 2,\n        enabled: true,\n        cacheTimeout: 43200 // 12 hours\n      },\n      {\n        id: 'local',\n        name: 'Local Database',\n        priority: 3,\n        enabled: true,\n        cacheTimeout: 0 // No cache timeout for local data\n      }\n    ];\n\n    defaultSources.forEach(source => {\n      this.sources.set(source.id, source);\n    });\n  }\n\n  /**\n   * Initialize data validation rules\n   */\n  private initializeValidationRules(): void {\n    this.validationRules = [\n      {\n        field: 'formula',\n        type: 'required',\n        rule: true,\n        message: 'Chemical formula is required'\n      },\n      {\n        field: 'molecularWeight',\n        type: 'range',\n        rule: { min: 0.1, max: 10000 },\n        message: 'Molecular weight must be between 0.1 and 10000 g/mol'\n      },\n      {\n        field: 'thermodynamicProperties.deltaHf',\n        type: 'range',\n        rule: { min: -5000, max: 5000 },\n        message: 'Enthalpy of formation must be between -5000 and 5000 kJ/mol'\n      },\n      {\n        field: 'thermodynamicProperties.entropy',\n        type: 'range',\n        rule: { min: 0, max: 1000 },\n        message: 'Entropy must be between 0 and 1000 J/(mol·K)'\n      },\n      {\n        field: 'thermodynamicProperties.temperatureRange',\n        type: 'custom',\n        rule: (range: [number, number]) => range[0] < range[1] && range[0] > 0,\n        message: 'Temperature range must be valid (min < max, both > 0)'\n      }\n    ];\n  }\n\n  /**\n   * Load default compound database\n   */\n  private loadDefaultCompounds(): void {\n    const defaultCompounds: Partial<CompoundDatabase>[] = [\n      {\n        formula: 'H2O',\n        name: 'Water',\n        commonName: 'Water',\n        casNumber: '7732-18-5',\n        smiles: 'O',\n        molecularWeight: 18.015,\n        thermodynamicProperties: {\n          deltaHf: -285.8,\n          deltaGf: -237.1,\n          entropy: 69.95,\n          heatCapacity: 75.3,\n          temperatureRange: [273.15, 647.1],\n          meltingPoint: 273.15,\n          boilingPoint: 373.15,\n          criticalTemperature: 647.1,\n          criticalPressure: 22064000,\n          vaporPressure: [\n            { temperature: 273.15, pressure: 611.7 },\n            { temperature: 298.15, pressure: 3173 },\n            { temperature: 373.15, pressure: 101325 }\n          ]\n        },\n        physicalProperties: {\n          density: 997.0,\n          viscosity: 0.001,\n          thermalConductivity: 0.606,\n          refractiveIndex: 1.333,\n          dielectricConstant: 80.1,\n          surfaceTension: 0.0728\n        },\n        sources: ['nist', 'local'],\n        lastUpdated: new Date(),\n        confidence: 1.0\n      },\n      {\n        formula: 'CO2',\n        name: 'Carbon dioxide',\n        commonName: 'Carbon dioxide',\n        casNumber: '124-38-9',\n        smiles: 'O=C=O',\n        molecularWeight: 44.010,\n        thermodynamicProperties: {\n          deltaHf: -393.5,\n          deltaGf: -394.4,\n          entropy: 213.8,\n          heatCapacity: 37.1,\n          temperatureRange: [200, 2000],\n          meltingPoint: 216.6,\n          boilingPoint: 194.7, // Sublimation point at 1 atm\n          criticalTemperature: 304.13,\n          criticalPressure: 7375000\n        },\n        physicalProperties: {\n          density: 1.98, // gas at STP\n          thermalConductivity: 0.0146,\n          solubility: {\n            water: 1.7 // g/L at 20°C\n          }\n        },\n        sources: ['nist', 'local'],\n        lastUpdated: new Date(),\n        confidence: 1.0\n      },\n      {\n        formula: 'CH4',\n        name: 'Methane',\n        commonName: 'Methane',\n        casNumber: '74-82-8',\n        smiles: 'C',\n        molecularWeight: 16.043,\n        thermodynamicProperties: {\n          deltaHf: -74.6,\n          deltaGf: -50.5,\n          entropy: 186.3,\n          heatCapacity: 35.7,\n          temperatureRange: [200, 1500],\n          meltingPoint: 90.7,\n          boilingPoint: 111.7,\n          criticalTemperature: 190.6,\n          criticalPressure: 4599000\n        },\n        physicalProperties: {\n          density: 0.717, // gas at STP\n          viscosity: 0.0000103,\n          thermalConductivity: 0.0332\n        },\n        safetyData: {\n          hazardSymbols: ['GHS02', 'GHS04'],\n          hazardStatements: ['H220', 'H280'],\n          precautionaryStatements: ['P210', 'P377', 'P381'],\n          autoignitionTemperature: 810,\n          explosiveLimits: {\n            lower: 5.0,\n            upper: 15.0\n          }\n        },\n        sources: ['nist', 'local'],\n        lastUpdated: new Date(),\n        confidence: 1.0\n      }\n    ];\n\n    defaultCompounds.forEach((compound, index) => {\n      if (compound.formula) {\n        this.compounds.set(compound.formula, compound as CompoundDatabase);\n      }\n    });\n  }\n\n  /**\n   * Query compounds from the database\n   */\n  async query(query: DatabaseQuery): Promise<CompoundDatabase[]> {\n    const results: CompoundDatabase[] = [];\n\n    // Search local database first\n    for (const [formula, compound] of this.compounds) {\n      if (this.matchesQuery(compound, query)) {\n        results.push(compound);\n      }\n    }\n\n    // If no local results and external providers are requested\n    if (results.length === 0 && query.provider && query.provider !== 'local') {\n      try {\n        const externalResults = await this.queryExternalSource(query);\n        results.push(...externalResults);\n      } catch (error) {\n        console.warn(`External database query failed: ${error}`);\n      }\n    }\n\n    // Sort by confidence and limit results\n    results.sort((a, b) => b.confidence - a.confidence);\n    \n    if (query.maxResults) {\n      return results.slice(0, query.maxResults);\n    }\n\n    return results;\n  }\n\n  /**\n   * Check if compound matches query criteria\n   */\n  private matchesQuery(compound: CompoundDatabase, query: DatabaseQuery): boolean {\n    if (query.formula && compound.formula !== query.formula) return false;\n    if (query.name && !compound.name.toLowerCase().includes(query.name.toLowerCase())) return false;\n    if (query.casNumber && compound.casNumber !== query.casNumber) return false;\n    if (query.smiles && compound.smiles !== query.smiles) return false;\n    if (query.inchi && compound.inchi !== query.inchi) return false;\n    if (!query.includeUncertain && compound.confidence < 0.8) return false;\n\n    return true;\n  }\n\n  /**\n   * Query external data sources\n   */\n  private async queryExternalSource(query: DatabaseQuery): Promise<CompoundDatabase[]> {\n    // This would implement actual API calls to NIST, PubChem, etc.\n    // For now, return empty array as placeholder\n    return [];\n  }\n\n  /**\n   * Add or update a compound in the database\n   */\n  async addCompound(compound: Partial<CompoundDatabase>): Promise<boolean> {\n    try {\n      // Validate the compound data\n      const validationErrors = await this.validateCompound(compound);\n      if (validationErrors.length > 0) {\n        throw new ValidationError(`Validation failed: ${validationErrors.join(', ')}`, {\n          errors: validationErrors,\n          compound: compound.formula || 'unknown'\n        });\n      }\n\n      // Fill in missing fields\n      const fullCompound: CompoundDatabase = {\n        formula: compound.formula!,\n        name: compound.name || compound.formula!,\n        molecularWeight: compound.molecularWeight || 0,\n        thermodynamicProperties: compound.thermodynamicProperties || this.getDefaultThermodynamicProperties(),\n        physicalProperties: compound.physicalProperties || {},\n        sources: compound.sources || ['custom'],\n        lastUpdated: new Date(),\n        confidence: compound.confidence || 0.8,\n        ...compound\n      };\n\n      this.compounds.set(fullCompound.formula, fullCompound);\n      return true;\n    } catch (error) {\n      console.error(`Failed to add compound: ${error}`);\n      return false;\n    }\n  }\n\n  /**\n   * Get default thermodynamic properties for validation\n   */\n  private getDefaultThermodynamicProperties(): ExtendedThermodynamicProperties {\n    return {\n      deltaHf: 0,\n      entropy: 0,\n      heatCapacity: 25, // Approximate value for many compounds\n      temperatureRange: [298, 1000]\n    };\n  }\n\n  /**\n   * Validate compound data using the advanced validation pipeline\n   */\n  private async validateCompound(compound: Partial<CompoundDatabase>): Promise<string[]> {\n    const errors: string[] = [];\n\n    try {\n      // Validate chemical formula if present\n      if (compound.formula) {\n        const formulaResult = await this.validationPipeline.validate(compound.formula, ['ChemicalFormulaValidator']);\n        if (!formulaResult.isValid) {\n          errors.push(...formulaResult.errors.map(e => e.message));\n        }\n      }\n\n      // Validate thermodynamic properties if present\n      if (compound.thermodynamicProperties) {\n        const thermoResult = await this.validationPipeline.validate(compound.thermodynamicProperties, ['ThermodynamicPropertiesValidator']);\n        if (!thermoResult.isValid) {\n          errors.push(...thermoResult.errors.map(e => e.message));\n        }\n      }\n\n      // Legacy validation rules for backward compatibility\n      for (const rule of this.validationRules) {\n        const value = this.getNestedProperty(compound, rule.field);\n        \n        switch (rule.type) {\n          case 'required':\n            if (value === undefined || value === null) {\n              errors.push(rule.message);\n            }\n            break;\n          \n          case 'range':\n            if (typeof value === 'number') {\n              const { min, max } = rule.rule;\n              if (value < min || value > max) {\n                errors.push(rule.message);\n              }\n            }\n            break;\n          \n          case 'custom':\n            if (value !== undefined && !rule.rule(value)) {\n              errors.push(rule.message);\n            }\n            break;\n        }\n      }\n    } catch (error) {\n      errors.push(`Validation failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n\n    return errors;\n  }\n\n  /**\n   * Get nested property value by dot notation\n   */\n  private getNestedProperty(obj: any, path: string): any {\n    return path.split('.').reduce((current, key) => current?.[key], obj);\n  }\n\n  /**\n   * Import compounds from various data formats\n   */\n  async importData(data: any, format: 'json' | 'csv' | 'sdf'): Promise<DataImportResult> {\n    const result: DataImportResult = {\n      success: true,\n      imported: 0,\n      failed: 0,\n      errors: [],\n      warnings: []\n    };\n\n    try {\n      let compounds: Partial<CompoundDatabase>[] = [];\n\n      switch (format) {\n        case 'json':\n          compounds = Array.isArray(data) ? data : [data];\n          break;\n        \n        case 'csv':\n          compounds = this.parseCSV(data);\n          break;\n        \n        case 'sdf':\n          compounds = this.parseSDF(data);\n          break;\n        \n        default:\n          throw new Error(`Unsupported format: ${format}`);\n      }\n\n      for (const compound of compounds) {\n        try {\n          const success = await this.addCompound(compound);\n          if (success) {\n            result.imported++;\n          } else {\n            result.failed++;\n            result.errors.push({\n              compound: compound.formula || 'unknown',\n              error: 'Failed to add compound'\n            });\n          }\n        } catch (error) {\n          result.failed++;\n          result.errors.push({\n            compound: compound.formula || 'unknown',\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n\n      result.success = result.failed === 0;\n    } catch (error) {\n      result.success = false;\n      result.errors.push({\n        compound: 'all',\n        error: error instanceof Error ? error.message : 'Import failed'\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Parse CSV data into compound objects\n   */\n  private parseCSV(csvData: string): Partial<CompoundDatabase>[] {\n    const lines = csvData.split('\\n');\n    const headers = lines[0].split(',').map(h => h.trim());\n    const compounds: Partial<CompoundDatabase>[] = [];\n\n    for (let i = 1; i < lines.length; i++) {\n      const values = lines[i].split(',').map(v => v.trim());\n      if (values.length === headers.length) {\n        const compound: any = {};\n        \n        headers.forEach((header, index) => {\n          const value = values[index];\n          \n          // Map common CSV headers to compound properties\n          switch (header.toLowerCase()) {\n            case 'formula':\n              compound.formula = value;\n              break;\n            case 'name':\n              compound.name = value;\n              break;\n            case 'molecular_weight':\n            case 'molecularweight':\n              compound.molecularWeight = parseFloat(value);\n              break;\n            case 'deltahf':\n            case 'enthalpy_formation':\n              compound.thermodynamicProperties = compound.thermodynamicProperties || {};\n              compound.thermodynamicProperties.deltaHf = parseFloat(value);\n              break;\n            case 'entropy':\n              compound.thermodynamicProperties = compound.thermodynamicProperties || {};\n              compound.thermodynamicProperties.entropy = parseFloat(value);\n              break;\n            case 'heat_capacity':\n            case 'heatcapacity':\n              compound.thermodynamicProperties = compound.thermodynamicProperties || {};\n              compound.thermodynamicProperties.heatCapacity = parseFloat(value);\n              break;\n          }\n        });\n\n        if (compound.formula) {\n          compounds.push(compound);\n        }\n      }\n    }\n\n    return compounds;\n  }\n\n  /**\n   * Parse SDF (Structure Data File) format\n   */\n  private parseSDF(sdfData: string): Partial<CompoundDatabase>[] {\n    // Basic SDF parsing - would need more sophisticated implementation for production\n    const compounds: Partial<CompoundDatabase>[] = [];\n    const molecules = sdfData.split('$$$$');\n\n    for (const molecule of molecules) {\n      if (molecule.trim()) {\n        const compound: Partial<CompoundDatabase> = {};\n        \n        // Extract name from first line\n        const lines = molecule.split('\\n');\n        if (lines.length > 0) {\n          compound.name = lines[0].trim();\n        }\n\n        // Look for additional properties in the data fields\n        const dataSection = molecule.split('> <');\n        for (const section of dataSection) {\n          if (section.includes('MOLECULAR_FORMULA')) {\n            const formula = section.split('\\n')[1]?.trim();\n            if (formula) compound.formula = formula;\n          }\n          if (section.includes('MOLECULAR_WEIGHT')) {\n            const weight = parseFloat(section.split('\\n')[1]?.trim() || '0');\n            if (weight > 0) compound.molecularWeight = weight;\n          }\n        }\n\n        if (compound.formula) {\n          compounds.push(compound);\n        }\n      }\n    }\n\n    return compounds;\n  }\n\n  /**\n   * Export compound data in various formats\n   */\n  exportData(options: DataExportOptions): string {\n    let compounds = Array.from(this.compounds.values());\n\n    // Apply filter if provided\n    if (options.filter) {\n      compounds = compounds.filter(options.filter);\n    }\n\n    switch (options.format) {\n      case 'json':\n        return this.exportJSON(compounds, options);\n      \n      case 'csv':\n        return this.exportCSV(compounds, options);\n      \n      case 'xlsx':\n        return this.exportXLSX(compounds, options);\n      \n      default:\n        throw new Error(`Unsupported export format: ${options.format}`);\n    }\n  }\n\n  /**\n   * Export as JSON\n   */\n  private exportJSON(compounds: CompoundDatabase[], options: DataExportOptions): string {\n    const data = options.fields ? \n      compounds.map(c => this.selectFields(c, options.fields!)) : \n      compounds;\n\n    const exportData = {\n      metadata: options.includeMetadata ? {\n        exportDate: new Date().toISOString(),\n        totalCompounds: compounds.length,\n        version: '1.0'\n      } : undefined,\n      compounds: data\n    };\n\n    return JSON.stringify(exportData, null, 2);\n  }\n\n  /**\n   * Export as CSV\n   */\n  private exportCSV(compounds: CompoundDatabase[], options: DataExportOptions): string {\n    if (compounds.length === 0) return '';\n\n    const fields = options.fields || ['formula', 'name', 'molecularWeight'];\n    const headers = fields.join(',');\n    \n    const rows = compounds.map(compound => {\n      return fields.map(field => {\n        const value = this.getNestedProperty(compound, field);\n        return typeof value === 'string' ? `\"${value}\"` : value || '';\n      }).join(',');\n    });\n\n    return [headers, ...rows].join('\\n');\n  }\n\n  /**\n   * Export as XLSX (placeholder - would need external library)\n   */\n  private exportXLSX(compounds: CompoundDatabase[], options: DataExportOptions): string {\n    // This would require a library like xlsx or exceljs\n    throw new Error('XLSX export not yet implemented - use JSON or CSV');\n  }\n\n  /**\n   * Select specific fields from compound\n   */\n  private selectFields(compound: CompoundDatabase, fields: string[]): any {\n    const result: any = {};\n    for (const field of fields) {\n      const value = this.getNestedProperty(compound, field);\n      if (value !== undefined) {\n        this.setNestedProperty(result, field, value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Set nested property value by dot notation\n   */\n  private setNestedProperty(obj: any, path: string, value: any): void {\n    const keys = path.split('.');\n    const lastKey = keys.pop()!;\n    \n    let current = obj;\n    for (const key of keys) {\n      if (!(key in current)) {\n        current[key] = {};\n      }\n      current = current[key];\n    }\n    \n    current[lastKey] = value;\n  }\n\n  /**\n   * Get compound by formula with backward compatibility\n   */\n  async getCompound(formula: string): Promise<ThermodynamicProperties | null> {\n    const compounds = await this.query({ formula, maxResults: 1 });\n    \n    if (compounds.length > 0) {\n      const compound = compounds[0];\n      // Convert to legacy format for backward compatibility\n      return {\n        deltaHf: compound.thermodynamicProperties.deltaHf,\n        entropy: compound.thermodynamicProperties.entropy,\n        heatCapacity: compound.thermodynamicProperties.heatCapacity,\n        temperatureRange: compound.thermodynamicProperties.temperatureRange\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Get all available compounds\n   */\n  getAllCompounds(): CompoundDatabase[] {\n    return Array.from(this.compounds.values());\n  }\n\n  /**\n   * Get database statistics\n   */\n  getStatistics(): {\n    totalCompounds: number;\n    sourceCounts: Record<string, number>;\n    confidenceDistribution: Record<string, number>;\n    lastUpdate: Date;\n  } {\n    const compounds = this.getAllCompounds();\n    const sourceCounts: Record<string, number> = {};\n    const confidenceDistribution: Record<string, number> = {\n      'high': 0,    // > 0.8\n      'medium': 0,  // 0.6-0.8\n      'low': 0      // < 0.6\n    };\n\n    let lastUpdate = new Date(0);\n\n    compounds.forEach(compound => {\n      // Count sources\n      compound.sources.forEach(source => {\n        sourceCounts[source] = (sourceCounts[source] || 0) + 1;\n      });\n\n      // Confidence distribution\n      if (compound.confidence > 0.8) {\n        confidenceDistribution.high++;\n      } else if (compound.confidence > 0.6) {\n        confidenceDistribution.medium++;\n      } else {\n        confidenceDistribution.low++;\n      }\n\n      // Track latest update\n      if (compound.lastUpdated > lastUpdate) {\n        lastUpdate = compound.lastUpdated;\n      }\n    });\n\n    return {\n      totalCompounds: compounds.length,\n      sourceCounts,\n      confidenceDistribution,\n      lastUpdate\n    };\n  }\n}\n","/**\n * NIST WebBook Integration for Enhanced Data\n * Provides real-time access to NIST thermodynamic database\n */\n\nimport { CompoundDatabase, ExtendedThermodynamicProperties } from './types';\nimport { AdvancedCache } from '../performance/cache/AdvancedCache';\nimport { Injectable } from '../core/decorators/Injectable';\n\ninterface NISTResponse {\n  formula: string;\n  name: string;\n  cas: string;\n  thermodynamics?: {\n    enthalpy_formation?: number;\n    entropy?: number;\n    heat_capacity?: number;\n    temperature_range?: [number, number];\n  };\n  phase_data?: {\n    melting_point?: number;\n    boiling_point?: number;\n    critical_temperature?: number;\n    critical_pressure?: number;\n  };\n  uncertainties?: {\n    enthalpy_formation?: number;\n    entropy?: number;\n  };\n}\n\n@Injectable()\nexport class NISTWebBookIntegration {\n  private readonly baseURL = 'https://webbook.nist.gov/cgi/cbook.cgi';\n  private readonly apiKey?: string;\n  private cache = new AdvancedCache<{ data: NISTResponse; timestamp: number }>({\n    maxSize: 1000,\n    defaultTtl: 86400000, // 24 hours\n    enableMetrics: true\n  });\n  private readonly cacheTimeout = 86400000; // 24 hours in ms\n\n  constructor(apiKey?: string) {\n    this.apiKey = apiKey;\n  }\n\n  /**\n   * Query NIST WebBook for compound data\n   */\n  async queryCompound(identifier: string, type: 'formula' | 'name' | 'cas' = 'formula'): Promise<CompoundDatabase | null> {\n    try {\n      // Check cache first\n      const cacheKey = `${type}:${identifier}`;\n      const cached = await this.cache.get(cacheKey);\n      \n      if (cached.hit && cached.value && (Date.now() - cached.value.timestamp) < this.cacheTimeout) {\n        return this.convertNISTToCompound(cached.value.data);\n      }\n\n      // Make API request\n      const response = await this.makeNISTRequest(identifier, type);\n      \n      if (response) {\n        // Cache the response\n        await this.cache.set(cacheKey, {\n          data: response,\n          timestamp: Date.now()\n        });\n\n        return this.convertNISTToCompound(response);\n      }\n\n      return null;\n    } catch (error) {\n      console.warn(`NIST WebBook query failed: ${error}`);\n      return null;\n    }\n  }\n\n  /**\n   * Make request to NIST WebBook API\n   */\n  private async makeNISTRequest(identifier: string, type: 'formula' | 'name' | 'cas'): Promise<NISTResponse | null> {\n    // Note: This is a simplified implementation\n    // The actual NIST WebBook doesn't have a public REST API\n    // This would need to be implemented using web scraping or a proxy service\n    \n    const params = new URLSearchParams({\n      cbook: 'main',\n      [type === 'formula' ? 'Formula' : type === 'name' ? 'Name' : 'ID']: identifier,\n      Units: 'SI',\n      Mask: '1' // Thermochemical data\n    });\n\n    try {\n      // This is a placeholder implementation\n      // In practice, you would either:\n      // 1. Use web scraping with libraries like Puppeteer\n      // 2. Use a proxy service that provides API access to NIST\n      // 3. Use cached NIST data that's periodically updated\n      \n      const url = `${this.baseURL}?${params}`;\n      // Note: Would query NIST at: ${url}\n      \n      // Return mock data for demonstration\n      return this.getMockNISTData(identifier);\n      \n    } catch (error) {\n      throw new Error(`NIST request failed: ${error}`);\n    }\n  }\n\n  /**\n   * Convert NIST response to CompoundDatabase format\n   */\n  private convertNISTToCompound(nistData: NISTResponse): CompoundDatabase {\n    const thermodynamicProperties: ExtendedThermodynamicProperties = {\n      deltaHf: nistData.thermodynamics?.enthalpy_formation || 0,\n      entropy: nistData.thermodynamics?.entropy || 0,\n      heatCapacity: nistData.thermodynamics?.heat_capacity || 25,\n      temperatureRange: nistData.thermodynamics?.temperature_range || [298, 1000],\n      meltingPoint: nistData.phase_data?.melting_point,\n      boilingPoint: nistData.phase_data?.boiling_point,\n      criticalTemperature: nistData.phase_data?.critical_temperature,\n      criticalPressure: nistData.phase_data?.critical_pressure,\n      uncertainties: nistData.uncertainties ? {\n        deltaHf: nistData.uncertainties.enthalpy_formation,\n        entropy: nistData.uncertainties.entropy\n      } : undefined\n    };\n\n    return {\n      formula: nistData.formula,\n      name: nistData.name,\n      casNumber: nistData.cas,\n      molecularWeight: this.calculateMolecularWeight(nistData.formula),\n      thermodynamicProperties,\n      physicalProperties: {},\n      sources: ['nist'],\n      lastUpdated: new Date(),\n      confidence: 0.95 // NIST data is highly reliable\n    };\n  }\n\n  /**\n   * Calculate molecular weight from formula (simplified)\n   */\n  private calculateMolecularWeight(formula: string): number {\n    // Simple atomic weights for common elements\n    const atomicWeights: Record<string, number> = {\n      'H': 1.008, 'C': 12.011, 'N': 14.007, 'O': 15.999,\n      'F': 18.998, 'Na': 22.990, 'Mg': 24.305, 'Al': 26.982,\n      'Si': 28.085, 'P': 30.974, 'S': 32.065, 'Cl': 35.453,\n      'K': 39.098, 'Ca': 40.078, 'Fe': 55.845, 'Cu': 63.546,\n      'Zn': 65.38, 'Br': 79.904, 'I': 126.904\n    };\n\n    let weight = 0;\n    let i = 0;\n    \n    while (i < formula.length) {\n      if (formula[i] === '(' || formula[i] === ')') {\n        i++;\n        continue;\n      }\n\n      // Get element symbol (starts with uppercase)\n      if (!/[A-Z]/.test(formula[i])) {\n        i++;\n        continue;\n      }\n      \n      let element = formula[i];\n      i++;\n      \n      // Check for two-letter elements (second letter is lowercase)\n      if (i < formula.length && /[a-z]/.test(formula[i])) {\n        element += formula[i];\n        i++;\n      }\n      \n      // Get count\n      let count = '';\n      while (i < formula.length && /\\d/.test(formula[i])) {\n        count += formula[i];\n        i++;\n      }\n      \n      const elementWeight = atomicWeights[element] || 0;\n      const elementCount = count ? parseInt(count) : 1;\n      weight += elementWeight * elementCount;\n    }\n\n    return Math.round(weight * 1000) / 1000; // Round to 3 decimal places\n  }\n\n  /**\n   * Get mock NIST data for testing/demonstration\n   */\n  private getMockNISTData(identifier: string): NISTResponse | null {\n    const mockData: Record<string, NISTResponse> = {\n      'H2O': {\n        formula: 'H2O',\n        name: 'Water',\n        cas: '7732-18-5',\n        thermodynamics: {\n          enthalpy_formation: -285.8,\n          entropy: 69.95,\n          heat_capacity: 75.3,\n          temperature_range: [273.15, 647.1]\n        },\n        phase_data: {\n          melting_point: 273.15,\n          boiling_point: 373.15,\n          critical_temperature: 647.1,\n          critical_pressure: 22064000\n        },\n        uncertainties: {\n          enthalpy_formation: 0.4,\n          entropy: 0.1\n        }\n      },\n      'CO2': {\n        formula: 'CO2',\n        name: 'Carbon dioxide',\n        cas: '124-38-9',\n        thermodynamics: {\n          enthalpy_formation: -393.5,\n          entropy: 213.8,\n          heat_capacity: 37.1,\n          temperature_range: [200, 2000]\n        },\n        phase_data: {\n          melting_point: 216.6,\n          boiling_point: 194.7,\n          critical_temperature: 304.13,\n          critical_pressure: 7375000\n        },\n        uncertainties: {\n          enthalpy_formation: 0.1,\n          entropy: 0.3\n        }\n      },\n      'CH4': {\n        formula: 'CH4',\n        name: 'Methane',\n        cas: '74-82-8',\n        thermodynamics: {\n          enthalpy_formation: -74.6,\n          entropy: 186.3,\n          heat_capacity: 35.7,\n          temperature_range: [200, 1500]\n        },\n        phase_data: {\n          melting_point: 90.7,\n          boiling_point: 111.7,\n          critical_temperature: 190.6,\n          critical_pressure: 4599000\n        },\n        uncertainties: {\n          enthalpy_formation: 0.2,\n          entropy: 0.2\n        }\n      },\n      'O2': {\n        formula: 'O2',\n        name: 'Oxygen',\n        cas: '7782-44-7',\n        thermodynamics: {\n          enthalpy_formation: 0,\n          entropy: 205.2,\n          heat_capacity: 29.4,\n          temperature_range: [200, 3000]\n        },\n        phase_data: {\n          melting_point: 54.4,\n          boiling_point: 90.2,\n          critical_temperature: 154.6,\n          critical_pressure: 5043000\n        },\n        uncertainties: {\n          enthalpy_formation: 0,\n          entropy: 0.1\n        }\n      },\n      'N2': {\n        formula: 'N2',\n        name: 'Nitrogen',\n        cas: '7727-37-9',\n        thermodynamics: {\n          enthalpy_formation: 0,\n          entropy: 191.6,\n          heat_capacity: 29.1,\n          temperature_range: [200, 3000]\n        },\n        phase_data: {\n          melting_point: 63.1,\n          boiling_point: 77.4,\n          critical_temperature: 126.2,\n          critical_pressure: 3396000\n        },\n        uncertainties: {\n          enthalpy_formation: 0,\n          entropy: 0.1\n        }\n      }\n    };\n\n    return mockData[identifier] || null;\n  }\n\n  /**\n   * Batch query multiple compounds\n   */\n  async batchQuery(identifiers: string[], type: 'formula' | 'name' | 'cas' = 'formula'): Promise<CompoundDatabase[]> {\n    const results: CompoundDatabase[] = [];\n    \n    // Process in batches to avoid overwhelming the API\n    const batchSize = 10;\n    for (let i = 0; i < identifiers.length; i += batchSize) {\n      const batch = identifiers.slice(i, i + batchSize);\n      \n      const batchPromises = batch.map(identifier => \n        this.queryCompound(identifier, type)\n      );\n      \n      const batchResults = await Promise.allSettled(batchPromises);\n      \n      batchResults.forEach(result => {\n        if (result.status === 'fulfilled' && result.value) {\n          results.push(result.value);\n        }\n      });\n      \n      // Add delay between batches to be respectful to the API\n      if (i + batchSize < identifiers.length) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n    \n    return results;\n  }\n\n  /**\n   * Clear the cache\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats(): { size: number; oldestEntry: Date | null; newestEntry: Date | null } {\n    const metrics = this.cache.getMetrics();\n    \n    return {\n      size: this.cache.size(),\n      oldestEntry: null, // AdvancedCache doesn't expose entry timestamps directly\n      newestEntry: null  // Would need to track separately if needed\n    };\n  }\n}\n","/**\n * Advanced Data Validation Service\n * Provides comprehensive validation for chemical data integrity\n */\n\nimport { \n  CompoundDatabase, \n  ExtendedThermodynamicProperties,\n  PhysicalProperties,\n  SafetyProperties \n} from './types';\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  score: number; // 0-100 quality score\n}\n\nexport interface ValidationError {\n  field: string;\n  message: string;\n  severity: 'critical' | 'major' | 'minor';\n  suggestedFix?: string;\n}\n\nexport interface ValidationWarning {\n  field: string;\n  message: string;\n  recommendation: string;\n}\n\nexport interface ValidationConfig {\n  enablePhysicsChecks: boolean;\n  enableConsistencyChecks: boolean;\n  enableRangeChecks: boolean;\n  enableCorrelationChecks: boolean;\n  strictMode: boolean;\n}\n\nexport class DataValidationService {\n  private config: ValidationConfig;\n\n  constructor(config: Partial<ValidationConfig> = {}) {\n    this.config = {\n      enablePhysicsChecks: true,\n      enableConsistencyChecks: true,\n      enableRangeChecks: true,\n      enableCorrelationChecks: true,\n      strictMode: false,\n      ...config\n    };\n  }\n\n  /**\n   * Validate a complete compound entry\n   */\n  validateCompound(compound: CompoundDatabase): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n\n    // Basic structure validation\n    errors.push(...this.validateBasicStructure(compound));\n    \n    // Chemical formula validation\n    errors.push(...this.validateFormula(compound.formula));\n    \n    // Thermodynamic properties validation\n    if (compound.thermodynamicProperties) {\n      const thermoResult = this.validateThermodynamicProperties(\n        compound.thermodynamicProperties,\n        compound.formula\n      );\n      errors.push(...thermoResult.errors);\n      warnings.push(...thermoResult.warnings);\n    }\n\n    // Physical properties validation\n    if (compound.physicalProperties) {\n      const physResult = this.validatePhysicalProperties(\n        compound.physicalProperties,\n        compound.thermodynamicProperties\n      );\n      errors.push(...physResult.errors);\n      warnings.push(...physResult.warnings);\n    }\n\n    // Safety data validation\n    if (compound.safetyData) {\n      errors.push(...this.validateSafetyData(compound.safetyData));\n    }\n\n    // Cross-property consistency checks\n    if (this.config.enableConsistencyChecks) {\n      const consistencyResult = this.validateConsistency(compound);\n      errors.push(...consistencyResult.errors);\n      warnings.push(...consistencyResult.warnings);\n    }\n\n    // Calculate quality score\n    const score = this.calculateQualityScore(compound, errors, warnings);\n\n    return {\n      isValid: errors.filter(e => e.severity === 'critical' || e.severity === 'major').length === 0,\n      errors,\n      warnings,\n      score\n    };\n  }\n\n  /**\n   * Validate basic compound structure\n   */\n  private validateBasicStructure(compound: CompoundDatabase): ValidationError[] {\n    const errors: ValidationError[] = [];\n\n    if (!compound.formula || compound.formula.trim() === '') {\n      errors.push({\n        field: 'formula',\n        message: 'Chemical formula is required',\n        severity: 'critical',\n        suggestedFix: 'Provide a valid chemical formula'\n      });\n    }\n\n    if (!compound.name || compound.name.trim() === '') {\n      errors.push({\n        field: 'name',\n        message: 'Compound name is required',\n        severity: 'major',\n        suggestedFix: 'Provide a compound name'\n      });\n    }\n\n    if (compound.molecularWeight <= 0) {\n      errors.push({\n        field: 'molecularWeight',\n        message: 'Molecular weight must be positive',\n        severity: 'critical',\n        suggestedFix: 'Calculate molecular weight from formula'\n      });\n    }\n\n    if (compound.molecularWeight < 0.1 || compound.molecularWeight > 10000) {\n      errors.push({\n        field: 'molecularWeight',\n        message: 'Molecular weight must be between 0.1 and 10000 g/mol',\n        severity: 'critical',\n        suggestedFix: 'Check molecular weight calculation or formula'\n      });\n    }\n\n    if (compound.confidence < 0 || compound.confidence > 1) {\n      errors.push({\n        field: 'confidence',\n        message: 'Confidence must be between 0 and 1',\n        severity: 'minor',\n        suggestedFix: 'Set confidence to 0.8 if uncertain'\n      });\n    }\n\n    return errors;\n  }\n\n  /**\n   * Validate chemical formula syntax and composition\n   */\n  private validateFormula(formula: string): ValidationError[] {\n    const errors: ValidationError[] = [];\n\n    if (!formula) return errors;\n\n    // Check for valid characters (letters, numbers, parentheses)\n    if (!/^[A-Za-z0-9()]+$/.test(formula)) {\n      errors.push({\n        field: 'formula',\n        message: 'Formula contains invalid characters',\n        severity: 'critical',\n        suggestedFix: 'Use only element symbols, numbers, and parentheses'\n      });\n    }\n\n    // Check balanced parentheses\n    let parenCount = 0;\n    for (const char of formula) {\n      if (char === '(') parenCount++;\n      if (char === ')') parenCount--;\n      if (parenCount < 0) {\n        errors.push({\n          field: 'formula',\n          message: 'Unbalanced parentheses in formula',\n          severity: 'critical'\n        });\n        break;\n      }\n    }\n    if (parenCount !== 0) {\n      errors.push({\n        field: 'formula',\n        message: 'Unbalanced parentheses in formula',\n        severity: 'critical'\n      });\n    }\n\n    // Check for valid element symbols\n    const elementPattern = /[A-Z][a-z]?/g;\n    const elements = formula.match(elementPattern) || [];\n    const validElements = new Set([\n      'H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne',\n      'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca',\n      'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn',\n      'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr',\n      'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn',\n      'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd',\n      'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb',\n      'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg',\n      'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn'\n    ]);\n\n    for (const element of elements) {\n      if (!validElements.has(element)) {\n        errors.push({\n          field: 'formula',\n          message: `Invalid element symbol: ${element}`,\n          severity: 'critical',\n          suggestedFix: 'Check periodic table for correct element symbols'\n        });\n      }\n    }\n\n    return errors;\n  }\n\n  /**\n   * Validate thermodynamic properties\n   */\n  private validateThermodynamicProperties(\n    props: ExtendedThermodynamicProperties,\n    formula: string\n  ): { errors: ValidationError[]; warnings: ValidationWarning[] } {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n\n    // Range checks\n    if (this.config.enableRangeChecks) {\n      if (props.deltaHf < -5000 || props.deltaHf > 5000) {\n        errors.push({\n          field: 'thermodynamicProperties.deltaHf',\n          message: 'Enthalpy of formation outside reasonable range (-5000 to 5000 kJ/mol)',\n          severity: 'major'\n        });\n      }\n\n      if (props.entropy < 0 || props.entropy > 1000) {\n        errors.push({\n          field: 'thermodynamicProperties.entropy',\n          message: 'Entropy outside reasonable range (0 to 1000 J/(mol·K))',\n          severity: 'major'\n        });\n      }\n\n      if (props.heatCapacity < 0 || props.heatCapacity > 500) {\n        errors.push({\n          field: 'thermodynamicProperties.heatCapacity',\n          message: 'Heat capacity outside reasonable range (0 to 500 J/(mol·K))',\n          severity: 'major'\n        });\n      }\n    }\n\n    // Temperature range validation\n    if (props.temperatureRange) {\n      if (props.temperatureRange[0] >= props.temperatureRange[1]) {\n        errors.push({\n          field: 'thermodynamicProperties.temperatureRange',\n          message: 'Temperature range minimum must be less than maximum',\n          severity: 'critical'\n        });\n      }\n\n      if (props.temperatureRange[0] < 0) {\n        errors.push({\n          field: 'thermodynamicProperties.temperatureRange',\n          message: 'Temperature cannot be below absolute zero',\n          severity: 'critical'\n        });\n      }\n    }\n\n    // Physics-based checks\n    if (this.config.enablePhysicsChecks) {\n      // Third law of thermodynamics: entropy approaches zero at 0K\n      if (props.entropy < 0) {\n        errors.push({\n          field: 'thermodynamicProperties.entropy',\n          message: 'Entropy cannot be negative (Third Law of Thermodynamics)',\n          severity: 'critical'\n        });\n      }\n\n      // Check for reasonable heat capacity\n      const atomCount = this.estimateAtomCount(formula);\n      const expectedCp = atomCount * 20; // Rough estimate: ~20 J/(mol·K) per atom\n      \n      if (Math.abs(props.heatCapacity - expectedCp) > expectedCp * 0.5) {\n        warnings.push({\n          field: 'thermodynamicProperties.heatCapacity',\n          message: `Heat capacity seems unusual for ${atomCount} atoms`,\n          recommendation: `Expected around ${expectedCp.toFixed(1)} J/(mol·K)`\n        });\n      }\n    }\n\n    // Phase transition consistency\n    if (props.meltingPoint && props.boilingPoint) {\n      if (props.meltingPoint >= props.boilingPoint) {\n        errors.push({\n          field: 'thermodynamicProperties.meltingPoint',\n          message: 'Melting point must be less than boiling point',\n          severity: 'major'\n        });\n      }\n    }\n\n    // Critical point validation\n    if (props.criticalTemperature && props.boilingPoint) {\n      if (props.criticalTemperature <= props.boilingPoint) {\n        errors.push({\n          field: 'thermodynamicProperties.criticalTemperature',\n          message: 'Critical temperature must be greater than boiling point',\n          severity: 'major'\n        });\n      }\n    }\n\n    return { errors, warnings };\n  }\n\n  /**\n   * Validate physical properties\n   */\n  private validatePhysicalProperties(\n    props: PhysicalProperties,\n    thermoProps?: ExtendedThermodynamicProperties\n  ): { errors: ValidationError[]; warnings: ValidationWarning[] } {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n\n    // Density checks\n    if (props.density !== undefined) {\n      if (props.density <= 0) {\n        errors.push({\n          field: 'physicalProperties.density',\n          message: 'Density must be positive',\n          severity: 'critical'\n        });\n      }\n\n      if (props.density > 50000) { // Osmium density is ~22,590 kg/m³\n        warnings.push({\n          field: 'physicalProperties.density',\n          message: 'Density seems unusually high',\n          recommendation: 'Verify units and measurement conditions'\n        });\n      }\n    }\n\n    // Viscosity checks\n    if (props.viscosity !== undefined) {\n      if (props.viscosity < 0) {\n        errors.push({\n          field: 'physicalProperties.viscosity',\n          message: 'Viscosity cannot be negative',\n          severity: 'critical'\n        });\n      }\n    }\n\n    // Thermal conductivity checks\n    if (props.thermalConductivity !== undefined) {\n      if (props.thermalConductivity < 0) {\n        errors.push({\n          field: 'physicalProperties.thermalConductivity',\n          message: 'Thermal conductivity cannot be negative',\n          severity: 'critical'\n        });\n      }\n    }\n\n    // Refractive index checks\n    if (props.refractiveIndex !== undefined) {\n      if (props.refractiveIndex < 1) {\n        errors.push({\n          field: 'physicalProperties.refractiveIndex',\n          message: 'Refractive index must be at least 1',\n          severity: 'critical'\n        });\n      }\n    }\n\n    return { errors, warnings };\n  }\n\n  /**\n   * Validate safety data\n   */\n  private validateSafetyData(safetyData: SafetyProperties): ValidationError[] {\n    const errors: ValidationError[] = [];\n\n    // Flash point vs autoignition temperature\n    if (safetyData.flashPoint && safetyData.autoignitionTemperature) {\n      if (safetyData.flashPoint >= safetyData.autoignitionTemperature) {\n        errors.push({\n          field: 'safetyData.flashPoint',\n          message: 'Flash point must be less than autoignition temperature',\n          severity: 'major'\n        });\n      }\n    }\n\n    // Explosive limits\n    if (safetyData.explosiveLimits) {\n      if (safetyData.explosiveLimits.lower >= safetyData.explosiveLimits.upper) {\n        errors.push({\n          field: 'safetyData.explosiveLimits',\n          message: 'Lower explosive limit must be less than upper limit',\n          severity: 'major'\n        });\n      }\n\n      if (safetyData.explosiveLimits.lower < 0 || safetyData.explosiveLimits.upper > 100) {\n        errors.push({\n          field: 'safetyData.explosiveLimits',\n          message: 'Explosive limits must be between 0 and 100 vol%',\n          severity: 'major'\n        });\n      }\n    }\n\n    return errors;\n  }\n\n  /**\n   * Validate cross-property consistency\n   */\n  private validateConsistency(\n    compound: CompoundDatabase\n  ): { errors: ValidationError[]; warnings: ValidationWarning[] } {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n\n    const molecular = this.calculateMolecularWeight(compound.formula);\n    \n    // Molecular weight consistency\n    if (Math.abs(compound.molecularWeight - molecular) > 0.1) {\n      errors.push({\n        field: 'molecularWeight',\n        message: `Molecular weight inconsistent with formula (calculated: ${molecular.toFixed(3)})`,\n        severity: 'major',\n        suggestedFix: `Update to ${molecular.toFixed(3)} g/mol`\n      });\n    }\n\n    // Source-confidence correlation\n    if (compound.sources.includes('nist') && compound.confidence < 0.9) {\n      warnings.push({\n        field: 'confidence',\n        message: 'NIST data typically has high confidence',\n        recommendation: 'Consider increasing confidence score'\n      });\n    }\n\n    return { errors, warnings };\n  }\n\n  /**\n   * Calculate quality score (0-100)\n   */\n  private calculateQualityScore(\n    compound: CompoundDatabase,\n    errors: ValidationError[],\n    warnings: ValidationWarning[]\n  ): number {\n    let score = 100;\n\n    // Deduct points for errors\n    errors.forEach(error => {\n      switch (error.severity) {\n        case 'critical':\n          score -= 25;\n          break;\n        case 'major':\n          score -= 10;\n          break;\n        case 'minor':\n          score -= 5;\n          break;\n      }\n    });\n\n    // Deduct points for warnings\n    score -= warnings.length * 2;\n\n    // Bonus points for completeness\n    if (compound.thermodynamicProperties.deltaGf !== undefined) score += 2;\n    if (compound.thermodynamicProperties.uncertainties) score += 3;\n    if (compound.physicalProperties.density !== undefined) score += 2;\n    if (compound.safetyData) score += 5;\n    if (compound.sources.includes('nist')) score += 5;\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n  /**\n   * Estimate atom count from formula\n   */\n  private estimateAtomCount(formula: string): number {\n    let count = 0;\n    let i = 0;\n\n    while (i < formula.length) {\n      if (formula[i] === '(') {\n        // Skip to matching closing parenthesis\n        let parenCount = 1;\n        i++;\n        while (i < formula.length && parenCount > 0) {\n          if (formula[i] === '(') parenCount++;\n          if (formula[i] === ')') parenCount--;\n          i++;\n        }\n        continue;\n      }\n\n      if (/[A-Z]/.test(formula[i])) {\n        count++;\n        i++;\n        // Skip lowercase letters\n        while (i < formula.length && /[a-z]/.test(formula[i])) {\n          i++;\n        }\n        // Skip numbers\n        while (i < formula.length && /\\d/.test(formula[i])) {\n          i++;\n        }\n      } else {\n        i++;\n      }\n    }\n\n    return count;\n  }\n\n  /**\n   * Calculate molecular weight from formula\n   */\n  private calculateMolecularWeight(formula: string): number {\n    const atomicWeights: Record<string, number> = {\n      'H': 1.008, 'He': 4.003, 'Li': 6.941, 'Be': 9.012, 'B': 10.811,\n      'C': 12.011, 'N': 14.007, 'O': 15.999, 'F': 18.998, 'Ne': 20.180,\n      'Na': 22.990, 'Mg': 24.305, 'Al': 26.982, 'Si': 28.085, 'P': 30.974,\n      'S': 32.065, 'Cl': 35.453, 'Ar': 39.948, 'K': 39.098, 'Ca': 40.078,\n      'Fe': 55.845, 'Cu': 63.546, 'Zn': 65.38, 'Br': 79.904, 'I': 126.904\n    };\n\n    let weight = 0;\n    let i = 0;\n\n    while (i < formula.length) {\n      // Get element symbol - starts with uppercase letter\n      let element = formula[i];\n      i++;\n      \n      // Check for two-letter elements (lowercase letter after uppercase)\n      if (i < formula.length && /[a-z]/.test(formula[i])) {\n        element += formula[i];\n        i++;\n      }\n      \n      // Get count - sequence of digits\n      let count = '';\n      while (i < formula.length && /\\d/.test(formula[i])) {\n        count += formula[i];\n        i++;\n      }\n      \n      const elementWeight = atomicWeights[element] || 0;\n      const elementCount = count ? parseInt(count) : 1;\n      weight += elementWeight * elementCount;\n    }\n\n    return Math.round(weight * 1000) / 1000;\n  }\n\n  /**\n   * Batch validate multiple compounds\n   */\n  batchValidate(compounds: CompoundDatabase[]): Map<string, ValidationResult> {\n    const results = new Map<string, ValidationResult>();\n\n    compounds.forEach(compound => {\n      const result = this.validateCompound(compound);\n      results.set(compound.formula, result);\n    });\n\n    return results;\n  }\n\n  /**\n   * Get validation summary statistics\n   */\n  getValidationSummary(results: Map<string, ValidationResult>): {\n    totalCompounds: number;\n    validCompounds: number;\n    averageScore: number;\n    criticalErrors: number;\n    majorErrors: number;\n    minorErrors: number;\n    warnings: number;\n  } {\n    let totalCompounds = 0;\n    let validCompounds = 0;\n    let totalScore = 0;\n    let criticalErrors = 0;\n    let majorErrors = 0;\n    let minorErrors = 0;\n    let warnings = 0;\n\n    for (const result of results.values()) {\n      totalCompounds++;\n      if (result.isValid) validCompounds++;\n      totalScore += result.score;\n      warnings += result.warnings.length;\n\n      result.errors.forEach(error => {\n        switch (error.severity) {\n          case 'critical':\n            criticalErrors++;\n            break;\n          case 'major':\n            majorErrors++;\n            break;\n          case 'minor':\n            minorErrors++;\n            break;\n        }\n      });\n    }\n\n    return {\n      totalCompounds,\n      validCompounds,\n      averageScore: totalCompounds > 0 ? totalScore / totalCompounds : 0,\n      criticalErrors,\n      majorErrors,\n      minorErrors,\n      warnings\n    };\n  }\n}\n","/**\n * SQLite Storage Provider for CREB-JS\n * Provides persistent local database management with SQLite\n */\n\nimport { \n  CompoundDatabase, \n  DatabaseQuery, \n  DataImportResult, \n  PhysicalProperties, \n  SafetyProperties,\n  ExtendedThermodynamicProperties \n} from './types';\nimport { ValidationResult } from './DataValidationService';\nimport { SystemError, ValidationError } from '../core/errors/CREBError';\nimport { Injectable } from '../core/decorators/Injectable';\n\n// Define SQLite interface (works with both better-sqlite3 and sql.js)\ninterface SQLiteDatabase {\n  prepare(sql: string): SQLiteStatement;\n  exec(sql: string): void;\n  close(): void;\n  transaction(fn: () => void): () => void;\n}\n\ninterface SQLiteStatement {\n  run(...params: any[]): { changes: number; lastInsertRowid: number };\n  get(...params: any[]): any;\n  all(...params: any[]): any[];\n  finalize(): void;\n}\n\nexport interface SQLiteConfig {\n  databasePath?: string;\n  inMemory?: boolean;\n  enableWAL?: boolean;\n  cacheSize?: number;\n  timeout?: number;\n}\n\nexport interface SQLiteQuery extends DatabaseQuery {\n  searchTerm?: string;\n  useFullTextSearch?: boolean;\n  limit?: number;\n  minConfidence?: number;\n  sources?: string[];\n}\n\n/**\n * SQLite-backed storage provider for chemical compounds\n */\n@Injectable()\nexport class SQLiteStorageProvider {\n  private db: SQLiteDatabase | null = null;\n  private config: Required<SQLiteConfig>;\n  private statements: Map<string, SQLiteStatement> = new Map();\n\n  constructor(config: SQLiteConfig = {}) {\n    this.config = {\n      databasePath: config.databasePath || './creb-compounds.db',\n      inMemory: config.inMemory || false,\n      enableWAL: config.enableWAL || true,\n      cacheSize: config.cacheSize || 10000,\n      timeout: config.timeout || 5000\n    };\n  }\n\n  /**\n   * Initialize SQLite database and create tables\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Try to import and use better-sqlite3 for Node.js\n      try {\n        const Database = (await import('better-sqlite3')).default;\n        const dbPath = this.config.databasePath || ':memory:';\n        this.db = new Database(dbPath) as unknown as SQLiteDatabase;\n      } catch (nodeError) {\n        // If we're in a browser environment or better-sqlite3 isn't available,\n        // gracefully fall back or provide a warning\n        console.warn('SQLite storage not available in this environment. Better-sqlite3 not found.');\n        throw new SystemError(\n          'SQLite storage requires better-sqlite3 package. Install with: npm install better-sqlite3',\n          { databasePath: this.config.databasePath, error: nodeError },\n          { subsystem: 'data', resource: 'sqlite-database' }\n        );\n      }\n\n      if (this.db) {\n        // Configure database\n        this.db.exec(`PRAGMA journal_mode = ${this.config.enableWAL ? 'WAL' : 'DELETE'}`);\n        this.db.exec(`PRAGMA cache_size = ${this.config.cacheSize}`);\n        this.db.exec(`PRAGMA temp_store = memory`);\n        this.db.exec(`PRAGMA mmap_size = 268435456`); // 256MB\n\n        // Create tables\n        await this.createTables();\n\n        // Prepare statements\n        await this.prepareStatements();\n      }\n    } catch (error) {\n      console.error('Failed to initialize SQLite database:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create database tables\n   */\n  private async createTables(): Promise<void> {\n    if (!this.db) {\n      throw new SystemError(\n        'Database not initialized',\n        { operation: 'createTables' },\n        { subsystem: 'data', resource: 'sqlite-database' }\n      );\n    }\n\n    const schema = `\n      -- Main compounds table\n      CREATE TABLE IF NOT EXISTS compounds (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        formula TEXT NOT NULL UNIQUE,\n        name TEXT NOT NULL,\n        common_name TEXT,\n        cas_number TEXT,\n        smiles TEXT,\n        inchi TEXT,\n        molecular_weight REAL,\n        confidence REAL DEFAULT 1.0,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n\n      -- Thermodynamic properties\n      CREATE TABLE IF NOT EXISTS thermodynamic_properties (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        compound_id INTEGER REFERENCES compounds(id) ON DELETE CASCADE,\n        delta_hf REAL,\n        delta_gf REAL,\n        entropy REAL,\n        heat_capacity REAL,\n        temp_range_min REAL,\n        temp_range_max REAL,\n        melting_point REAL,\n        boiling_point REAL,\n        critical_temp REAL,\n        critical_pressure REAL,\n        properties_json TEXT -- JSON blob for additional properties\n      );\n\n      -- Physical properties\n      CREATE TABLE IF NOT EXISTS physical_properties (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        compound_id INTEGER REFERENCES compounds(id) ON DELETE CASCADE,\n        density REAL,\n        viscosity REAL,\n        thermal_conductivity REAL,\n        refractive_index REAL,\n        dielectric_constant REAL,\n        surface_tension REAL,\n        properties_json TEXT -- JSON blob for additional properties\n      );\n\n      -- Safety properties\n      CREATE TABLE IF NOT EXISTS safety_properties (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        compound_id INTEGER REFERENCES compounds(id) ON DELETE CASCADE,\n        flash_point REAL,\n        autoignition_temp REAL,\n        explosive_limits_lower REAL,\n        explosive_limits_upper REAL,\n        toxicity_oral_ld50 REAL,\n        toxicity_dermal_ld50 REAL,\n        toxicity_inhalation_lc50 REAL,\n        hazard_statements TEXT, -- JSON array\n        precautionary_statements TEXT, -- JSON array\n        properties_json TEXT -- JSON blob for additional properties\n      );\n\n      -- Data sources tracking\n      CREATE TABLE IF NOT EXISTS compound_sources (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        compound_id INTEGER REFERENCES compounds(id) ON DELETE CASCADE,\n        source_name TEXT NOT NULL,\n        source_url TEXT,\n        reliability REAL DEFAULT 1.0,\n        last_updated DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n\n      -- Vapor pressure data points\n      CREATE TABLE IF NOT EXISTS vapor_pressure_data (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        compound_id INTEGER REFERENCES compounds(id) ON DELETE CASCADE,\n        temperature REAL NOT NULL,\n        pressure REAL NOT NULL\n      );\n\n      -- Search and caching\n      CREATE TABLE IF NOT EXISTS search_cache (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        query_hash TEXT UNIQUE,\n        query_type TEXT,\n        results_json TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        expires_at DATETIME\n      );\n\n      -- Database metadata\n      CREATE TABLE IF NOT EXISTS database_metadata (\n        key TEXT PRIMARY KEY,\n        value TEXT,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n    `;\n\n    this.db.exec(schema);\n  }\n\n  /**\n   * Create indexes for performance\n   */\n  private async createIndexes(): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const indexes = `\n      CREATE INDEX IF NOT EXISTS idx_compounds_formula ON compounds(formula);\n      CREATE INDEX IF NOT EXISTS idx_compounds_name ON compounds(name);\n      CREATE INDEX IF NOT EXISTS idx_compounds_cas ON compounds(cas_number);\n      CREATE INDEX IF NOT EXISTS idx_compounds_molecular_weight ON compounds(molecular_weight);\n      CREATE INDEX IF NOT EXISTS idx_compounds_confidence ON compounds(confidence);\n      CREATE INDEX IF NOT EXISTS idx_compounds_updated ON compounds(updated_at);\n      \n      CREATE INDEX IF NOT EXISTS idx_thermo_compound ON thermodynamic_properties(compound_id);\n      CREATE INDEX IF NOT EXISTS idx_physical_compound ON physical_properties(compound_id);\n      CREATE INDEX IF NOT EXISTS idx_safety_compound ON safety_properties(compound_id);\n      CREATE INDEX IF NOT EXISTS idx_sources_compound ON compound_sources(compound_id);\n      CREATE INDEX IF NOT EXISTS idx_vapor_compound ON vapor_pressure_data(compound_id);\n      \n      CREATE INDEX IF NOT EXISTS idx_search_cache_hash ON search_cache(query_hash);\n      CREATE INDEX IF NOT EXISTS idx_search_cache_expires ON search_cache(expires_at);\n      \n      -- Full-text search indexes\n      CREATE VIRTUAL TABLE IF NOT EXISTS compounds_fts USING fts5(\n        formula, name, common_name, cas_number,\n        content='compounds',\n        content_rowid='id'\n      );\n      \n      -- Triggers to maintain FTS index\n      CREATE TRIGGER IF NOT EXISTS compounds_fts_insert AFTER INSERT ON compounds\n      BEGIN\n        INSERT INTO compounds_fts(rowid, formula, name, common_name, cas_number) \n        VALUES (new.id, new.formula, new.name, new.common_name, new.cas_number);\n      END;\n      \n      CREATE TRIGGER IF NOT EXISTS compounds_fts_delete AFTER DELETE ON compounds\n      BEGIN\n        DELETE FROM compounds_fts WHERE rowid = old.id;\n      END;\n      \n      CREATE TRIGGER IF NOT EXISTS compounds_fts_update AFTER UPDATE ON compounds\n      BEGIN\n        DELETE FROM compounds_fts WHERE rowid = old.id;\n        INSERT INTO compounds_fts(rowid, formula, name, common_name, cas_number) \n        VALUES (new.id, new.formula, new.name, new.common_name, new.cas_number);\n      END;\n    `;\n\n    this.db.exec(indexes);\n  }\n\n  /**\n   * Prepare commonly used SQL statements\n   */\n  private async prepareStatements(): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const statements = {\n      insertCompound: `\n        INSERT INTO compounds (\n          formula, name, common_name, cas_number, smiles, inchi, \n          molecular_weight, confidence, updated_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)\n      `,\n      \n      updateCompound: `\n        UPDATE compounds SET \n          name = ?, common_name = ?, cas_number = ?, smiles = ?, inchi = ?,\n          molecular_weight = ?, confidence = ?, updated_at = CURRENT_TIMESTAMP\n        WHERE formula = ?\n      `,\n      \n      selectCompound: `\n        SELECT * FROM compounds WHERE formula = ?\n      `,\n      \n      selectCompoundWithProperties: `\n        SELECT \n          c.*,\n          tp.delta_hf, tp.delta_gf, tp.entropy, tp.heat_capacity,\n          tp.temp_range_min, tp.temp_range_max, tp.melting_point, tp.boiling_point,\n          tp.critical_temp, tp.critical_pressure, tp.properties_json as thermo_json,\n          pp.density, pp.viscosity, pp.thermal_conductivity, pp.refractive_index,\n          pp.dielectric_constant, pp.surface_tension, pp.properties_json as physical_json,\n          sp.flash_point, sp.autoignition_temp, sp.explosive_limits_lower, sp.explosive_limits_upper,\n          sp.toxicity_oral_ld50, sp.toxicity_dermal_ld50, sp.toxicity_inhalation_lc50,\n          sp.hazard_statements, sp.precautionary_statements, sp.properties_json as safety_json\n        FROM compounds c\n        LEFT JOIN thermodynamic_properties tp ON c.id = tp.compound_id\n        LEFT JOIN physical_properties pp ON c.id = pp.compound_id\n        LEFT JOIN safety_properties sp ON c.id = sp.compound_id\n        WHERE c.formula = ?\n      `,\n      \n      insertThermodynamicProperties: `\n        INSERT OR REPLACE INTO thermodynamic_properties (\n          compound_id, delta_hf, delta_gf, entropy, heat_capacity,\n          temp_range_min, temp_range_max, melting_point, boiling_point,\n          critical_temp, critical_pressure, properties_json\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `,\n      \n      insertPhysicalProperties: `\n        INSERT OR REPLACE INTO physical_properties (\n          compound_id, density, viscosity, thermal_conductivity, refractive_index,\n          dielectric_constant, surface_tension, properties_json\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n      `,\n      \n      insertSafetyProperties: `\n        INSERT OR REPLACE INTO safety_properties (\n          compound_id, flash_point, autoignition_temp, explosive_limits_lower, explosive_limits_upper,\n          toxicity_oral_ld50, toxicity_dermal_ld50, toxicity_inhalation_lc50,\n          hazard_statements, precautionary_statements, properties_json\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `,\n      \n      insertSource: `\n        INSERT OR REPLACE INTO compound_sources (\n          compound_id, source_name, source_url, reliability, last_updated\n        ) VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)\n      `,\n      \n      searchCompounds: `\n        SELECT c.* FROM compounds c\n        WHERE c.formula LIKE ? OR c.name LIKE ? OR c.common_name LIKE ?\n        ORDER BY c.confidence DESC, c.updated_at DESC\n        LIMIT ?\n      `,\n      \n      fullTextSearch: `\n        SELECT c.* FROM compounds c\n        JOIN compounds_fts fts ON c.id = fts.rowid\n        WHERE compounds_fts MATCH ?\n        ORDER BY rank, c.confidence DESC\n        LIMIT ?\n      `,\n      \n      deleteCompound: `\n        DELETE FROM compounds WHERE formula = ?\n      `,\n      \n      getStatistics: `\n        SELECT \n          COUNT(*) as total_compounds,\n          AVG(confidence) as avg_confidence,\n          MIN(updated_at) as oldest_update,\n          MAX(updated_at) as newest_update\n        FROM compounds\n      `\n    };\n\n    for (const [name, sql] of Object.entries(statements)) {\n      this.statements.set(name, this.db.prepare(sql));\n    }\n  }\n\n  /**\n   * Add or update a compound in the database\n   */\n  async addCompound(compound: CompoundDatabase): Promise<boolean> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const transaction = this.db.transaction(() => {\n      try {\n        // Insert or update main compound record\n        const existingStmt = this.statements.get('selectCompound')!;\n        const existing = existingStmt.get(compound.formula);\n\n        let compoundId: number;\n\n        if (existing) {\n          const updateStmt = this.statements.get('updateCompound')!;\n          updateStmt.run(\n            compound.name,\n            compound.commonName || null,\n            compound.casNumber || null,\n            compound.smiles || null,\n            compound.inchi || null,\n            compound.molecularWeight,\n            compound.confidence,\n            compound.formula\n          );\n          compoundId = existing.id;\n        } else {\n          const insertStmt = this.statements.get('insertCompound')!;\n          const result = insertStmt.run(\n            compound.formula,\n            compound.name,\n            compound.commonName || null,\n            compound.casNumber || null,\n            compound.smiles || null,\n            compound.inchi || null,\n            compound.molecularWeight,\n            compound.confidence\n          );\n          compoundId = result.lastInsertRowid as number;\n        }\n\n        // Insert thermodynamic properties\n        if (compound.thermodynamicProperties) {\n          const props = compound.thermodynamicProperties;\n          const thermoStmt = this.statements.get('insertThermodynamicProperties')!;\n          thermoStmt.run(\n            compoundId,\n            props.deltaHf || null,\n            props.deltaGf || null,\n            props.entropy || null,\n            props.heatCapacity || null,\n            props.temperatureRange?.[0] || null,\n            props.temperatureRange?.[1] || null,\n            props.meltingPoint || null,\n            props.boilingPoint || null,\n            props.criticalTemperature || null,\n            props.criticalPressure || null,\n            JSON.stringify(props)\n          );\n        }\n\n        // Insert physical properties\n        if (compound.physicalProperties) {\n          const props = compound.physicalProperties;\n          const physicalStmt = this.statements.get('insertPhysicalProperties')!;\n          physicalStmt.run(\n            compoundId,\n            props.density || null,\n            props.viscosity || null,\n            props.thermalConductivity || null,\n            props.refractiveIndex || null,\n            props.dielectricConstant || null,\n            props.surfaceTension || null,\n            JSON.stringify(props)\n          );\n        }\n\n        // Insert safety properties\n        if (compound.safetyData) {\n          const props = compound.safetyData;\n          const safetyStmt = this.statements.get('insertSafetyProperties')!;\n          safetyStmt.run(\n            compoundId,\n            props.flashPoint || null,\n            props.autoignitionTemperature || null,\n            props.explosiveLimits?.lower || null,\n            props.explosiveLimits?.upper || null,\n            props.toxicity?.ld50 || null,\n            null, // dermal LD50 not in current interface\n            props.toxicity?.lc50 || null,\n            JSON.stringify(props.hazardStatements || []),\n            JSON.stringify(props.precautionaryStatements || []),\n            JSON.stringify(props)\n          );\n        }\n\n        // Insert sources\n        if (compound.sources?.length) {\n          const sourceStmt = this.statements.get('insertSource')!;\n          compound.sources.forEach(source => {\n            sourceStmt.run(compoundId, source, null, 1.0);\n          });\n        }\n\n        return true;\n      } catch (error) {\n        console.error('Error adding compound to SQLite:', error);\n        throw error;\n      }\n    });\n\n    transaction();\n    return true;\n  }\n\n  /**\n   * Get a compound by formula\n   */\n  async getCompound(formula: string): Promise<CompoundDatabase | null> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    try {\n      const stmt = this.statements.get('selectCompoundWithProperties');\n      if (!stmt) {\n        console.error('Database statement not prepared');\n        return null;\n      }\n      \n      const row = stmt.get(formula);\n\n      if (!row) return null;\n\n      return this.rowToCompound(row);\n    } catch (error) {\n      console.error('Error getting compound from SQLite:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Search compounds with query\n   */\n  async searchCompounds(query: SQLiteQuery): Promise<CompoundDatabase[]> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    try {\n      let stmt: SQLiteStatement;\n      let params: any[];\n\n      if (query.searchTerm) {\n        // Use full-text search if available, otherwise fall back to LIKE\n        if (query.searchTerm.includes(' ') || query.useFullTextSearch) {\n          stmt = this.statements.get('fullTextSearch')!;\n          params = [query.searchTerm, query.limit || 50];\n        } else {\n          stmt = this.statements.get('searchCompounds')!;\n          const term = `%${query.searchTerm}%`;\n          params = [term, term, term, query.limit || 50];\n        }\n      } else {\n        // Get all compounds with optional filters\n        const sql = this.buildFilteredQuery(query);\n        stmt = this.db.prepare(sql);\n        params = this.buildQueryParams(query);\n      }\n\n      const rows = stmt.all(...params);\n      return rows.map(row => this.rowToCompound(row));\n    } catch (error) {\n      console.error('Error searching compounds in SQLite:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Remove a compound\n   */\n  async removeCompound(formula: string): Promise<boolean> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    try {\n      const stmt = this.statements.get('deleteCompound');\n      if (!stmt) {\n        console.error('Database statement not prepared');\n        return false;\n      }\n      \n      const result = stmt.run(formula);\n      return result.changes > 0;\n    } catch (error) {\n      console.error('Error removing compound from SQLite:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get all compounds\n   */\n  async getAllCompounds(): Promise<CompoundDatabase[]> {\n    return this.searchCompounds({ limit: 10000 } as SQLiteQuery);\n  }\n\n  /**\n   * Import data from various sources\n   */\n  async importData(data: any[], format: 'json' | 'csv'): Promise<DataImportResult> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const result: DataImportResult = {\n      success: true,\n      imported: 0,\n      failed: 0,\n      errors: [],\n      warnings: []\n    };\n\n    const transaction = this.db.transaction(() => {\n      for (const item of data) {\n        try {\n          // Convert data to CompoundDatabase format\n          const compound = this.normalizeImportData(item, format);\n          this.addCompound(compound);\n          result.imported++;\n        } catch (error) {\n          result.errors.push({ \n            compound: item.formula || 'unknown', \n            error: String(error) \n          });\n          result.failed++;\n        }\n      }\n    });\n\n    try {\n      transaction();\n      console.log(`SQLite import completed: ${result.imported} imported, ${result.failed} failed`);\n    } catch (error) {\n      result.success = false;\n      result.errors.push({ \n        compound: 'transaction', \n        error: `Transaction failed: ${error}` \n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Get database statistics\n   */\n  async getStatistics(): Promise<any> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    try {\n      const stmt = this.statements.get('getStatistics');\n      if (!stmt) {\n        console.error('Database statement not prepared');\n        return {};\n      }\n      \n      const stats = stmt.get();\n      if (!stats) {\n        return {\n          totalCompounds: 0,\n          averageConfidence: 0,\n          oldestUpdate: new Date(),\n          newestUpdate: new Date(),\n          sourceCounts: {}\n        };\n      }\n\n      // Get source distribution\n      const sourcesStmt = this.db.prepare(`\n        SELECT source_name, COUNT(*) as count\n        FROM compound_sources cs\n        JOIN compounds c ON cs.compound_id = c.id\n        GROUP BY source_name\n      `);\n      const sources = sourcesStmt.all();\n\n      return {\n        totalCompounds: stats.total_compounds,\n        averageConfidence: stats.avg_confidence,\n        oldestUpdate: new Date(stats.oldest_update),\n        newestUpdate: new Date(stats.newest_update),\n        sourceCounts: Object.fromEntries(sources.map(s => [s.source_name, s.count]))\n      };\n    } catch (error) {\n      console.error('Error getting SQLite statistics:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Close the database connection\n   */\n  async close(): Promise<void> {\n    if (this.db) {\n      // Clean up prepared statements\n      this.statements.forEach(stmt => stmt.finalize());\n      this.statements.clear();\n\n      // Close database\n      this.db.close();\n      this.db = null;\n      console.log('SQLite database connection closed');\n    }\n  }\n\n  /**\n   * Vacuum and optimize database\n   */\n  async optimize(): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    try {\n      this.db.exec('VACUUM');\n      this.db.exec('ANALYZE');\n      console.log('SQLite database optimized');\n    } catch (error) {\n      console.error('Error optimizing SQLite database:', error);\n    }\n  }\n\n  // Helper methods\n  private rowToCompound(row: any): CompoundDatabase {\n    const compound: CompoundDatabase = {\n      formula: row.formula,\n      name: row.name,\n      iupacName: row.iupac_name,\n      commonName: row.common_name,\n      casNumber: row.cas_number,\n      smiles: row.smiles,\n      inchi: row.inchi,\n      molecularWeight: row.molecular_weight,\n      confidence: row.confidence,\n      sources: [], // Will be populated separately if needed\n      lastUpdated: new Date(row.updated_at),\n      thermodynamicProperties: {\n        deltaHf: 0,\n        entropy: 0,\n        heatCapacity: 0,\n        temperatureRange: [298, 373] as [number, number]\n      },\n      physicalProperties: {}\n    };\n\n    // Add thermodynamic properties if present\n    if (row.delta_hf !== null) {\n      compound.thermodynamicProperties = {\n        deltaHf: row.delta_hf,\n        deltaGf: row.delta_gf,\n        entropy: row.entropy,\n        heatCapacity: row.heat_capacity,\n        temperatureRange: row.temp_range_min !== null ? \n          [row.temp_range_min, row.temp_range_max] as [number, number] : \n          [298, 373] as [number, number],\n        meltingPoint: row.melting_point,\n        boilingPoint: row.boiling_point,\n        criticalTemperature: row.critical_temp,\n        criticalPressure: row.critical_pressure\n      };\n\n      // Parse additional properties from JSON\n      if (row.thermo_json) {\n        try {\n          const additional = JSON.parse(row.thermo_json);\n          Object.assign(compound.thermodynamicProperties, additional);\n        } catch (e) {\n          console.warn('Failed to parse thermodynamic JSON:', e);\n        }\n      }\n    }\n\n    // Add physical properties if present\n    if (row.density !== null) {\n      compound.physicalProperties = {\n        density: row.density,\n        viscosity: row.viscosity,\n        thermalConductivity: row.thermal_conductivity,\n        refractiveIndex: row.refractive_index,\n        dielectricConstant: row.dielectric_constant,\n        surfaceTension: row.surface_tension\n      };\n\n      // Parse additional properties from JSON\n      if (row.physical_json) {\n        try {\n          const additional = JSON.parse(row.physical_json);\n          Object.assign(compound.physicalProperties, additional);\n        } catch (e) {\n          console.warn('Failed to parse physical JSON:', e);\n        }\n      }\n    }\n\n    // Add safety properties if present\n    if (row.flash_point !== null) {\n      compound.safetyData = {\n        flashPoint: row.flash_point,\n        autoignitionTemperature: row.autoignition_temp,\n        explosiveLimits: {\n          lower: row.explosive_limits_lower,\n          upper: row.explosive_limits_upper\n        },\n        toxicity: {\n          ld50: row.toxicity_oral_ld50,\n          lc50: row.toxicity_inhalation_lc50\n        },\n        hazardSymbols: [],\n        hazardStatements: row.hazard_statements ? JSON.parse(row.hazard_statements) : [],\n        precautionaryStatements: row.precautionary_statements ? JSON.parse(row.precautionary_statements) : []\n      };\n\n      // Parse additional properties from JSON\n      if (row.safety_json) {\n        try {\n          const additional = JSON.parse(row.safety_json);\n          Object.assign(compound.safetyData, additional);\n        } catch (e) {\n          console.warn('Failed to parse safety JSON:', e);\n        }\n      }\n    }\n\n    return compound;\n  }\n\n  private buildFilteredQuery(query: SQLiteQuery): string {\n    let sql = 'SELECT * FROM compounds WHERE 1=1';\n    \n    if (query.minConfidence !== undefined) {\n      sql += ' AND confidence >= ?';\n    }\n    \n    if (query.sources?.length) {\n      sql += ` AND id IN (\n        SELECT compound_id FROM compound_sources \n        WHERE source_name IN (${query.sources.map(() => '?').join(',')})\n      )`;\n    }\n    \n    sql += ' ORDER BY confidence DESC, updated_at DESC';\n    \n    if (query.limit) {\n      sql += ' LIMIT ?';\n    }\n    \n    return sql;\n  }\n\n  private buildQueryParams(query: SQLiteQuery): any[] {\n    const params: any[] = [];\n    \n    if (query.minConfidence !== undefined) {\n      params.push(query.minConfidence);\n    }\n    \n    if (query.sources?.length) {\n      params.push(...query.sources);\n    }\n    \n    if (query.limit) {\n      params.push(query.limit);\n    }\n    \n    return params;\n  }\n\n  private normalizeImportData(item: any, format: 'json' | 'csv'): CompoundDatabase {\n    // Convert imported data to standard CompoundDatabase format\n    // This would need to be customized based on your data sources\n    return {\n      formula: item.formula || item.Formula,\n      name: item.name || item.Name,\n      molecularWeight: parseFloat(item.molecularWeight || item.MW || '0'),\n      confidence: parseFloat(item.confidence || '0.8'),\n      sources: ['import'],\n      lastUpdated: new Date(),\n      thermodynamicProperties: {\n        deltaHf: parseFloat(item.deltaHf || '0'),\n        entropy: parseFloat(item.entropy || '0'),\n        heatCapacity: parseFloat(item.heatCapacity || '0'),\n        temperatureRange: [298, 373] as [number, number]\n      },\n      physicalProperties: {}\n      // Add other properties as needed\n    };\n  }\n}\n","/**\n * CREB-JS Dependency Injection Container\n * \n * A lightweight, type-safe IoC container for managing dependencies\n * with support for singleton/transient lifetimes, constructor injection,\n * and circular dependency detection.\n * \n * @author Loganathane Virassamy\n * @version 1.6.0\n */\n\nimport 'reflect-metadata';\n\n/**\n * Service lifetime enumeration\n */\nexport enum ServiceLifetime {\n  Singleton = 'singleton',\n  Transient = 'transient',\n}\n\n/**\n * Unique token type for dependency identification\n */\nexport type ServiceToken<T = any> = string | symbol | (new (...args: any[]) => T);\n\n/**\n * Factory function type for creating service instances\n */\nexport type ServiceFactory<T = any> = (container: Container) => T;\n\n/**\n * Constructor type with dependency metadata\n */\nexport type Constructor<T = any> = new (...args: any[]) => T;\n\n/**\n * Service registration configuration\n */\nexport interface ServiceRegistration<T = any> {\n  token: ServiceToken<T>;\n  factory: ServiceFactory<T>;\n  lifetime: ServiceLifetime;\n  dependencies: ServiceToken[];\n  singleton?: T;\n}\n\n/**\n * Container configuration options\n */\nexport interface ContainerOptions {\n  enableCircularDependencyDetection: boolean;\n  maxResolutionDepth: number;\n  enablePerformanceTracking: boolean;\n}\n\n/**\n * Circular dependency error with detailed context\n */\nexport class CircularDependencyError extends Error {\n  constructor(\n    public readonly dependencyChain: ServiceToken[],\n    message?: string\n  ) {\n    super(message || `Circular dependency detected: ${dependencyChain.map(t => String(t)).join(' -> ')}`);\n    this.name = 'CircularDependencyError';\n  }\n}\n\n/**\n * Service not found error\n */\nexport class ServiceNotFoundError extends Error {\n  constructor(public readonly token: ServiceToken) {\n    super(`Service not registered: ${String(token)}`);\n    this.name = 'ServiceNotFoundError';\n  }\n}\n\n/**\n * Maximum resolution depth exceeded error\n */\nexport class MaxDepthExceededError extends Error {\n  constructor(public readonly maxDepth: number) {\n    super(`Maximum resolution depth exceeded: ${maxDepth}`);\n    this.name = 'MaxDepthExceededError';\n  }\n}\n\n/**\n * Performance metrics for container operations\n */\nexport interface ContainerMetrics {\n  resolutions: number;\n  singletonCreations: number;\n  transientCreations: number;\n  circularDependencyChecks: number;\n  averageResolutionTime: number;\n  peakResolutionDepth: number;\n}\n\n/**\n * IoC Container implementation with advanced features\n */\nexport class Container {\n  private readonly services = new Map<ServiceToken, ServiceRegistration>();\n  private readonly resolutionStack: ServiceToken[] = [];\n  private readonly metrics: ContainerMetrics = {\n    resolutions: 0,\n    singletonCreations: 0,\n    transientCreations: 0,\n    circularDependencyChecks: 0,\n    averageResolutionTime: 0,\n    peakResolutionDepth: 0,\n  };\n\n  private readonly options: ContainerOptions = {\n    enableCircularDependencyDetection: true,\n    maxResolutionDepth: 50,\n    enablePerformanceTracking: true,\n  };\n\n  constructor(options?: Partial<ContainerOptions>) {\n    if (options) {\n      Object.assign(this.options, options);\n    }\n  }\n\n  /**\n   * Register a service with the container\n   */\n  register<T>(\n    token: ServiceToken<T>,\n    factory: ServiceFactory<T>,\n    lifetime: ServiceLifetime = ServiceLifetime.Transient,\n    dependencies: ServiceToken[] = []\n  ): this {\n    this.services.set(token, {\n      token,\n      factory,\n      lifetime,\n      dependencies,\n    });\n    return this;\n  }\n\n  /**\n   * Register a singleton service\n   */\n  registerSingleton<T>(\n    token: ServiceToken<T>,\n    factory: ServiceFactory<T>,\n    dependencies: ServiceToken[] = []\n  ): this {\n    return this.register(token, factory, ServiceLifetime.Singleton, dependencies);\n  }\n\n  /**\n   * Register a transient service\n   */\n  registerTransient<T>(\n    token: ServiceToken<T>,\n    factory: ServiceFactory<T>,\n    dependencies: ServiceToken[] = []\n  ): this {\n    return this.register(token, factory, ServiceLifetime.Transient, dependencies);\n  }\n\n  /**\n   * Register a class with automatic dependency injection\n   */\n  registerClass<T>(\n    constructor: Constructor<T>,\n    dependencies: ServiceToken[] = [],\n    lifetime: ServiceLifetime = ServiceLifetime.Transient,\n    token?: ServiceToken<T>\n  ): this {\n    const serviceToken = token || constructor;\n    \n    const factory = (container: Container) => {\n      const resolvedDependencies = dependencies.map((dep: ServiceToken) => \n        container.resolve(dep)\n      );\n      return new constructor(...resolvedDependencies);\n    };\n\n    return this.register(serviceToken, factory, lifetime, dependencies);\n  }\n\n  /**\n   * Register an instance as a singleton\n   */\n  registerInstance<T>(token: ServiceToken<T>, instance: T): this {\n    this.services.set(token, {\n      token,\n      factory: () => instance,\n      lifetime: ServiceLifetime.Singleton,\n      dependencies: [],\n      singleton: instance,\n    });\n    return this;\n  }\n\n  /**\n   * Resolve a service from the container\n   */\n  resolve<T>(token: ServiceToken<T>): T {\n    const startTime = this.options.enablePerformanceTracking ? performance.now() : 0;\n    \n    try {\n      this.metrics.resolutions++;\n      const result = this.resolveInternal(token);\n      \n      if (this.options.enablePerformanceTracking) {\n        const resolutionTime = performance.now() - startTime;\n        this.updateAverageResolutionTime(resolutionTime);\n      }\n      \n      return result;\n    } catch (error) {\n      this.resolutionStack.length = 0; // Clear stack on error\n      throw error;\n    }\n  }\n\n  /**\n   * Internal resolution method with circular dependency detection\n   */\n  private resolveInternal<T>(token: ServiceToken<T>): T {\n    // Check resolution depth\n    if (this.resolutionStack.length >= this.options.maxResolutionDepth) {\n      throw new MaxDepthExceededError(this.options.maxResolutionDepth);\n    }\n\n    // Update peak resolution depth\n    if (this.resolutionStack.length > this.metrics.peakResolutionDepth) {\n      this.metrics.peakResolutionDepth = this.resolutionStack.length;\n    }\n\n    // Circular dependency detection\n    if (this.options.enableCircularDependencyDetection) {\n      this.metrics.circularDependencyChecks++;\n      if (this.resolutionStack.includes(token)) {\n        const circularChain = [...this.resolutionStack, token];\n        throw new CircularDependencyError(circularChain);\n      }\n    }\n\n    const registration = this.services.get(token);\n    if (!registration) {\n      throw new ServiceNotFoundError(token);\n    }\n\n    // Return singleton instance if already created\n    if (registration.lifetime === ServiceLifetime.Singleton && registration.singleton) {\n      return registration.singleton;\n    }\n\n    // Add to resolution stack\n    this.resolutionStack.push(token);\n\n    try {\n      // Create new instance\n      const instance = registration.factory(this);\n\n      // Store singleton instance\n      if (registration.lifetime === ServiceLifetime.Singleton) {\n        registration.singleton = instance;\n        this.metrics.singletonCreations++;\n      } else {\n        this.metrics.transientCreations++;\n      }\n\n      return instance;\n    } finally {\n      // Remove from resolution stack\n      this.resolutionStack.pop();\n    }\n  }\n\n  /**\n   * Check if a service is registered\n   */\n  isRegistered<T>(token: ServiceToken<T>): boolean {\n    return this.services.has(token);\n  }\n\n  /**\n   * Unregister a service\n   */\n  unregister<T>(token: ServiceToken<T>): boolean {\n    return this.services.delete(token);\n  }\n\n  /**\n   * Clear all registrations\n   */\n  clear(): void {\n    this.services.clear();\n    this.resolutionStack.length = 0;\n    this.resetMetrics();\n  }\n\n  /**\n   * Get container performance metrics\n   */\n  getMetrics(): Readonly<ContainerMetrics> {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Reset performance metrics\n   */\n  resetMetrics(): void {\n    this.metrics.resolutions = 0;\n    this.metrics.singletonCreations = 0;\n    this.metrics.transientCreations = 0;\n    this.metrics.circularDependencyChecks = 0;\n    this.metrics.averageResolutionTime = 0;\n    this.metrics.peakResolutionDepth = 0;\n  }\n\n  /**\n   * Get all registered service tokens\n   */\n  getRegisteredTokens(): ServiceToken[] {\n    return Array.from(this.services.keys());\n  }\n\n  /**\n   * Create a child container with inherited registrations\n   */\n  createChild(): Container {\n    const child = new Container(this.options);\n    \n    // Copy all registrations to child\n    for (const [token, registration] of this.services) {\n      child.services.set(token, { ...registration });\n    }\n    \n    return child;\n  }\n\n  /**\n   * Dispose the container and clean up resources\n   */\n  dispose(): void {\n    // Dispose all singleton instances that implement IDisposable\n    for (const registration of this.services.values()) {\n      if (registration.singleton && typeof registration.singleton === 'object') {\n        const disposable = registration.singleton as any;\n        if (typeof disposable.dispose === 'function') {\n          try {\n            disposable.dispose();\n          } catch (error) {\n            console.warn(`Error disposing service ${String(registration.token)}:`, error);\n          }\n        }\n      }\n    }\n\n    this.clear();\n  }\n\n  /**\n   * Update average resolution time metric\n   */\n  private updateAverageResolutionTime(newTime: number): void {\n    const count = this.metrics.resolutions;\n    const currentAverage = this.metrics.averageResolutionTime;\n    this.metrics.averageResolutionTime = (currentAverage * (count - 1) + newTime) / count;\n  }\n}\n\n/**\n * Global container instance\n */\nexport const container = new Container();\n\n/**\n * Helper function to create service tokens\n */\nexport function createToken<T>(description: string): ServiceToken<T> {\n  return Symbol(description);\n}\n\n/**\n * Interface for disposable services\n */\nexport interface IDisposable {\n  dispose(): void | Promise<void>;\n}\n","/**\n * Configuration Schema Definitions\n * \n * This file contains validation schemas for all configuration types.\n * Schemas are used for runtime validation and documentation generation.\n */\n\nimport { \n  CREBConfig, \n  CacheConfig, \n  PerformanceConfig, \n  DataConfig, \n  LoggingConfig,\n  ConfigValidationResult,\n  ConfigValidationError,\n  ConfigValidationWarning\n} from '../types';\n\n/**\n * Schema definition interface\n */\ninterface SchemaProperty {\n  type: 'string' | 'number' | 'boolean' | 'array' | 'object';\n  required?: boolean;\n  min?: number;\n  max?: number;\n  enum?: readonly string[];\n  items?: SchemaProperty;\n  properties?: Record<string, SchemaProperty>;\n  default?: unknown;\n  description?: string;\n}\n\n/**\n * Cache configuration schema\n */\nexport const cacheConfigSchema: Record<keyof CacheConfig, SchemaProperty> = {\n  maxSize: {\n    type: 'number',\n    required: true,\n    min: 1,\n    max: 100000,\n    default: 1000,\n    description: 'Maximum number of items to store in cache'\n  },\n  ttl: {\n    type: 'number',\n    required: true,\n    min: 1000,\n    max: 86400000, // 24 hours\n    default: 300000, // 5 minutes\n    description: 'Time to live for cache entries in milliseconds'\n  },\n  strategy: {\n    type: 'string',\n    required: true,\n    enum: ['lru', 'lfu', 'fifo'] as const,\n    default: 'lru',\n    description: 'Cache eviction strategy'\n  }\n};\n\n/**\n * Performance configuration schema\n */\nexport const performanceConfigSchema: Record<keyof PerformanceConfig, SchemaProperty> = {\n  enableWasm: {\n    type: 'boolean',\n    required: true,\n    default: false,\n    description: 'Enable WebAssembly acceleration for calculations'\n  },\n  workerThreads: {\n    type: 'number',\n    required: true,\n    min: 1,\n    max: 16,\n    default: 4,\n    description: 'Number of worker threads for parallel processing'\n  },\n  batchSize: {\n    type: 'number',\n    required: true,\n    min: 1,\n    max: 10000,\n    default: 100,\n    description: 'Batch size for bulk operations'\n  }\n};\n\n/**\n * Data configuration schema\n */\nexport const dataConfigSchema: Record<keyof DataConfig, SchemaProperty> = {\n  providers: {\n    type: 'array',\n    required: true,\n    items: {\n      type: 'string',\n      enum: ['sqlite', 'nist', 'pubchem', 'local']\n    },\n    default: ['sqlite', 'local'],\n    description: 'List of data providers to use'\n  },\n  syncInterval: {\n    type: 'number',\n    required: true,\n    min: 60000, // 1 minute\n    max: 86400000, // 24 hours\n    default: 3600000, // 1 hour\n    description: 'Data synchronization interval in milliseconds'\n  },\n  offlineMode: {\n    type: 'boolean',\n    required: true,\n    default: false,\n    description: 'Enable offline mode (no network requests)'\n  }\n};\n\n/**\n * Logging configuration schema\n */\nexport const loggingConfigSchema: Record<keyof LoggingConfig, SchemaProperty> = {\n  level: {\n    type: 'string',\n    required: true,\n    enum: ['debug', 'info', 'warn', 'error'] as const,\n    default: 'info',\n    description: 'Minimum log level to output'\n  },\n  format: {\n    type: 'string',\n    required: true,\n    enum: ['json', 'text'] as const,\n    default: 'text',\n    description: 'Log output format'\n  },\n  destinations: {\n    type: 'array',\n    required: true,\n    items: {\n      type: 'string',\n      enum: ['console', 'file', 'remote']\n    },\n    default: ['console'],\n    description: 'Log output destinations'\n  }\n};\n\n/**\n * Main CREB configuration schema\n */\nexport const crebConfigSchema: Record<keyof CREBConfig, SchemaProperty> = {\n  cache: {\n    type: 'object',\n    required: true,\n    properties: cacheConfigSchema,\n    description: 'Cache configuration settings'\n  },\n  performance: {\n    type: 'object',\n    required: true,\n    properties: performanceConfigSchema,\n    description: 'Performance optimization settings'\n  },\n  data: {\n    type: 'object',\n    required: true,\n    properties: dataConfigSchema,\n    description: 'Data provider configuration'\n  },\n  logging: {\n    type: 'object',\n    required: true,\n    properties: loggingConfigSchema,\n    description: 'Logging configuration'\n  }\n};\n\n/**\n * Default configuration values\n */\nexport const defaultConfig: CREBConfig = {\n  cache: {\n    maxSize: 1000,\n    ttl: 300000, // 5 minutes\n    strategy: 'lru'\n  },\n  performance: {\n    enableWasm: false,\n    workerThreads: 4,\n    batchSize: 100\n  },\n  data: {\n    providers: ['sqlite', 'local'],\n    syncInterval: 3600000, // 1 hour\n    offlineMode: false\n  },\n  logging: {\n    level: 'info',\n    format: 'text',\n    destinations: ['console']\n  }\n};\n\n/**\n * Validate a configuration object against schema\n */\nexport function validateConfig(config: unknown, schema: Record<string, SchemaProperty>, path = ''): ConfigValidationResult {\n  const errors: ConfigValidationError[] = [];\n  const warnings: ConfigValidationWarning[] = [];\n\n  if (typeof config !== 'object' || config === null) {\n    errors.push({\n      path,\n      message: 'Configuration must be an object',\n      value: config,\n      expectedType: 'object'\n    });\n    return { isValid: false, errors, warnings };\n  }\n\n  const configObj = config as Record<string, unknown>;\n\n  // Check required properties\n  for (const [key, property] of Object.entries(schema)) {\n    const currentPath = path ? `${path}.${key}` : key;\n    const value = configObj[key];\n\n    if (property.required && value === undefined) {\n      errors.push({\n        path: currentPath,\n        message: `Required property '${key}' is missing`,\n        value: undefined,\n        expectedType: property.type\n      });\n      continue;\n    }\n\n    if (value === undefined) continue;\n\n    // Type validation\n    const typeValid = validateType(value, property, currentPath, errors, warnings);\n    \n    if (!typeValid) continue;\n\n    // Range validation for numbers\n    if (property.type === 'number' && typeof value === 'number') {\n      if (property.min !== undefined && value < property.min) {\n        errors.push({\n          path: currentPath,\n          message: `Value ${value} is below minimum ${property.min}`,\n          value\n        });\n      }\n      if (property.max !== undefined && value > property.max) {\n        errors.push({\n          path: currentPath,\n          message: `Value ${value} is above maximum ${property.max}`,\n          value\n        });\n      }\n    }\n\n    // Enum validation\n    if (property.enum && !property.enum.includes(value as string)) {\n      errors.push({\n        path: currentPath,\n        message: `Value '${value}' is not one of allowed values: ${property.enum.join(', ')}`,\n        value,\n        expectedType: `enum: ${property.enum.join(' | ')}`\n      });\n    }\n\n    // Array validation\n    if (property.type === 'array' && Array.isArray(value) && property.items) {\n      value.forEach((item, index) => {\n        const itemPath = `${currentPath}[${index}]`;\n        validateType(item, property.items!, itemPath, errors, warnings);\n        \n        if (property.items!.enum && !property.items!.enum.includes(item as string)) {\n          errors.push({\n            path: itemPath,\n            message: `Array item '${item}' is not one of allowed values: ${property.items!.enum.join(', ')}`,\n            value: item\n          });\n        }\n      });\n    }\n\n    // Object validation (recursive)\n    if (property.type === 'object' && property.properties) {\n      const nestedResult = validateConfig(value, property.properties, currentPath);\n      errors.push(...nestedResult.errors);\n      warnings.push(...nestedResult.warnings);\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n}\n\n/**\n * Validate value type\n */\nfunction validateType(\n  value: unknown, \n  property: SchemaProperty, \n  path: string, \n  errors: ConfigValidationError[], \n  warnings: ConfigValidationWarning[]\n): boolean {\n  const actualType = Array.isArray(value) ? 'array' : typeof value;\n  \n  if (actualType !== property.type) {\n    errors.push({\n      path,\n      message: `Expected ${property.type}, got ${actualType}`,\n      value,\n      expectedType: property.type\n    });\n    return false;\n  }\n  \n  return true;\n}\n\n/**\n * Generate documentation from schema\n */\nexport function generateSchemaDocumentation(schema: Record<string, SchemaProperty>, title: string): string {\n  let doc = `# ${title}\\n\\n`;\n  \n  for (const [key, property] of Object.entries(schema)) {\n    doc += `## ${key}\\n\\n`;\n    doc += `**Type:** ${property.type}\\n`;\n    doc += `**Required:** ${property.required ? 'Yes' : 'No'}\\n`;\n    \n    if (property.default !== undefined) {\n      doc += `**Default:** \\`${JSON.stringify(property.default)}\\`\\n`;\n    }\n    \n    if (property.description) {\n      doc += `**Description:** ${property.description}\\n`;\n    }\n    \n    if (property.enum) {\n      doc += `**Allowed Values:** ${property.enum.map(v => `\\`${v}\\``).join(', ')}\\n`;\n    }\n    \n    if (property.min !== undefined || property.max !== undefined) {\n      doc += `**Range:** `;\n      if (property.min !== undefined) doc += `min: ${property.min}`;\n      if (property.min !== undefined && property.max !== undefined) doc += ', ';\n      if (property.max !== undefined) doc += `max: ${property.max}`;\n      doc += '\\n';\n    }\n    \n    doc += '\\n';\n  }\n  \n  return doc;\n}\n","/**\n * Configuration Manager for CREB-JS\n * \n * Provides centralized, type-safe configuration management with support for:\n * - Environment variable overrides\n * - Runtime configuration updates\n * - Configuration validation\n * - Hot-reload capability\n * - Schema-based documentation generation\n */\n\nimport { EventEmitter } from 'events';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { \n  CREBConfig, \n  PartialCREBConfig, \n  ConfigValidationResult,\n  ConfigChangeEvent,\n  ConfigEnvironmentMapping,\n  ConfigMetadata,\n  HotReloadConfig,\n  ConfigPath,\n  ConfigValueType\n} from './types';\nimport { \n  defaultConfig, \n  validateConfig, \n  crebConfigSchema,\n  generateSchemaDocumentation \n} from './schemas/validation';\nimport { ValidationError, SystemError } from '../core/errors/CREBError';\nimport { Singleton } from '../core/decorators/Injectable';\n\n/**\n * Configuration Manager class\n * Provides type-safe configuration management with validation and hot-reload\n */\n@Singleton()\nexport class ConfigManager extends EventEmitter {\n  private config: CREBConfig;\n  private metadata: ConfigMetadata;\n  private environmentMapping: ConfigEnvironmentMapping;\n  private hotReloadConfig: HotReloadConfig;\n  private watchers: fs.FSWatcher[] = [];\n  private readonly configHistory: Array<{ config: CREBConfig; timestamp: Date }> = [];\n\n  constructor(initialConfig?: PartialCREBConfig) {\n    super();\n    \n    this.environmentMapping = this.createDefaultEnvironmentMapping();\n    this.hotReloadConfig = {\n      enabled: false,\n      watchFiles: [],\n      debounceMs: 1000,\n      excludePaths: ['logging.level'] // Exclude critical settings from hot-reload\n    };\n\n    // Initialize with default config\n    this.config = { ...defaultConfig };\n    this.metadata = {\n      version: '1.0.0',\n      lastModified: new Date(),\n      source: {\n        type: 'default',\n        priority: 1,\n        description: 'Default configuration'\n      },\n      checksum: this.calculateChecksum(this.config)\n    };\n\n    // Apply initial config if provided\n    if (initialConfig) {\n      this.updateConfig(initialConfig);\n    }\n\n    // Load from environment variables\n    this.loadFromEnvironment();\n  }\n\n  /**\n   * Get the current configuration\n   */\n  getConfig(): Readonly<CREBConfig> {\n    return this.deepFreeze({ ...this.config });\n  }\n\n  /**\n   * Get a specific configuration value by path\n   */\n  get<T extends ConfigPath>(path: T): ConfigValueType<T> {\n    const keys = path.split('.') as Array<keyof CREBConfig>;\n    let value: any = this.config;\n    \n    for (const key of keys) {\n      if (value && typeof value === 'object' && key in value) {\n        value = value[key];\n      } else {\n        throw new ValidationError(\n          `Configuration path '${path}' not found`,\n          { path, keys, currentKey: key },\n          { field: 'configPath', value: path, constraint: 'path must exist in configuration' }\n        );\n      }\n    }\n    \n    return value as ConfigValueType<T>;\n  }\n\n  /**\n   * Set a specific configuration value by path\n   */\n  set<T extends ConfigPath>(path: T, value: ConfigValueType<T>): void {\n    const keys = path.split('.') as Array<keyof CREBConfig>;\n    const oldValue = this.get(path);\n    \n    // Create a deep copy of config for modification\n    const newConfig = JSON.parse(JSON.stringify(this.config)) as CREBConfig;\n    \n    let current: any = newConfig;\n    for (let i = 0; i < keys.length - 1; i++) {\n      current = current[keys[i]];\n    }\n    \n    current[keys[keys.length - 1]] = value;\n    \n    // Validate the change\n    const validationResult = this.validateConfiguration(newConfig);\n    if (!validationResult.isValid) {\n      throw new ValidationError(\n        `Configuration validation failed: ${validationResult.errors.map(e => e.message).join(', ')}`,\n        { path, value, errors: validationResult.errors },\n        { field: 'configValue', value: value, constraint: 'must pass validation schema' }\n      );\n    }\n    \n    // Apply the change\n    this.config = newConfig;\n    this.updateMetadata('runtime');\n    \n    // Emit change event\n    const changeEvent: ConfigChangeEvent = {\n      path,\n      oldValue,\n      newValue: value,\n      timestamp: new Date()\n    };\n    \n    this.emit('configChanged', changeEvent);\n    this.emit(`configChanged:${path}`, changeEvent);\n  }\n\n  /**\n   * Update configuration with partial changes\n   */\n  updateConfig(partialConfig: PartialCREBConfig): ConfigValidationResult {\n    const mergedConfig = this.mergeConfigs(this.config, partialConfig);\n    const validationResult = this.validateConfiguration(mergedConfig);\n    \n    if (validationResult.isValid) {\n      const oldConfig = { ...this.config };\n      this.config = mergedConfig;\n      this.updateMetadata('runtime');\n      this.saveToHistory();\n      \n      // Emit change events for each changed property\n      this.emitChangeEvents(oldConfig, this.config);\n    }\n    \n    return validationResult;\n  }\n\n  /**\n   * Load configuration from file\n   */\n  async loadFromFile(filePath: string): Promise<ConfigValidationResult> {\n    try {\n      const fileContent = await fs.promises.readFile(filePath, 'utf8');\n      const fileConfig = JSON.parse(fileContent) as PartialCREBConfig;\n      \n      const result = this.updateConfig(fileConfig);\n      \n      if (result.isValid) {\n        this.updateMetadata('file');\n        \n        // Set up hot-reload if enabled\n        if (this.hotReloadConfig.enabled) {\n          this.watchConfigFile(filePath);\n        }\n      }\n      \n      return result;\n    } catch (error) {\n      const configError = new SystemError(\n        `Failed to load config file: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        { filePath, operation: 'loadFromFile' },\n        { subsystem: 'configuration', resource: 'file-system' }\n      );\n      \n      return {\n        isValid: false,\n        errors: [{\n          path: '',\n          message: configError.message,\n          value: filePath\n        }],\n        warnings: []\n      };\n    }\n  }\n\n  /**\n   * Save configuration to file\n   */\n  async saveToFile(filePath: string): Promise<void> {\n    const configWithMetadata = {\n      ...this.config,\n      _metadata: this.metadata\n    };\n    \n    await fs.promises.writeFile(\n      filePath, \n      JSON.stringify(configWithMetadata, null, 2), \n      'utf8'\n    );\n  }\n\n  /**\n   * Load configuration from environment variables\n   */\n  loadFromEnvironment(): void {\n    const envConfig: any = {};\n    \n    for (const [configPath, envVar] of Object.entries(this.environmentMapping)) {\n      const envValue = process.env[envVar];\n      if (envValue !== undefined) {\n        this.setNestedValue(envConfig, configPath, this.parseEnvironmentValue(envValue));\n      }\n    }\n    \n    if (Object.keys(envConfig).length > 0) {\n      this.updateConfig(envConfig);\n      this.updateMetadata('environment');\n    }\n  }\n\n  /**\n   * Validate current configuration\n   */\n  validateConfiguration(config: CREBConfig = this.config): ConfigValidationResult {\n    return validateConfig(config, crebConfigSchema);\n  }\n\n  /**\n   * Enable hot-reload for configuration files\n   */\n  enableHotReload(options: Partial<HotReloadConfig> = {}): void {\n    this.hotReloadConfig = { ...this.hotReloadConfig, ...options, enabled: true };\n  }\n\n  /**\n   * Disable hot-reload\n   */\n  disableHotReload(): void {\n    this.hotReloadConfig.enabled = false;\n    this.watchers.forEach(watcher => watcher.close());\n    this.watchers = [];\n  }\n\n  /**\n   * Get configuration metadata\n   */\n  getMetadata(): Readonly<ConfigMetadata> {\n    return Object.freeze({ ...this.metadata });\n  }\n\n  /**\n   * Get configuration history\n   */\n  getHistory(): ReadonlyArray<{ config: Readonly<CREBConfig>; timestamp: Date }> {\n    return this.configHistory.map(entry => ({\n      config: this.deepFreeze({ ...entry.config }),\n      timestamp: entry.timestamp\n    }));\n  }\n\n  /**\n   * Reset configuration to defaults\n   */\n  resetToDefaults(): void {\n    const oldConfig = { ...this.config };\n    this.config = { ...defaultConfig };\n    this.updateMetadata('default');\n    this.emitChangeEvents(oldConfig, this.config);\n  }\n\n  /**\n   * Generate documentation for current configuration schema\n   */\n  generateDocumentation(): string {\n    return generateSchemaDocumentation(crebConfigSchema, 'CREB Configuration');\n  }\n\n  /**\n   * Get configuration as JSON string\n   */\n  toJSON(): string {\n    return JSON.stringify(this.config, null, 2);\n  }\n\n  /**\n   * Get configuration summary for debugging\n   */\n  getSummary(): string {\n    const validation = this.validateConfiguration();\n    return `\nCREB Configuration Summary\n=========================\nVersion: ${this.metadata.version}\nLast Modified: ${this.metadata.lastModified.toISOString()}\nSource: ${this.metadata.source.type}\nValid: ${validation.isValid}\nErrors: ${validation.errors.length}\nWarnings: ${validation.warnings.length}\nHot Reload: ${this.hotReloadConfig.enabled ? 'Enabled' : 'Disabled'}\n\nCurrent Configuration:\n${this.toJSON()}\n    `.trim();\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    this.disableHotReload();\n    this.removeAllListeners();\n  }\n\n  // Private methods\n\n  private createDefaultEnvironmentMapping(): ConfigEnvironmentMapping {\n    return {\n      'cache.maxSize': 'CREB_CACHE_MAX_SIZE',\n      'cache.ttl': 'CREB_CACHE_TTL',\n      'cache.strategy': 'CREB_CACHE_STRATEGY',\n      'performance.enableWasm': 'CREB_ENABLE_WASM',\n      'performance.workerThreads': 'CREB_WORKER_THREADS',\n      'performance.batchSize': 'CREB_BATCH_SIZE',\n      'data.providers': 'CREB_DATA_PROVIDERS',\n      'data.syncInterval': 'CREB_SYNC_INTERVAL',\n      'data.offlineMode': 'CREB_OFFLINE_MODE',\n      'logging.level': 'CREB_LOG_LEVEL',\n      'logging.format': 'CREB_LOG_FORMAT',\n      'logging.destinations': 'CREB_LOG_DESTINATIONS'\n    };\n  }\n\n  private parseEnvironmentValue(value: string): unknown {\n    // Try to parse as boolean\n    if (value.toLowerCase() === 'true') return true;\n    if (value.toLowerCase() === 'false') return false;\n    \n    // Try to parse as number\n    const numValue = Number(value);\n    if (!isNaN(numValue)) return numValue;\n    \n    // Try to parse as JSON array\n    if (value.startsWith('[') && value.endsWith(']')) {\n      try {\n        return JSON.parse(value);\n      } catch {\n        // Fall back to comma-separated values\n        return value.slice(1, -1).split(',').map(v => v.trim());\n      }\n    }\n    \n    // Return as string\n    return value;\n  }\n\n  private setNestedValue(obj: any, path: string, value: unknown): void {\n    const keys = path.split('.');\n    let current = obj;\n    \n    for (let i = 0; i < keys.length - 1; i++) {\n      if (!(keys[i] in current)) {\n        current[keys[i]] = {};\n      }\n      current = current[keys[i]];\n    }\n    \n    current[keys[keys.length - 1]] = value;\n  }\n\n  private mergeConfigs(base: CREBConfig, partial: PartialCREBConfig): CREBConfig {\n    const result = { ...base };\n    \n    for (const [key, value] of Object.entries(partial)) {\n      if (value !== undefined) {\n        if (typeof value === 'object' && !Array.isArray(value)) {\n          result[key as keyof CREBConfig] = {\n            ...base[key as keyof CREBConfig],\n            ...value\n          } as any;\n        } else {\n          result[key as keyof CREBConfig] = value as any;\n        }\n      }\n    }\n    \n    return result;\n  }\n\n  private updateMetadata(sourceType: 'default' | 'file' | 'environment' | 'runtime'): void {\n    this.metadata = {\n      ...this.metadata,\n      lastModified: new Date(),\n      source: {\n        type: sourceType,\n        priority: sourceType === 'environment' ? 3 : sourceType === 'file' ? 2 : 1,\n        description: `Configuration loaded from ${sourceType}`\n      },\n      checksum: this.calculateChecksum(this.config)\n    };\n  }\n\n  private calculateChecksum(config: CREBConfig): string {\n    const str = JSON.stringify(config);\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return hash.toString(16);\n  }\n\n  private saveToHistory(): void {\n    this.configHistory.push({\n      config: { ...this.config },\n      timestamp: new Date()\n    });\n    \n    // Keep only last 10 entries\n    if (this.configHistory.length > 10) {\n      this.configHistory.shift();\n    }\n  }\n\n  private emitChangeEvents(oldConfig: CREBConfig, newConfig: CREBConfig): void {\n    const changes = this.findConfigChanges(oldConfig, newConfig);\n    \n    for (const change of changes) {\n      this.emit('configChanged', change);\n      this.emit(`configChanged:${change.path}`, change);\n    }\n  }\n\n  private findConfigChanges(oldConfig: CREBConfig, newConfig: CREBConfig, prefix = ''): ConfigChangeEvent[] {\n    const changes: ConfigChangeEvent[] = [];\n    \n    for (const [key, newValue] of Object.entries(newConfig)) {\n      const path = prefix ? `${prefix}.${key}` : key;\n      const oldValue = (oldConfig as any)[key];\n      \n      if (typeof newValue === 'object' && !Array.isArray(newValue) && newValue !== null) {\n        changes.push(...this.findConfigChanges(oldValue || {}, newValue, path));\n      } else if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {\n        changes.push({\n          path,\n          oldValue,\n          newValue,\n          timestamp: new Date()\n        });\n      }\n    }\n    \n    return changes;\n  }\n\n  private watchConfigFile(filePath: string): void {\n    const watcher = fs.watch(filePath, { persistent: false }, (eventType) => {\n      if (eventType === 'change') {\n        setTimeout(() => {\n          this.loadFromFile(filePath).catch(error => {\n            this.emit('error', new Error(`Hot-reload failed: ${error.message}`));\n          });\n        }, this.hotReloadConfig.debounceMs);\n      }\n    });\n    \n    this.watchers.push(watcher);\n  }\n\n  /**\n   * Deep freeze an object to make it truly immutable\n   */\n  private deepFreeze<T>(obj: T): T {\n    // Get property names\n    Object.getOwnPropertyNames(obj).forEach(prop => {\n      const value = (obj as any)[prop];\n      \n      // Freeze properties before freezing self\n      if (value && typeof value === 'object') {\n        this.deepFreeze(value);\n      }\n    });\n    \n    return Object.freeze(obj);\n  }\n}\n\n/**\n * Singleton configuration manager instance\n */\nexport const configManager = new ConfigManager();\n\n/**\n * Convenience function to get configuration value\n */\nexport function getConfig<T extends ConfigPath>(path: T): ConfigValueType<T> {\n  return configManager.get(path);\n}\n\n/**\n * Convenience function to set configuration value\n */\nexport function setConfig<T extends ConfigPath>(path: T, value: ConfigValueType<T>): void {\n  configManager.set(path, value);\n}\n\n/**\n * Convenience function to get full configuration\n */\nexport function getFullConfig(): Readonly<CREBConfig> {\n  return configManager.getConfig();\n}\n","/**\n * CREB-JS Dependency Injection Setup\n * \n * Central configuration for all dependency injection services in CREB-JS.\n * This module sets up and configures the main DI container with all services.\n * \n * @author Loganathane Virassamy\n * @version 1.6.0\n */\n\nimport {\n  Container,\n  createToken,\n  ServiceLifetime,\n  type ServiceToken,\n  container as globalContainer\n} from './core/Container';\n\n// Core Services\nimport { ConfigManager } from './config/ConfigManager';\nimport { ChemicalEquationBalancer } from './balancer';\nimport { EnhancedChemicalEquationBalancer } from './enhancedBalancer';\nimport { Stoichiometry } from './stoichiometry';\nimport { ThermodynamicsCalculator } from './thermodynamics/calculator';\nimport { SQLiteStorageProvider } from './data/SQLiteStorageProvider';\nimport { AdvancedCache } from './performance/cache/AdvancedCache';\nimport { WorkerPool } from './performance/workers/WorkerPool';\nimport { TaskQueue } from './performance/workers/TaskQueue';\n\n// Service Tokens\nexport const IConfigManagerToken = createToken<ConfigManager>('IConfigManager');\nexport const IBalancerToken = createToken<ChemicalEquationBalancer>('IBalancer');\nexport const IEnhancedBalancerToken = createToken<EnhancedChemicalEquationBalancer>('IEnhancedBalancer');\nexport const IStoichiometryToken = createToken<Stoichiometry>('IStoichiometry');\nexport const IThermodynamicsCalculatorToken = createToken<ThermodynamicsCalculator>('IThermodynamicsCalculator');\nexport const IStorageProviderToken = createToken<SQLiteStorageProvider>('IStorageProvider');\nexport const ICacheToken = createToken<AdvancedCache>('ICache');\nexport const IWorkerPoolToken = createToken<WorkerPool>('IWorkerPool');\nexport const ITaskQueueToken = createToken<TaskQueue>('ITaskQueue');\n\n/**\n * Configure and setup the main CREB DI container\n */\nexport function setupCREBContainer(): Container {\n  const container = new Container({\n    enableCircularDependencyDetection: true,\n    enablePerformanceTracking: true,\n    maxResolutionDepth: 50,\n  });\n\n  // Register Core Services as Singletons\n  container.registerClass(\n    ConfigManager,\n    [],\n    ServiceLifetime.Singleton,\n    IConfigManagerToken\n  );\n\n  container.registerClass(\n    AdvancedCache,\n    [],\n    ServiceLifetime.Singleton,\n    ICacheToken\n  );\n\n  container.registerClass(\n    SQLiteStorageProvider,\n    [],\n    ServiceLifetime.Singleton,\n    IStorageProviderToken\n  );\n\n  container.registerClass(\n    ThermodynamicsCalculator,\n    [],\n    ServiceLifetime.Singleton,\n    IThermodynamicsCalculatorToken\n  );\n\n  // Register Worker Thread Services (commented out due to ESM compatibility issues)\n  // container.registerClass(\n  //   TaskQueue,\n  //   [],\n  //   ServiceLifetime.Singleton,\n  //   ITaskQueueToken\n  // );\n\n  // container.registerClass(\n  //   WorkerPool,\n  //   [],\n  //   ServiceLifetime.Singleton,\n  //   IWorkerPoolToken\n  // );\n\n  // Register Calculation Services as Transient (stateless)\n  container.registerClass(\n    ChemicalEquationBalancer,\n    [],\n    ServiceLifetime.Transient,\n    IBalancerToken\n  );\n\n  container.registerClass(\n    EnhancedChemicalEquationBalancer,\n    [],\n    ServiceLifetime.Transient,\n    IEnhancedBalancerToken\n  );\n\n  container.registerClass(\n    Stoichiometry,\n    [],\n    ServiceLifetime.Transient,\n    IStoichiometryToken\n  );\n\n  return container;\n}\n\n/**\n * Initialize the global CREB container with default services\n */\nexport function initializeCREBDI(): void {\n  const container = setupCREBContainer();\n  \n  // Copy registrations to global container\n  for (const token of container.getRegisteredTokens()) {\n    if (!globalContainer.isRegistered(token)) {\n      // Re-register in global container\n      const registration = (container as any).services.get(token);\n      if (registration) {\n        globalContainer.register(\n          token,\n          registration.factory,\n          registration.lifetime,\n          registration.dependencies\n        );\n      }\n    }\n  }\n}\n\n/**\n * Get a service from the global container with type safety\n */\nexport function getService<T>(token: ServiceToken<T>): T {\n  return globalContainer.resolve(token);\n}\n\n/**\n * Create a child container for testing or isolation\n */\nexport function createChildContainer(): Container {\n  return globalContainer.createChild();\n}\n\n/**\n * Helper functions for common services\n */\nexport const CREBServices = {\n  getConfigManager: () => getService(IConfigManagerToken),\n  getBalancer: () => getService(IBalancerToken),\n  getEnhancedBalancer: () => getService(IEnhancedBalancerToken),\n  getStoichiometry: () => getService(IStoichiometryToken),\n  getThermodynamicsCalculator: () => getService(IThermodynamicsCalculatorToken),\n  getStorageProvider: () => getService(IStorageProviderToken),\n  getCache: () => getService(ICacheToken),\n  // getWorkerPool: () => getService(IWorkerPoolToken),      // Commented out due to ESM issues\n  // getTaskQueue: () => getService(ITaskQueueToken),        // Commented out due to ESM issues\n};\n\n/**\n * Initialize DI on module load for production usage\n */\nif (typeof process !== 'undefined' && process.env.NODE_ENV !== 'test') {\n  initializeCREBDI();\n}\n","/**\n * Circuit Breaker Pattern Implementation for CREB-JS\n * Prevents cascading failures by monitoring and controlling access to external resources\n */\n\nimport { CREBError, ErrorCategory, ErrorSeverity, ExternalAPIError, SystemError } from '../errors/CREBError';\n\nexport enum CircuitBreakerState {\n  CLOSED = 'CLOSED',     // Normal operation\n  OPEN = 'OPEN',         // Failing, rejecting calls\n  HALF_OPEN = 'HALF_OPEN' // Testing if service recovered\n}\n\nexport interface CircuitBreakerConfig {\n  /** Number of failures before opening the circuit */\n  failureThreshold: number;\n  /** Percentage of failures (0-100) before opening the circuit */\n  failureRate: number;\n  /** Time window for measuring failures (ms) */\n  monitoringWindow: number;\n  /** Time to wait before attempting recovery (ms) */\n  timeout: number;\n  /** Number of successful calls needed to close circuit from half-open */\n  successThreshold: number;\n  /** Minimum number of calls required before calculating failure rate */\n  minimumCalls: number;\n  /** Function to determine if an error should count as a failure */\n  isFailure?: (error: any) => boolean;\n  /** Function called when circuit state changes */\n  onStateChange?: (state: CircuitBreakerState, previous: CircuitBreakerState) => void;\n  /** Function called when circuit breaker trips */\n  onCircuitOpen?: (error: any) => void;\n  /** Function called when circuit breaker recovers */\n  onCircuitClose?: () => void;\n}\n\nexport interface CircuitBreakerMetrics {\n  state: CircuitBreakerState;\n  failureCount: number;\n  successCount: number;\n  totalCalls: number;\n  failureRate: number;\n  lastFailureTime?: Date;\n  lastSuccessTime?: Date;\n  stateChangedAt: Date;\n  timeSinceStateChange: number;\n  nextAttemptTime?: Date;\n}\n\ninterface CallRecord {\n  timestamp: number;\n  success: boolean;\n  duration: number;\n  error?: any;\n}\n\n/**\n * Circuit Breaker implementation for fault tolerance\n */\nexport class CircuitBreaker {\n  private state: CircuitBreakerState = CircuitBreakerState.CLOSED;\n  private failureCount: number = 0;\n  private successCount: number = 0;\n  private lastFailureTime?: Date;\n  private lastSuccessTime?: Date;\n  private stateChangedAt: Date = new Date();\n  private nextAttemptTime?: Date;\n  private callHistory: CallRecord[] = [];\n  private readonly config: Required<CircuitBreakerConfig>;\n\n  constructor(\n    private readonly name: string,\n    config: CircuitBreakerConfig\n  ) {\n    // Default configuration\n    const defaultConfig: Required<CircuitBreakerConfig> = {\n      failureThreshold: 5,\n      failureRate: 50,\n      monitoringWindow: 60000, // 1 minute\n      timeout: 30000, // 30 seconds\n      successThreshold: 3,\n      minimumCalls: 10,\n      isFailure: (error: any) => true, // All errors count as failures by default\n      onStateChange: () => {},\n      onCircuitOpen: () => {},\n      onCircuitClose: () => {}\n    };\n\n    // Merge with provided config\n    this.config = {\n      ...defaultConfig,\n      ...config\n    };\n  }\n\n  /**\n   * Execute a function with circuit breaker protection\n   */\n  async execute<T>(fn: () => Promise<T>): Promise<T> {\n    if (this.state === CircuitBreakerState.OPEN) {\n      if (this.shouldAttemptReset()) {\n        this.setState(CircuitBreakerState.HALF_OPEN);\n      } else {\n        throw new ExternalAPIError(\n          `Circuit breaker is OPEN for ${this.name}. Service is currently unavailable.`,\n          this.name,\n          {\n            circuitBreakerState: this.state,\n            nextAttemptTime: this.nextAttemptTime\n          },\n          {\n            rateLimited: false,\n            statusCode: 503\n          }\n        );\n      }\n    }\n\n    const startTime = Date.now();\n    try {\n      const result = await fn();\n      this.onSuccess(Date.now() - startTime);\n      return result;\n    } catch (error) {\n      this.onFailure(error, Date.now() - startTime);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute a synchronous function with circuit breaker protection\n   */\n  executeSync<T>(fn: () => T): T {\n    if (this.state === CircuitBreakerState.OPEN) {\n      if (this.shouldAttemptReset()) {\n        this.setState(CircuitBreakerState.HALF_OPEN);\n      } else {\n        throw new ExternalAPIError(\n          `Circuit breaker is OPEN for ${this.name}. Service is currently unavailable.`,\n          this.name,\n          {\n            circuitBreakerState: this.state,\n            nextAttemptTime: this.nextAttemptTime\n          },\n          {\n            rateLimited: false,\n            statusCode: 503\n          }\n        );\n      }\n    }\n\n    const startTime = Date.now();\n    try {\n      const result = fn();\n      this.onSuccess(Date.now() - startTime);\n      return result;\n    } catch (error) {\n      this.onFailure(error, Date.now() - startTime);\n      throw error;\n    }\n  }\n\n  /**\n   * Get current circuit breaker metrics\n   */\n  getMetrics(): CircuitBreakerMetrics {\n    const now = Date.now();\n    const recentCalls = this.getRecentCalls();\n    const totalCalls = recentCalls.length;\n    const failures = recentCalls.filter(call => !call.success).length;\n    \n    return {\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      totalCalls,\n      failureRate: totalCalls > 0 ? (failures / totalCalls) * 100 : 0,\n      lastFailureTime: this.lastFailureTime,\n      lastSuccessTime: this.lastSuccessTime,\n      stateChangedAt: this.stateChangedAt,\n      timeSinceStateChange: now - this.stateChangedAt.getTime(),\n      nextAttemptTime: this.nextAttemptTime\n    };\n  }\n\n  /**\n   * Reset the circuit breaker to closed state\n   */\n  reset(): void {\n    this.setState(CircuitBreakerState.CLOSED);\n    this.failureCount = 0;\n    this.successCount = 0;\n    this.lastFailureTime = undefined;\n    this.nextAttemptTime = undefined;\n    this.callHistory = [];\n  }\n\n  /**\n   * Force the circuit breaker to open state\n   */\n  trip(): void {\n    this.setState(CircuitBreakerState.OPEN);\n    this.setNextAttemptTime();\n    this.config.onCircuitOpen(new Error('Circuit breaker manually tripped'));\n  }\n\n  /**\n   * Check if the circuit breaker is currently open\n   */\n  isOpen(): boolean {\n    return this.state === CircuitBreakerState.OPEN;\n  }\n\n  /**\n   * Check if the circuit breaker is currently half-open\n   */\n  isHalfOpen(): boolean {\n    return this.state === CircuitBreakerState.HALF_OPEN;\n  }\n\n  /**\n   * Check if the circuit breaker is currently closed\n   */\n  isClosed(): boolean {\n    return this.state === CircuitBreakerState.CLOSED;\n  }\n\n  private onSuccess(duration: number): void {\n    this.recordCall(true, duration);\n    this.successCount++;\n    this.lastSuccessTime = new Date();\n\n    if (this.state === CircuitBreakerState.HALF_OPEN) {\n      if (this.successCount >= this.config.successThreshold) {\n        this.setState(CircuitBreakerState.CLOSED);\n        this.failureCount = 0;\n        this.config.onCircuitClose();\n      }\n    }\n  }\n\n  private onFailure(error: any, duration: number): void {\n    if (this.config.isFailure(error)) {\n      this.recordCall(false, duration, error);\n      this.failureCount++;\n      this.lastFailureTime = new Date();\n\n      if (this.state === CircuitBreakerState.HALF_OPEN) {\n        this.setState(CircuitBreakerState.OPEN);\n        this.setNextAttemptTime();\n        this.config.onCircuitOpen(error);\n      } else if (this.state === CircuitBreakerState.CLOSED && this.shouldOpenCircuit()) {\n        this.setState(CircuitBreakerState.OPEN);\n        this.setNextAttemptTime();\n        this.config.onCircuitOpen(error);\n      }\n    }\n  }\n\n  private shouldOpenCircuit(): boolean {\n    const recentCalls = this.getRecentCalls();\n    \n    // Check if we have minimum number of calls\n    if (recentCalls.length < this.config.minimumCalls) {\n      return false;\n    }\n\n    // Check failure count threshold\n    if (this.failureCount >= this.config.failureThreshold) {\n      return true;\n    }\n\n    // Check failure rate threshold\n    const failures = recentCalls.filter(call => !call.success).length;\n    const failureRate = (failures / recentCalls.length) * 100;\n    \n    return failureRate >= this.config.failureRate;\n  }\n\n  private shouldAttemptReset(): boolean {\n    return this.nextAttemptTime ? Date.now() >= this.nextAttemptTime.getTime() : false;\n  }\n\n  private setState(newState: CircuitBreakerState): void {\n    const previousState = this.state;\n    if (previousState !== newState) {\n      this.state = newState;\n      this.stateChangedAt = new Date();\n      \n      // Reset counters on state change\n      if (newState === CircuitBreakerState.CLOSED) {\n        this.failureCount = 0;\n        this.successCount = 0;\n      } else if (newState === CircuitBreakerState.HALF_OPEN) {\n        this.successCount = 0;\n      }\n\n      this.config.onStateChange(newState, previousState);\n    }\n  }\n\n  private setNextAttemptTime(): void {\n    this.nextAttemptTime = new Date(Date.now() + this.config.timeout);\n  }\n\n  private recordCall(success: boolean, duration: number, error?: any): void {\n    const record: CallRecord = {\n      timestamp: Date.now(),\n      success,\n      duration,\n      error\n    };\n\n    this.callHistory.push(record);\n\n    // Keep only recent calls within monitoring window\n    const cutoff = Date.now() - this.config.monitoringWindow;\n    this.callHistory = this.callHistory.filter(call => call.timestamp >= cutoff);\n  }\n\n  private getRecentCalls(): CallRecord[] {\n    const cutoff = Date.now() - this.config.monitoringWindow;\n    return this.callHistory.filter(call => call.timestamp >= cutoff);\n  }\n}\n\n/**\n * Circuit Breaker Manager for handling multiple circuit breakers\n */\nexport class CircuitBreakerManager {\n  private breakers = new Map<string, CircuitBreaker>();\n\n  /**\n   * Create or get a circuit breaker for a service\n   */\n  getBreaker(name: string, config?: CircuitBreakerConfig): CircuitBreaker {\n    if (!this.breakers.has(name)) {\n      if (!config) {\n        throw new SystemError(\n          `Circuit breaker configuration required for new service: ${name}`,\n          { service: name },\n          { subsystem: 'CircuitBreakerManager' }\n        );\n      }\n      this.breakers.set(name, new CircuitBreaker(name, config));\n    }\n    return this.breakers.get(name)!;\n  }\n\n  /**\n   * Remove a circuit breaker\n   */\n  removeBreaker(name: string): boolean {\n    return this.breakers.delete(name);\n  }\n\n  /**\n   * Get metrics for all circuit breakers\n   */\n  getAllMetrics(): Record<string, CircuitBreakerMetrics> {\n    const metrics: Record<string, CircuitBreakerMetrics> = {};\n    for (const [name, breaker] of this.breakers) {\n      metrics[name] = breaker.getMetrics();\n    }\n    return metrics;\n  }\n\n  /**\n   * Reset all circuit breakers\n   */\n  resetAll(): void {\n    for (const breaker of this.breakers.values()) {\n      breaker.reset();\n    }\n  }\n\n  /**\n   * Get health status of all services\n   */\n  getHealthStatus(): {\n    healthy: string[];\n    degraded: string[];\n    failed: string[];\n    total: number;\n  } {\n    const healthy: string[] = [];\n    const degraded: string[] = [];\n    const failed: string[] = [];\n\n    for (const [name, breaker] of this.breakers) {\n      const metrics = breaker.getMetrics();\n      \n      if (metrics.state === CircuitBreakerState.CLOSED) {\n        if (metrics.failureRate < 10) {\n          healthy.push(name);\n        } else {\n          degraded.push(name);\n        }\n      } else {\n        failed.push(name);\n      }\n    }\n\n    return {\n      healthy,\n      degraded,\n      failed,\n      total: this.breakers.size\n    };\n  }\n}\n\n// Global circuit breaker manager instance\nexport const circuitBreakerManager = new CircuitBreakerManager();\n\n/**\n * Decorator for automatic circuit breaker protection\n */\nexport function WithCircuitBreaker(name: string, config?: CircuitBreakerConfig) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      const breaker = circuitBreakerManager.getBreaker(name, config);\n      return breaker.execute(() => originalMethod.apply(this, args));\n    };\n\n    return descriptor;\n  };\n}\n","/**\n * Retry Policy Implementation for CREB-JS\n * Provides intelligent retry strategies with exponential backoff, jitter, and rate limiting\n */\n\nimport { CREBError, ErrorCategory, ErrorSeverity, ErrorUtils } from '../errors/CREBError';\n\nexport enum RetryStrategy {\n  FIXED_DELAY = 'FIXED_DELAY',\n  LINEAR_BACKOFF = 'LINEAR_BACKOFF',\n  EXPONENTIAL_BACKOFF = 'EXPONENTIAL_BACKOFF',\n  EXPONENTIAL_BACKOFF_JITTER = 'EXPONENTIAL_BACKOFF_JITTER'\n}\n\nexport interface RetryConfig {\n  /** Maximum number of retry attempts */\n  maxAttempts: number;\n  /** Initial delay between retries (ms) */\n  initialDelay: number;\n  /** Maximum delay between retries (ms) */\n  maxDelay: number;\n  /** Retry strategy to use */\n  strategy: RetryStrategy;\n  /** Multiplier for exponential backoff */\n  backoffMultiplier: number;\n  /** Jitter factor (0-1) for randomizing delays */\n  jitterFactor: number;\n  /** Function to determine if an error should be retried */\n  shouldRetry?: (error: any, attempt: number) => boolean;\n  /** Function called before each retry attempt */\n  onRetry?: (error: any, attempt: number, delay: number) => void;\n  /** Function called when all retries are exhausted */\n  onFailure?: (error: any, attempts: number) => void;\n  /** Function called when operation succeeds after retries */\n  onSuccess?: (result: any, attempts: number) => void;\n  /** Timeout for each individual attempt (ms) */\n  attemptTimeout?: number;\n  /** Global timeout for all attempts (ms) */\n  globalTimeout?: number;\n}\n\nexport interface RetryMetrics {\n  totalAttempts: number;\n  successfulAttempts: number;\n  failedAttempts: number;\n  averageDelay: number;\n  totalDelay: number;\n  lastError?: any;\n  executionTime: number;\n}\n\nexport interface RetryResult<T> {\n  result: T;\n  metrics: RetryMetrics;\n  succeeded: boolean;\n  finalError?: any;\n}\n\n/**\n * Rate limiter to respect API rate limits during retries\n */\nexport class RateLimiter {\n  private requests: number[] = [];\n\n  constructor(\n    private readonly maxRequests: number,\n    private readonly windowMs: number\n  ) {}\n\n  /**\n   * Check if a request can be made within rate limits\n   */\n  canMakeRequest(): boolean {\n    const now = Date.now();\n    const windowStart = now - this.windowMs;\n    \n    // Remove old requests outside the window\n    this.requests = this.requests.filter(time => time > windowStart);\n    \n    return this.requests.length < this.maxRequests;\n  }\n\n  /**\n   * Record a request\n   */\n  recordRequest(): void {\n    this.requests.push(Date.now());\n  }\n\n  /**\n   * Get time until next request is allowed\n   */\n  getTimeUntilNextRequest(): number {\n    if (this.canMakeRequest()) {\n      return 0;\n    }\n\n    const oldestRequest = Math.min(...this.requests);\n    const windowStart = Date.now() - this.windowMs;\n    return Math.max(0, oldestRequest - windowStart);\n  }\n\n  /**\n   * Reset the rate limiter\n   */\n  reset(): void {\n    this.requests = [];\n  }\n}\n\n/**\n * Retry Policy implementation with intelligent backoff strategies\n */\nexport class RetryPolicy {\n  private readonly config: Required<RetryConfig>;\n  private rateLimiter?: RateLimiter;\n\n  constructor(config: RetryConfig, rateLimiter?: RateLimiter) {\n    // Default configuration with proper typing\n    const defaultConfig = {\n      maxAttempts: 3,\n      initialDelay: 1000,\n      maxDelay: 30000,\n      strategy: RetryStrategy.EXPONENTIAL_BACKOFF_JITTER,\n      backoffMultiplier: 2,\n      jitterFactor: 0.1,\n      shouldRetry: (error: any, attempt: number) => {\n        // Default retry logic - retry on any error (except for specific non-retryable ones)\n        // If it's a CREB error, use its retryable flag\n        if (error instanceof CREBError) {\n          return error.isRetryable();\n        }\n        \n        // For other errors, retry unless they're clearly non-retryable\n        const message = error?.message || String(error);\n        const nonRetryablePatterns = [\n          /authorization/i,\n          /forbidden/i,\n          /401/,\n          /403/,\n          /404/,\n          /validation/i,\n          /syntax/i\n        ];\n        \n        return !nonRetryablePatterns.some(pattern => pattern.test(message));\n      },\n      onRetry: () => {},\n      onFailure: () => {},\n      onSuccess: () => {}\n    } as const;\n\n    this.config = {\n      ...defaultConfig,\n      ...config\n    } as Required<RetryConfig>;\n\n    this.rateLimiter = rateLimiter;\n  }\n\n  /**\n   * Execute a function with retry logic\n   */\n  async execute<T>(fn: () => Promise<T>): Promise<RetryResult<T>> {\n    const startTime = Date.now();\n    let attempt = 1;\n    let totalDelay = 0;\n    let lastError: any;\n    const delays: number[] = [];\n\n    // Global timeout setup\n    let globalTimeoutId: NodeJS.Timeout | undefined;\n    let globalTimeoutPromise: Promise<never> | undefined;\n\n    if (this.config.globalTimeout) {\n      globalTimeoutPromise = new Promise((_, reject) => {\n        globalTimeoutId = setTimeout(() => {\n          reject(new CREBError(\n            `Global timeout of ${this.config.globalTimeout}ms exceeded`,\n            ErrorCategory.TIMEOUT,\n            ErrorSeverity.HIGH,\n            { globalTimeout: this.config.globalTimeout, attempt }\n          ));\n        }, this.config.globalTimeout);\n      });\n    }\n\n    try {\n      while (attempt <= this.config.maxAttempts) {\n        try {\n          // Check rate limits\n          if (this.rateLimiter) {\n            while (!this.rateLimiter.canMakeRequest()) {\n              const waitTime = this.rateLimiter.getTimeUntilNextRequest();\n              if (waitTime > 0) {\n                await this.delay(waitTime);\n              }\n            }\n            this.rateLimiter.recordRequest();\n          }\n\n          // Execute with timeout if specified\n          let result: T;\n          if (this.config.attemptTimeout) {\n            const timeoutPromise = this.createTimeoutPromise(this.config.attemptTimeout, attempt);\n            const promises = [fn()];\n            if (globalTimeoutPromise) promises.push(globalTimeoutPromise);\n            promises.push(timeoutPromise);\n            \n            result = await Promise.race(promises);\n          } else {\n            const promises = [fn()];\n            if (globalTimeoutPromise) promises.push(globalTimeoutPromise);\n            result = await Promise.race(promises);\n          }\n\n          // Success!\n          const executionTime = Date.now() - startTime;\n          const metrics: RetryMetrics = {\n            totalAttempts: attempt,\n            successfulAttempts: 1,\n            failedAttempts: attempt - 1,\n            averageDelay: delays.length > 0 ? totalDelay / delays.length : 0,\n            totalDelay,\n            executionTime\n          };\n\n          this.config.onSuccess(result, attempt);\n\n          return {\n            result,\n            metrics,\n            succeeded: true\n          };\n\n        } catch (error) {\n          lastError = error;\n\n          // Check if we should retry\n          if (!this.config.shouldRetry(error, attempt) || attempt >= this.config.maxAttempts) {\n            break;\n          }\n\n          // Calculate delay for next attempt\n          const delay = this.calculateDelay(attempt);\n          delays.push(delay);\n          totalDelay += delay;\n\n          this.config.onRetry(error, attempt, delay);\n\n          // Wait before next attempt\n          await this.delay(delay);\n          attempt++;\n        }\n      }\n\n      // All retries exhausted\n      const executionTime = Date.now() - startTime;\n      const metrics: RetryMetrics = {\n        totalAttempts: attempt,\n        successfulAttempts: 0,\n        failedAttempts: attempt,\n        averageDelay: delays.length > 0 ? totalDelay / delays.length : 0,\n        totalDelay,\n        lastError,\n        executionTime\n      };\n\n      this.config.onFailure(lastError, attempt);\n\n      return {\n        result: undefined as any,\n        metrics,\n        succeeded: false,\n        finalError: lastError\n      };\n\n    } finally {\n      if (globalTimeoutId) {\n        clearTimeout(globalTimeoutId);\n      }\n    }\n  }\n\n  /**\n   * Execute a synchronous function with retry logic\n   */\n  executeSync<T>(fn: () => T): RetryResult<T> {\n    const startTime = Date.now();\n    let attempt = 1;\n    let totalDelay = 0;\n    let lastError: any;\n    const delays: number[] = [];\n\n    while (attempt <= this.config.maxAttempts) {\n      try {\n        // Check rate limits (blocking)\n        if (this.rateLimiter) {\n          while (!this.rateLimiter.canMakeRequest()) {\n            const waitTime = this.rateLimiter.getTimeUntilNextRequest();\n            if (waitTime > 0) {\n              // Synchronous delay (not recommended for production)\n              const start = Date.now();\n              while (Date.now() - start < waitTime) {\n                // Busy wait\n              }\n            }\n          }\n          this.rateLimiter.recordRequest();\n        }\n\n        const result = fn();\n\n        // Success!\n        const executionTime = Date.now() - startTime;\n        const metrics: RetryMetrics = {\n          totalAttempts: attempt,\n          successfulAttempts: 1,\n          failedAttempts: attempt - 1,\n          averageDelay: delays.length > 0 ? totalDelay / delays.length : 0,\n          totalDelay,\n          executionTime\n        };\n\n        this.config.onSuccess(result, attempt);\n\n        return {\n          result,\n          metrics,\n          succeeded: true\n        };\n\n      } catch (error) {\n        lastError = error;\n\n        // Check if we should retry\n        if (!this.config.shouldRetry(error, attempt) || attempt >= this.config.maxAttempts) {\n          break;\n        }\n\n        // Calculate delay for next attempt\n        const delay = this.calculateDelay(attempt);\n        delays.push(delay);\n        totalDelay += delay;\n\n        this.config.onRetry(error, attempt, delay);\n\n        // Synchronous delay (not recommended for production)\n        const start = Date.now();\n        while (Date.now() - start < delay) {\n          // Busy wait\n        }\n        \n        attempt++;\n      }\n    }\n\n    // All retries exhausted\n    const executionTime = Date.now() - startTime;\n    const metrics: RetryMetrics = {\n      totalAttempts: attempt,\n      successfulAttempts: 0,\n      failedAttempts: attempt,\n      averageDelay: delays.length > 0 ? totalDelay / delays.length : 0,\n      totalDelay,\n      lastError,\n      executionTime\n    };\n\n    this.config.onFailure(lastError, attempt);\n\n    return {\n      result: undefined as any,\n      metrics,\n      succeeded: false,\n      finalError: lastError\n    };\n  }\n\n  private calculateDelay(attempt: number): number {\n    let delay: number;\n\n    switch (this.config.strategy) {\n      case RetryStrategy.FIXED_DELAY:\n        delay = this.config.initialDelay;\n        break;\n\n      case RetryStrategy.LINEAR_BACKOFF:\n        delay = this.config.initialDelay * attempt;\n        break;\n\n      case RetryStrategy.EXPONENTIAL_BACKOFF:\n        delay = this.config.initialDelay * Math.pow(this.config.backoffMultiplier, attempt - 1);\n        break;\n\n      case RetryStrategy.EXPONENTIAL_BACKOFF_JITTER:\n        const exponentialDelay = this.config.initialDelay * Math.pow(this.config.backoffMultiplier, attempt - 1);\n        const jitter = exponentialDelay * this.config.jitterFactor * Math.random();\n        delay = exponentialDelay + jitter;\n        break;\n\n      default:\n        delay = this.config.initialDelay;\n    }\n\n    // Cap at maximum delay\n    return Math.min(delay, this.config.maxDelay);\n  }\n\n  private async delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  private createTimeoutPromise(timeoutMs: number, attempt: number): Promise<never> {\n    return new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(new CREBError(\n          `Attempt ${attempt} timed out after ${timeoutMs}ms`,\n          ErrorCategory.TIMEOUT,\n          ErrorSeverity.MEDIUM,\n          { attemptTimeout: timeoutMs, attempt }\n        ));\n      }, timeoutMs);\n    });\n  }\n}\n\n/**\n * Predefined retry policies for common scenarios\n */\nexport class RetryPolicies {\n  /**\n   * Conservative retry policy for critical operations\n   */\n  static conservative(): RetryPolicy {\n    return new RetryPolicy({\n      maxAttempts: 2,\n      initialDelay: 2000,\n      maxDelay: 10000,\n      strategy: RetryStrategy.EXPONENTIAL_BACKOFF_JITTER,\n      backoffMultiplier: 2,\n      jitterFactor: 0.1\n    });\n  }\n\n  /**\n   * Aggressive retry policy for non-critical operations\n   */\n  static aggressive(): RetryPolicy {\n    return new RetryPolicy({\n      maxAttempts: 5,\n      initialDelay: 500,\n      maxDelay: 30000,\n      strategy: RetryStrategy.EXPONENTIAL_BACKOFF_JITTER,\n      backoffMultiplier: 2,\n      jitterFactor: 0.2\n    });\n  }\n\n  /**\n   * Quick retry policy for fast operations\n   */\n  static quick(): RetryPolicy {\n    return new RetryPolicy({\n      maxAttempts: 3,\n      initialDelay: 100,\n      maxDelay: 1000,\n      strategy: RetryStrategy.LINEAR_BACKOFF,\n      backoffMultiplier: 1.5,\n      jitterFactor: 0.1\n    });\n  }\n\n  /**\n   * Network-specific retry policy with rate limiting\n   */\n  static network(maxRequestsPerMinute: number = 60): RetryPolicy {\n    const rateLimiter = new RateLimiter(maxRequestsPerMinute, 60000);\n    \n    return new RetryPolicy({\n      maxAttempts: 4,\n      initialDelay: 1000,\n      maxDelay: 20000,\n      strategy: RetryStrategy.EXPONENTIAL_BACKOFF_JITTER,\n      backoffMultiplier: 2,\n      jitterFactor: 0.15,\n      shouldRetry: (error: any, attempt: number) => {\n        // Retry on network errors, timeouts, and 5xx status codes\n        if (error instanceof CREBError) {\n          return error.isRetryable() && attempt < 4;\n        }\n        return ErrorUtils.isTransientError(error) && attempt < 4;\n      }\n    }, rateLimiter);\n  }\n\n  /**\n   * Database-specific retry policy\n   */\n  static database(): RetryPolicy {\n    return new RetryPolicy({\n      maxAttempts: 3,\n      initialDelay: 500,\n      maxDelay: 5000,\n      strategy: RetryStrategy.EXPONENTIAL_BACKOFF,\n      backoffMultiplier: 2,\n      jitterFactor: 0.1,\n      shouldRetry: (error: any, attempt: number) => {\n        // Common database transient errors\n        const message = error?.message?.toLowerCase() || '';\n        const transientPatterns = [\n          'connection',\n          'timeout',\n          'deadlock',\n          'lock timeout',\n          'temporary failure'\n        ];\n        \n        return transientPatterns.some(pattern => message.includes(pattern)) && attempt < 3;\n      }\n    });\n  }\n}\n\n/**\n * Decorator for automatic retry functionality\n */\nexport function WithRetry(policy: RetryPolicy) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      const result = await policy.execute(() => originalMethod.apply(this, args));\n      \n      if (result.succeeded) {\n        return result.result;\n      } else {\n        throw result.finalError;\n      }\n    };\n\n    return descriptor;\n  };\n}\n\n/**\n * Utility function to create a retry policy with default settings\n */\nexport function createRetryPolicy(overrides: Partial<RetryConfig> = {}): RetryPolicy {\n  return new RetryPolicy({\n    maxAttempts: 3,\n    initialDelay: 1000,\n    maxDelay: 10000,\n    strategy: RetryStrategy.EXPONENTIAL_BACKOFF_JITTER,\n    backoffMultiplier: 2,\n    jitterFactor: 0.1,\n    ...overrides\n  });\n}\n","/**\n * Enhanced Error Handling Integration Example\n * Demonstrates how to use circuit breakers, retry policies, and structured errors\n * in real-world scenarios within CREB-JS\n */\n\nimport {\n  CREBError,\n  ErrorCategory,\n  ErrorSeverity,\n  ExternalAPIError,\n  NetworkError,\n  ErrorAggregator,\n  ErrorUtils\n} from './errors/CREBError';\n\nimport {\n  CircuitBreaker,\n  CircuitBreakerManager,\n  circuitBreakerManager,\n  CircuitBreakerState\n} from './resilience/CircuitBreaker';\n\nimport {\n  RetryPolicy,\n  RetryPolicies,\n  RetryStrategy,\n  RateLimiter\n} from './resilience/RetryPolicy';\n\nimport { AdvancedCache } from '../performance/cache/AdvancedCache';\n\n/**\n * Example: Enhanced NIST Integration with Error Handling\n */\nexport class EnhancedNISTIntegration {\n  private circuitBreaker: CircuitBreaker;\n  private retryPolicy: RetryPolicy;\n  private errorAggregator: ErrorAggregator;\n\n  constructor() {\n    // Configure circuit breaker for NIST API\n    this.circuitBreaker = circuitBreakerManager.getBreaker('nist-api', {\n      failureThreshold: 5,\n      failureRate: 30,\n      monitoringWindow: 60000, // 1 minute\n      timeout: 30000, // 30 seconds\n      successThreshold: 3,\n      minimumCalls: 10,\n      onStateChange: (newState: CircuitBreakerState, oldState: CircuitBreakerState) => {\n        console.log(`NIST Circuit Breaker: ${oldState} → ${newState}`);\n      },\n      onCircuitOpen: (error: any) => {\n        console.error('NIST API circuit breaker opened:', error);\n      },\n      onCircuitClose: () => {\n        console.log('NIST API circuit breaker closed - service recovered');\n      }\n    });\n\n    // Configure retry policy with rate limiting\n    this.retryPolicy = RetryPolicies.network(60); // 60 requests per minute\n\n    // Error aggregator for monitoring\n    this.errorAggregator = new ErrorAggregator(500);\n  }\n\n  /**\n   * Get thermodynamic data with full error handling\n   */\n  async getThermodynamicData(compoundName: string): Promise<any> {\n    const operation = async () => {\n      try {\n        // Simulate NIST API call\n        const response = await this.makeNISTRequest(`/thermo/search?name=${encodeURIComponent(compoundName)}`);\n        return response;\n      } catch (error) {\n        // Transform error into appropriate CREB error type\n        if (error instanceof Error && error.message.includes('network')) {\n          throw new NetworkError(\n            'Failed to connect to NIST database',\n            { compoundName, operation: 'getThermodynamicData' },\n            { url: 'https://webbook.nist.gov/cgi/cbook.cgi', method: 'GET' }\n          );\n        } else if (error instanceof Error && error.message.includes('429')) {\n          throw new ExternalAPIError(\n            'NIST API rate limit exceeded',\n            'NIST',\n            { compoundName },\n            { statusCode: 429, rateLimited: true }\n          );\n        } else {\n          throw new ExternalAPIError(\n            'NIST API request failed',\n            'NIST',\n            { compoundName },\n            { statusCode: 500 }\n          );\n        }\n      }\n    };\n\n    try {\n      // Apply circuit breaker and retry policy\n      const result = await this.circuitBreaker.execute(async () => {\n        const retryResult = await this.retryPolicy.execute(operation);\n        if (retryResult.succeeded) {\n          return retryResult.result;\n        } else {\n          throw retryResult.finalError;\n        }\n      });\n\n      return result;\n    } catch (error) {\n      const crebError = ErrorUtils.transformUnknownError(error);\n      this.errorAggregator.addError(crebError);\n      throw crebError;\n    }\n  }\n\n  /**\n   * Simulated NIST API request (would be real HTTP request in production)\n   */\n  private async makeNISTRequest(endpoint: string): Promise<any> {\n    // Simulate various failure scenarios for demonstration\n    const random = Math.random();\n    \n    if (random < 0.1) {\n      throw new Error('network timeout');\n    } else if (random < 0.15) {\n      throw new Error('HTTP 429 rate limit');\n    } else if (random < 0.2) {\n      throw new Error('HTTP 500 server error');\n    }\n\n    // Simulate successful response\n    return {\n      compound: endpoint.split('name=')[1],\n      thermodynamicData: {\n        enthalpy: -393.5,\n        entropy: 213.8,\n        gibbs: -394.4\n      }\n    };\n  }\n\n  /**\n   * Get error statistics and health metrics\n   */\n  getHealthMetrics(): {\n    circuitBreaker: any;\n    errors: any;\n    retryMetrics: any;\n  } {\n    return {\n      circuitBreaker: this.circuitBreaker.getMetrics(),\n      errors: this.errorAggregator.getStatistics(),\n      retryMetrics: {\n        // In a real implementation, you'd track retry metrics\n        totalRetries: 0,\n        successAfterRetry: 0,\n        ultimateFailures: 0\n      }\n    };\n  }\n}\n\n/**\n * Example: Enhanced PubChem Integration with Error Handling\n */\nexport class EnhancedPubChemIntegration {\n  private circuitBreaker: CircuitBreaker;\n  private retryPolicy: RetryPolicy;\n  private rateLimiter: RateLimiter;\n\n  constructor() {\n    // PubChem has stricter rate limits\n    this.rateLimiter = new RateLimiter(5, 1000); // 5 requests per second\n\n    this.circuitBreaker = circuitBreakerManager.getBreaker('pubchem-api', {\n      failureThreshold: 3,\n      failureRate: 25,\n      monitoringWindow: 60000,\n      timeout: 60000, // Longer timeout for PubChem\n      successThreshold: 2,\n      minimumCalls: 5\n    });\n\n    this.retryPolicy = new RetryPolicy({\n      maxAttempts: 4,\n      initialDelay: 2000, // Start with 2 second delay\n      maxDelay: 30000,\n      strategy: RetryStrategy.EXPONENTIAL_BACKOFF_JITTER,\n      backoffMultiplier: 2,\n      jitterFactor: 0.2,\n      shouldRetry: (error: any, attempt: number) => {\n        if (error instanceof ExternalAPIError) {\n          // Always retry rate limits, retry 5xx errors, don't retry 4xx (except 429)\n          if (error.metadata.category === ErrorCategory.RATE_LIMIT) return true;\n          const statusCode = error.metadata.context.statusCode;\n          return statusCode >= 500 || statusCode === 429;\n        }\n        return ErrorUtils.isTransientError(error) && attempt < 4;\n      },\n      onRetry: (error: any, attempt: number, delay: number) => {\n        console.log(`PubChem retry attempt ${attempt} after ${delay}ms: ${error.message}`);\n      }\n    }, this.rateLimiter);\n  }\n\n  /**\n   * Search for compounds with enhanced error handling\n   */\n  async searchCompounds(query: string): Promise<any[]> {\n    const operation = async () => {\n      // Simulate API call\n      return this.makePubChemRequest(`/compound/name/${encodeURIComponent(query)}/JSON`);\n    };\n\n    return this.circuitBreaker.execute(async () => {\n      const result = await this.retryPolicy.execute(operation);\n      if (result.succeeded) {\n        return result.result;\n      } else {\n        throw result.finalError;\n      }\n    });\n  }\n\n  private async makePubChemRequest(endpoint: string): Promise<any> {\n    // Simulate PubChem API behavior\n    const random = Math.random();\n    \n    if (random < 0.05) {\n      throw new ExternalAPIError(\n        'PubChem service temporarily unavailable',\n        'PubChem',\n        { endpoint },\n        { statusCode: 503 }\n      );\n    } else if (random < 0.1) {\n      throw new ExternalAPIError(\n        'PubChem rate limit exceeded',\n        'PubChem',\n        { endpoint },\n        { statusCode: 429, rateLimited: true }\n      );\n    }\n\n    // Simulate successful response\n    return [\n      {\n        CID: 12345,\n        name: endpoint.split('/')[3],\n        molecularFormula: 'C6H12O6',\n        molecularWeight: 180.16\n      }\n    ];\n  }\n}\n\n/**\n * Example: Enhanced SQLite Storage with Error Handling\n */\nexport class EnhancedSQLiteStorage {\n  private retryPolicy: RetryPolicy;\n  private errorAggregator: ErrorAggregator;\n\n  constructor() {\n    // Database operations use specialized retry policy\n    this.retryPolicy = RetryPolicies.database();\n    this.errorAggregator = new ErrorAggregator(100);\n  }\n\n  /**\n   * Store data with retry logic for transient database failures\n   */\n  async storeData(table: string, data: any): Promise<void> {\n    const operation = async () => {\n      // Simulate database operation\n      await this.executeDatabaseOperation('INSERT', table, data);\n    };\n\n    try {\n      const result = await this.retryPolicy.execute(operation);\n      if (!result.succeeded) {\n        throw result.finalError;\n      }\n    } catch (error) {\n      const crebError = ErrorUtils.transformUnknownError(error);\n      this.errorAggregator.addError(crebError);\n      throw crebError;\n    }\n  }\n\n  private async executeDatabaseOperation(operation: string, table: string, data: any): Promise<void> {\n    // Simulate various database failure scenarios\n    const random = Math.random();\n    \n    if (random < 0.02) {\n      throw new Error('database connection timeout');\n    } else if (random < 0.03) {\n      throw new Error('deadlock detected');\n    } else if (random < 0.04) {\n      throw new Error('temporary failure in writing to disk');\n    }\n\n    // Simulate successful operation\n    console.log(`Database ${operation} on ${table} completed successfully`);\n  }\n}\n\n/**\n * Example: System Health Monitor using Error Handling Components\n */\nexport class SystemHealthMonitor {\n  private errorAggregator: ErrorAggregator;\n  private circuitBreakerManager: CircuitBreakerManager;\n\n  constructor() {\n    this.errorAggregator = new ErrorAggregator(1000);\n    this.circuitBreakerManager = circuitBreakerManager;\n  }\n\n  /**\n   * Monitor system health and provide detailed status\n   */\n  getSystemHealth(): {\n    overall: 'healthy' | 'degraded' | 'critical';\n    services: any;\n    errors: any;\n    recommendations: string[];\n  } {\n    const circuitBreakerHealth = this.circuitBreakerManager.getHealthStatus();\n    const errorStats = this.errorAggregator.getStatistics();\n    \n    // Determine overall health\n    let overall: 'healthy' | 'degraded' | 'critical' = 'healthy';\n    if (circuitBreakerHealth.failed.length > 0) {\n      overall = 'critical';\n    } else if (circuitBreakerHealth.degraded.length > 0 || errorStats.bySeverity.HIGH > 5) {\n      overall = 'degraded';\n    }\n\n    // Generate recommendations\n    const recommendations: string[] = [];\n    if (circuitBreakerHealth.failed.length > 0) {\n      recommendations.push(`${circuitBreakerHealth.failed.length} service(s) are failing: ${circuitBreakerHealth.failed.join(', ')}`);\n    }\n    if (errorStats.bySeverity.CRITICAL > 0) {\n      recommendations.push(`${errorStats.bySeverity.CRITICAL} critical error(s) detected - immediate attention required`);\n    }\n    if (errorStats.retryableCount > errorStats.total * 0.7) {\n      recommendations.push('High percentage of retryable errors suggests network or external service issues');\n    }\n\n    return {\n      overall,\n      services: {\n        total: circuitBreakerHealth.total,\n        healthy: circuitBreakerHealth.healthy.length,\n        degraded: circuitBreakerHealth.degraded.length,\n        failed: circuitBreakerHealth.failed.length,\n        details: this.circuitBreakerManager.getAllMetrics()\n      },\n      errors: errorStats,\n      recommendations\n    };\n  }\n\n  /**\n   * Add error to monitoring\n   */\n  reportError(error: CREBError): void {\n    this.errorAggregator.addError(error);\n  }\n\n  /**\n   * Clear error history\n   */\n  clearErrorHistory(): void {\n    this.errorAggregator.clear();\n  }\n}\n\n/**\n * Example: Graceful Degradation Service\n */\nexport class GracefulDegradationService {\n  private nistIntegration: EnhancedNISTIntegration;\n  private pubchemIntegration: EnhancedPubChemIntegration;\n  private localCache = new AdvancedCache<any>({\n    maxSize: 500,\n    defaultTtl: 1800000, // 30 minutes\n    enableMetrics: true\n  });\n\n  constructor() {\n    this.nistIntegration = new EnhancedNISTIntegration();\n    this.pubchemIntegration = new EnhancedPubChemIntegration();\n  }\n\n  /**\n   * Get thermodynamic data with graceful degradation\n   */\n  async getThermodynamicDataWithFallback(compoundName: string): Promise<{\n    data: any;\n    source: 'nist' | 'pubchem' | 'cache' | 'estimated';\n    confidence: number;\n  }> {\n    // Try cache first\n    const cachedResult = await this.localCache.get(compoundName);\n    if (cachedResult.hit && cachedResult.value) {\n      return {\n        data: cachedResult.value,\n        source: 'cache',\n        confidence: 0.9\n      };\n    }\n\n    // Try NIST (primary source)\n    try {\n      const nistData = await this.nistIntegration.getThermodynamicData(compoundName);\n      await this.localCache.set(compoundName, nistData);\n      return {\n        data: nistData,\n        source: 'nist',\n        confidence: 1.0\n      };\n    } catch (error) {\n      console.warn(`NIST failed for ${compoundName}:`, error instanceof CREBError ? error.getDescription() : error);\n    }\n\n    // Try PubChem (secondary source)\n    try {\n      const pubchemData = await this.pubchemIntegration.searchCompounds(compoundName);\n      const estimatedThermoData = this.estimateThermodynamicData(pubchemData[0]);\n      await this.localCache.set(compoundName, estimatedThermoData);\n      return {\n        data: estimatedThermoData,\n        source: 'pubchem',\n        confidence: 0.7\n      };\n    } catch (error) {\n      console.warn(`PubChem failed for ${compoundName}:`, error instanceof CREBError ? error.getDescription() : error);\n    }\n\n    // Fallback to estimation\n    const estimatedData = this.estimateThermodynamicData({ name: compoundName });\n    return {\n      data: estimatedData,\n      source: 'estimated',\n      confidence: 0.3\n    };\n  }\n\n  private estimateThermodynamicData(compoundInfo: any): any {\n    // Simple estimation logic (would be more sophisticated in real implementation)\n    return {\n      compound: compoundInfo.name,\n      thermodynamicData: {\n        enthalpy: -200, // Estimated values\n        entropy: 150,\n        gibbs: -180\n      },\n      note: 'Estimated values - use with caution'\n    };\n  }\n}\n\n// Example usage and testing\nexport async function demonstrateEnhancedErrorHandling(): Promise<void> {\n  console.log('=== Enhanced Error Handling Demo ===\\n');\n\n  // Create service instances\n  const nistService = new EnhancedNISTIntegration();\n  const healthMonitor = new SystemHealthMonitor();\n  const degradationService = new GracefulDegradationService();\n\n  // Test successful operation\n  console.log('1. Testing successful operation:');\n  try {\n    const data = await nistService.getThermodynamicData('water');\n    console.log('✓ Successfully retrieved data:', data);\n  } catch (error) {\n    console.log('✗ Operation failed:', error instanceof CREBError ? error.getDescription() : error);\n  }\n\n  // Test multiple operations to trigger various error scenarios\n  console.log('\\n2. Testing multiple operations (some may fail):');\n  const compounds = ['methane', 'ethane', 'propane', 'butane', 'pentane'];\n  \n  for (const compound of compounds) {\n    try {\n      const result = await degradationService.getThermodynamicDataWithFallback(compound);\n      console.log(`✓ ${compound}: Got data from ${result.source} (confidence: ${result.confidence})`);\n    } catch (error) {\n      console.log(`✗ ${compound}: Failed completely:`, error instanceof CREBError ? error.getDescription() : error);\n      if (error instanceof CREBError) {\n        healthMonitor.reportError(error);\n      }\n    }\n  }\n\n  // Display system health\n  console.log('\\n3. System Health Status:');\n  const health = healthMonitor.getSystemHealth();\n  console.log(`Overall Status: ${health.overall.toUpperCase()}`);\n  console.log(`Services: ${health.services.healthy}/${health.services.total} healthy`);\n  console.log(`Recent Errors: ${health.errors.total} (${health.errors.retryableCount} retryable)`);\n  \n  if (health.recommendations.length > 0) {\n    console.log('Recommendations:');\n    health.recommendations.forEach(rec => console.log(`  • ${rec}`));\n  }\n\n  // Display detailed metrics\n  console.log('\\n4. Detailed Service Metrics:');\n  const nistMetrics = nistService.getHealthMetrics();\n  console.log('NIST Circuit Breaker:', nistMetrics.circuitBreaker);\n  console.log('Error Statistics:', nistMetrics.errors);\n}\n","/**\n * Configuration Types for CREB-JS\n * \n * Defines all configuration interfaces and types used throughout the application.\n * This file serves as the single source of truth for configuration structure.\n */\n\n/**\n * Cache configuration options\n */\nexport interface CacheConfig {\n  /** Maximum number of items in cache */\n  maxSize: number;\n  /** Time to live in milliseconds */\n  ttl: number;\n  /** Cache eviction strategy */\n  strategy: 'lru' | 'lfu' | 'fifo';\n}\n\n/**\n * Performance configuration options\n */\nexport interface PerformanceConfig {\n  /** Enable WebAssembly acceleration */\n  enableWasm: boolean;\n  /** Number of worker threads to use */\n  workerThreads: number;\n  /** Batch size for bulk operations */\n  batchSize: number;\n}\n\n/**\n * Data provider configuration\n */\nexport interface DataConfig {\n  /** List of data providers to use */\n  providers: string[];\n  /** Sync interval in milliseconds */\n  syncInterval: number;\n  /** Enable offline mode */\n  offlineMode: boolean;\n}\n\n/**\n * Logging configuration\n */\nexport interface LoggingConfig {\n  /** Log level */\n  level: 'debug' | 'info' | 'warn' | 'error';\n  /** Log format */\n  format: 'json' | 'text';\n  /** Log destinations */\n  destinations: string[];\n}\n\n/**\n * Main CREB configuration interface\n */\nexport interface CREBConfig {\n  cache: CacheConfig;\n  performance: PerformanceConfig;\n  data: DataConfig;\n  logging: LoggingConfig;\n}\n\n/**\n * Partial configuration for updates\n */\nexport type PartialCREBConfig = {\n  [K in keyof CREBConfig]?: Partial<CREBConfig[K]>;\n};\n\n/**\n * Configuration validation result\n */\nexport interface ConfigValidationResult {\n  isValid: boolean;\n  errors: ConfigValidationError[];\n  warnings: ConfigValidationWarning[];\n}\n\n/**\n * Configuration validation error\n */\nexport interface ConfigValidationError {\n  path: string;\n  message: string;\n  value: unknown;\n  expectedType?: string;\n}\n\n/**\n * Configuration validation warning\n */\nexport interface ConfigValidationWarning {\n  path: string;\n  message: string;\n  value: unknown;\n  suggestion?: string;\n}\n\n/**\n * Configuration change event\n */\nexport interface ConfigChangeEvent {\n  path: string;\n  oldValue: unknown;\n  newValue: unknown;\n  timestamp: Date;\n}\n\n/**\n * Configuration environment variables mapping\n */\nexport interface ConfigEnvironmentMapping {\n  [configPath: string]: string;\n}\n\n/**\n * Configuration source information\n */\nexport interface ConfigSource {\n  type: 'default' | 'file' | 'environment' | 'runtime';\n  priority: number;\n  description: string;\n}\n\n/**\n * Configuration metadata\n */\nexport interface ConfigMetadata {\n  version: string;\n  lastModified: Date;\n  source: ConfigSource;\n  checksum: string;\n}\n\n/**\n * Hot-reload configuration options\n */\nexport interface HotReloadConfig {\n  enabled: boolean;\n  watchFiles: string[];\n  debounceMs: number;\n  excludePaths: string[];\n}\n\n/**\n * Type guard for CREBConfig\n */\nexport function isCREBConfig(obj: unknown): obj is CREBConfig {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    'cache' in obj &&\n    'performance' in obj &&\n    'data' in obj &&\n    'logging' in obj\n  );\n}\n\n/**\n * Type for configuration path strings\n */\nexport type ConfigPath = \n  | 'cache.maxSize'\n  | 'cache.ttl' \n  | 'cache.strategy'\n  | 'performance.enableWasm'\n  | 'performance.workerThreads'\n  | 'performance.batchSize'\n  | 'data.providers'\n  | 'data.syncInterval'\n  | 'data.offlineMode'\n  | 'logging.level'\n  | 'logging.format'\n  | 'logging.destinations';\n\n/**\n * Type for getting value type from config path\n */\nexport type ConfigValueType<T extends ConfigPath> = \n  T extends 'cache.maxSize' ? number :\n  T extends 'cache.ttl' ? number :\n  T extends 'cache.strategy' ? 'lru' | 'lfu' | 'fifo' :\n  T extends 'performance.enableWasm' ? boolean :\n  T extends 'performance.workerThreads' ? number :\n  T extends 'performance.batchSize' ? number :\n  T extends 'data.providers' ? string[] :\n  T extends 'data.syncInterval' ? number :\n  T extends 'data.offlineMode' ? boolean :\n  T extends 'logging.level' ? 'debug' | 'info' | 'warn' | 'error' :\n  T extends 'logging.format' ? 'json' | 'text' :\n  T extends 'logging.destinations' ? string[] :\n  never;\n","/**\n * Advanced Cache Integration Example for CREB-JS\n * \n * Demonstrates how to integrate the advanced caching system with existing\n * CREB-JS components and replace the legacy PerformanceCache.\n */\n\nimport { AdvancedCache, CacheFactory } from './AdvancedCache';\nimport { CacheEventType } from './types';\n\n/**\n * Enhanced ThermodynamicsCalculator with advanced caching\n */\nexport class CachedThermodynamicsCalculator {\n  private cache = CacheFactory.create('performance-optimized');\n  \n  constructor() {\n    // Set up cache monitoring\n    this.setupCacheMonitoring();\n  }\n\n  /**\n   * Calculate thermodynamic properties with caching\n   */\n  async calculateThermodynamics(equation: string, temperature: number, pressure: number): Promise<any> {\n    const cacheKey = `thermo_${equation}_${temperature}_${pressure}`;\n    \n    // Try cache first\n    const cached = await this.cache.get(cacheKey);\n    if (cached.hit) {\n      return cached.value;\n    }\n    \n    // Perform calculation (mock implementation)\n    const result = await this.performCalculation(equation, temperature, pressure);\n    \n    // Cache the result with appropriate TTL\n    await this.cache.set(cacheKey, result, this.getTTLForCalculation(result));\n    \n    return result;\n  }\n\n  /**\n   * Get cache performance statistics\n   */\n  getCacheStats() {\n    return this.cache.getStats();\n  }\n\n  /**\n   * Perform health check\n   */\n  async healthCheck() {\n    return this.cache.healthCheck();\n  }\n\n  /**\n   * Shutdown and cleanup\n   */\n  shutdown() {\n    this.cache.shutdown();\n  }\n\n  private async performCalculation(equation: string, temperature: number, pressure: number): Promise<any> {\n    // Simulate calculation time\n    await new Promise(resolve => setTimeout(resolve, 50));\n    \n    return {\n      equation,\n      temperature,\n      pressure,\n      enthalpy: Math.random() * 1000,\n      entropy: Math.random() * 500,\n      gibbs: Math.random() * 800,\n      calculatedAt: Date.now()\n    };\n  }\n\n  private getTTLForCalculation(result: any): number {\n    // More complex calculations get longer TTL\n    if (result.equation.length > 50) {\n      return 3600000; // 1 hour\n    } else if (result.equation.length > 20) {\n      return 1800000; // 30 minutes\n    } else {\n      return 600000;  // 10 minutes\n    }\n  }\n\n  private setupCacheMonitoring() {\n    // Monitor cache performance\n    this.cache.addEventListener('memory-pressure', (event) => {\n      console.warn('Cache memory pressure detected:', event.metadata);\n    });\n\n    this.cache.addEventListener('stats-update', () => {\n      const stats = this.cache.getStats();\n      if (stats.hitRate < 50) {\n        console.warn('Low cache hit rate detected:', stats.hitRate);\n      }\n    });\n\n    // Log eviction events for debugging\n    this.cache.addEventListener('eviction', (event) => {\n      console.debug('Cache eviction:', {\n        key: event.key,\n        strategy: event.metadata?.strategy,\n        reason: event.metadata?.reason\n      });\n    });\n  }\n}\n\n/**\n * Enhanced Chemical Database Manager with advanced caching\n */\nexport class CachedChemicalDatabase {\n  private compoundCache = CacheFactory.create('large');\n  private queryCache = CacheFactory.create('medium');\n  \n  constructor() {\n    this.setupCacheOptimization();\n  }\n\n  /**\n   * Get compound data with intelligent caching\n   */\n  async getCompound(formula: string): Promise<any> {\n    const cached = await this.compoundCache.get(formula);\n    if (cached.hit) {\n      return cached.value;\n    }\n    \n    // Fetch from database\n    const compound = await this.fetchCompoundFromDB(formula);\n    \n    if (compound) {\n      // Cache with TTL based on data freshness requirements\n      const ttl = this.isCommonCompound(formula) ? 86400000 : 3600000; // 24h vs 1h\n      await this.compoundCache.set(formula, compound, ttl);\n    }\n    \n    return compound;\n  }\n\n  /**\n   * Search compounds with query result caching\n   */\n  async searchCompounds(query: string, filters: any = {}): Promise<any[]> {\n    const cacheKey = `search_${query}_${JSON.stringify(filters)}`;\n    \n    const cached = await this.queryCache.get(cacheKey);\n    if (cached.hit) {\n      return cached.value;\n    }\n    \n    const results = await this.performSearch(query, filters);\n    \n    // Cache search results for shorter time (more dynamic)\n    await this.queryCache.set(cacheKey, results, 300000); // 5 minutes\n    \n    return results;\n  }\n\n  /**\n   * Get combined cache statistics\n   */\n  getCacheReport(): string {\n    const compoundStats = this.compoundCache.getStats();\n    const queryStats = this.queryCache.getStats();\n    \n    return `\nCache Performance Report:\n\nCompound Cache:\n- Hit Rate: ${compoundStats.hitRate.toFixed(2)}%\n- Entries: ${compoundStats.size}\n- Memory: ${(compoundStats.memoryUsage / 1024 / 1024).toFixed(2)} MB\n\nQuery Cache:\n- Hit Rate: ${queryStats.hitRate.toFixed(2)}%\n- Entries: ${queryStats.size}\n- Memory: ${(queryStats.memoryUsage / 1024 / 1024).toFixed(2)} MB\n\nOverall Performance:\n- Combined Hit Rate: ${((compoundStats.hits + queryStats.hits) / (compoundStats.hits + compoundStats.misses + queryStats.hits + queryStats.misses) * 100).toFixed(2)}%\n- Total Memory: ${((compoundStats.memoryUsage + queryStats.memoryUsage) / 1024 / 1024).toFixed(2)} MB\n    `.trim();\n  }\n\n  /**\n   * Optimize cache performance based on usage patterns\n   */\n  async optimizeCaches(): Promise<void> {\n    const compoundMetrics = this.compoundCache.getMetrics();\n    const queryMetrics = this.queryCache.getMetrics();\n    \n    // If compound cache hit rate is low, increase size\n    if (compoundMetrics.current.hitRate < 60) {\n      console.log('Compound cache performance is low, consider increasing size');\n    }\n    \n    // If memory utilization is high, force cleanup\n    if (compoundMetrics.current.memoryUtilization > 85) {\n      await this.compoundCache.cleanup();\n    }\n    \n    if (queryMetrics.current.memoryUtilization > 85) {\n      await this.queryCache.cleanup();\n    }\n  }\n\n  shutdown() {\n    this.compoundCache.shutdown();\n    this.queryCache.shutdown();\n  }\n\n  private async fetchCompoundFromDB(formula: string): Promise<any> {\n    // Simulate database fetch\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    return {\n      formula,\n      name: `Compound ${formula}`,\n      molarMass: Math.random() * 500,\n      properties: {\n        meltingPoint: Math.random() * 1000,\n        boilingPoint: Math.random() * 2000,\n        density: Math.random() * 5\n      },\n      lastUpdated: Date.now()\n    };\n  }\n\n  private async performSearch(query: string, filters: any): Promise<any[]> {\n    // Simulate search operation\n    await new Promise(resolve => setTimeout(resolve, 200));\n    \n    const resultCount = Math.floor(Math.random() * 20) + 1;\n    const results = [];\n    \n    for (let i = 0; i < resultCount; i++) {\n      results.push({\n        formula: `${query}${i}`,\n        name: `Result ${i} for ${query}`,\n        relevance: Math.random()\n      });\n    }\n    \n    return results.sort((a, b) => b.relevance - a.relevance);\n  }\n\n  private isCommonCompound(formula: string): boolean {\n    // Common compounds that change rarely\n    const common = ['H2O', 'CO2', 'NaCl', 'H2SO4', 'HCl', 'NH3', 'CH4', 'C2H5OH'];\n    return common.includes(formula);\n  }\n\n  private setupCacheOptimization() {\n    // Auto-optimization every 10 minutes\n    setInterval(() => {\n      this.optimizeCaches().catch(error => {\n        console.warn('Cache optimization error:', error);\n      });\n    }, 600000);\n  }\n}\n\n/**\n * Cache-aware equation balancer\n */\nexport class CachedEquationBalancer {\n  private cache = CacheFactory.create({\n    maxSize: 2000,\n    defaultTtl: 7200000, // 2 hours (balanced equations don't change)\n    evictionStrategy: 'lfu', // Frequent equations are more valuable\n    enableMetrics: true\n  });\n\n  async balanceEquation(equation: string): Promise<any> {\n    // Normalize equation for consistent caching\n    const normalizedEquation = this.normalizeEquation(equation);\n    \n    const cached = await this.cache.get(normalizedEquation);\n    if (cached.hit) {\n      return { ...cached.value, fromCache: true };\n    }\n    \n    // Perform balancing\n    const result = await this.performBalancing(normalizedEquation);\n    \n    // Cache successful results\n    if (result.success) {\n      await this.cache.set(normalizedEquation, result);\n    }\n    \n    return { ...result, fromCache: false };\n  }\n\n  /**\n   * Get equations that would benefit from precomputation\n   */\n  getFrequentEquations(minAccess: number = 5): Array<{ equation: string; accessCount: number }> {\n    const frequent = [];\n    \n    // This would require access to cache internals or additional tracking\n    // For now, return mock data\n    return [\n      { equation: 'H2 + O2 = H2O', accessCount: 15 },\n      { equation: 'CH4 + O2 = CO2 + H2O', accessCount: 12 },\n      { equation: 'C2H5OH + O2 = CO2 + H2O', accessCount: 8 }\n    ];\n  }\n\n  async precomputeFrequentEquations(): Promise<void> {\n    const frequent = this.getFrequentEquations();\n    \n    for (const { equation } of frequent) {\n      const cached = await this.cache.get(equation);\n      if (!cached.hit) {\n        await this.balanceEquation(equation);\n      }\n    }\n  }\n\n  getPerformanceReport(): string {\n    const stats = this.cache.getStats();\n    const metrics = this.cache.getMetrics();\n    \n    return `\nEquation Balancer Cache Report:\n\nPerformance:\n- Hit Rate: ${stats.hitRate.toFixed(2)}%\n- Average Response Time: ${stats.averageAccessTime.toFixed(2)}ms\n- Cached Equations: ${stats.size}\n\nTrends:\n- Hit Rate Trend: ${metrics.trends.hitRateTrend}\n- Memory Trend: ${metrics.trends.memoryTrend}\n- Latency Trend: ${metrics.trends.latencyTrend}\n\nRecommendations:\n${this.generateRecommendations(stats, metrics)}\n    `.trim();\n  }\n\n  shutdown() {\n    this.cache.shutdown();\n  }\n\n  private normalizeEquation(equation: string): string {\n    // Remove extra spaces and standardize formatting\n    return equation\n      .replace(/\\s+/g, ' ')\n      .replace(/\\s*=\\s*/g, ' = ')\n      .replace(/\\s*\\+\\s*/g, ' + ')\n      .trim();\n  }\n\n  private async performBalancing(equation: string): Promise<any> {\n    // Simulate equation balancing\n    await new Promise(resolve => setTimeout(resolve, 75));\n    \n    return {\n      equation,\n      balanced: equation, // Would be actual balanced equation\n      coefficients: [1, 1, 1], // Mock coefficients\n      success: true,\n      method: 'matrix',\n      calculatedAt: Date.now()\n    };\n  }\n\n  private generateRecommendations(stats: any, metrics: any): string {\n    const recommendations = [];\n    \n    if (stats.hitRate < 70) {\n      recommendations.push('- Consider increasing cache size for better hit rate');\n    }\n    \n    if (metrics.trends.latencyTrend === 'degrading') {\n      recommendations.push('- Monitor for performance bottlenecks');\n    }\n    \n    if (stats.memoryUtilization > 80) {\n      recommendations.push('- Consider memory cleanup or size optimization');\n    }\n    \n    if (recommendations.length === 0) {\n      recommendations.push('- Cache performance is optimal');\n    }\n    \n    return recommendations.join('\\n');\n  }\n}\n\n/**\n * Multi-level cache for hierarchical data\n */\nexport class MultiLevelCache {\n  private l1Cache = CacheFactory.create('small');     // Fast, small cache\n  private l2Cache = CacheFactory.create('medium');    // Medium cache\n  private l3Cache = CacheFactory.create('large');     // Large, persistent cache\n  \n  async get(key: string): Promise<any> {\n    // Try L1 first (fastest)\n    let result = await this.l1Cache.get(key);\n    if (result.hit) {\n      return { value: result.value, level: 'L1', latency: result.latency };\n    }\n    \n    // Try L2\n    result = await this.l2Cache.get(key);\n    if (result.hit) {\n      // Promote to L1\n      await this.l1Cache.set(key, result.value);\n      return { value: result.value, level: 'L2', latency: result.latency };\n    }\n    \n    // Try L3\n    result = await this.l3Cache.get(key);\n    if (result.hit) {\n      // Promote to L2 (and potentially L1)\n      await this.l2Cache.set(key, result.value);\n      return { value: result.value, level: 'L3', latency: result.latency };\n    }\n    \n    return { value: undefined, level: 'MISS', latency: 0 };\n  }\n\n  async set(key: string, value: any, level: 'L1' | 'L2' | 'L3' = 'L1'): Promise<void> {\n    switch (level) {\n      case 'L1':\n        await this.l1Cache.set(key, value);\n        break;\n      case 'L2':\n        await this.l2Cache.set(key, value);\n        break;\n      case 'L3':\n        await this.l3Cache.set(key, value);\n        break;\n    }\n  }\n\n  getAggregatedStats() {\n    const l1Stats = this.l1Cache.getStats();\n    const l2Stats = this.l2Cache.getStats();\n    const l3Stats = this.l3Cache.getStats();\n    \n    return {\n      l1: l1Stats,\n      l2: l2Stats,\n      l3: l3Stats,\n      combined: {\n        totalHits: l1Stats.hits + l2Stats.hits + l3Stats.hits,\n        totalMisses: l1Stats.misses + l2Stats.misses + l3Stats.misses,\n        totalSize: l1Stats.size + l2Stats.size + l3Stats.size,\n        totalMemory: l1Stats.memoryUsage + l2Stats.memoryUsage + l3Stats.memoryUsage\n      }\n    };\n  }\n\n  shutdown() {\n    this.l1Cache.shutdown();\n    this.l2Cache.shutdown();\n    this.l3Cache.shutdown();\n  }\n}\n\n/**\n * Example usage and migration guide\n */\nexport function demonstrateAdvancedCaching() {\n  console.log('🚀 Advanced Caching System Demo\\n');\n  \n  // Example 1: Replace legacy PerformanceCache\n  console.log('1. Creating optimized caches for different use cases:');\n  \n  const equationCache = CacheFactory.create('performance-optimized');\n  const thermodynamicsCache = CacheFactory.create('memory-optimized');\n  const compoundCache = CacheFactory.create('large');\n  \n  console.log('✅ Created specialized caches\\n');\n  \n  // Example 2: Monitor cache performance\n  console.log('2. Setting up cache monitoring:');\n  \n  equationCache.addEventListener('stats-update', () => {\n    const stats = equationCache.getStats();\n    console.log(`Equation cache hit rate: ${stats.hitRate.toFixed(2)}%`);\n  });\n  \n  console.log('✅ Monitoring configured\\n');\n  \n  // Example 3: Use with existing CREB components\n  console.log('3. Integration examples:');\n  \n  const cachedCalculator = new CachedThermodynamicsCalculator();\n  const cachedDatabase = new CachedChemicalDatabase();\n  const cachedBalancer = new CachedEquationBalancer();\n  \n  console.log('✅ Integrated with CREB components\\n');\n  \n  console.log('4. Performance benefits:');\n  console.log('- TTL-based expiration prevents stale data');\n  console.log('- Multiple eviction strategies optimize for different access patterns');\n  console.log('- Comprehensive metrics enable performance monitoring');\n  console.log('- Thread-safe operations support concurrent access');\n  console.log('- Memory management prevents OOM errors');\n  console.log('- Event system enables reactive optimization\\n');\n  \n  // Cleanup\n  setTimeout(() => {\n    equationCache.shutdown();\n    thermodynamicsCache.shutdown();\n    compoundCache.shutdown();\n    cachedCalculator.shutdown();\n    cachedDatabase.shutdown();\n    cachedBalancer.shutdown();\n    console.log('✅ Demo completed, caches shut down');\n  }, 1000);\n}\n\n// Export for external use\nexport { AdvancedCache, CacheFactory } from './AdvancedCache';\nexport * from './types';\nexport * from './EvictionPolicies';\nexport * from './CacheMetrics';\n","/**\n * @fileoverview Type definitions for CREB Worker Thread System\n * @version 1.7.0\n * @author CREB Development Team\n * \n * This module provides comprehensive type definitions for the worker thread system,\n * enabling efficient offloading of CPU-intensive chemistry calculations.\n */\n\nimport { Worker } from 'worker_threads';\n\n// ========================================\n// Core Types and Enums\n// ========================================\n\n/**\n * Priority levels for task queue management\n */\nexport enum TaskPriority {\n  LOW = 0,\n  NORMAL = 1,\n  HIGH = 2,\n  CRITICAL = 3\n}\n\n/**\n * Task status tracking\n */\nexport enum TaskStatus {\n  PENDING = 'pending',\n  QUEUED = 'queued',\n  RUNNING = 'running',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n  CANCELLED = 'cancelled',\n  TIMEOUT = 'timeout'\n}\n\n/**\n * Worker status tracking\n */\nexport enum WorkerStatus {\n  IDLE = 'idle',\n  BUSY = 'busy',\n  ERROR = 'error',\n  TERMINATED = 'terminated',\n  STARTING = 'starting'\n}\n\n/**\n * Chemistry calculation types\n */\nexport enum CalculationType {\n  EQUATION_BALANCING = 'equation_balancing',\n  THERMODYNAMICS = 'thermodynamics',\n  STOICHIOMETRY = 'stoichiometry',\n  BATCH_ANALYSIS = 'batch_analysis',\n  MATRIX_SOLVING = 'matrix_solving',\n  COMPOUND_ANALYSIS = 'compound_analysis'\n}\n\n// ========================================\n// Task Definitions\n// ========================================\n\n/**\n * Base task interface for all worker tasks\n */\nexport interface WorkerTask<TData = any, TResult = any> {\n  readonly id: string;\n  readonly type: CalculationType;\n  readonly data: TData;\n  readonly priority: TaskPriority;\n  readonly createdAt: Date;\n  readonly timeout?: number; // milliseconds\n  readonly retryAttempts?: number;\n  readonly metadata?: Record<string, any>;\n}\n\n/**\n * Task execution context and progress tracking\n */\nexport interface TaskExecution<TResult = any> {\n  readonly taskId: string;\n  readonly workerId: string;\n  readonly startedAt: Date;\n  completedAt?: Date;\n  status: TaskStatus;\n  result?: TResult;\n  error?: WorkerError;\n  progress?: number; // 0-100\n  memoryUsage?: number; // bytes\n  cpuTime?: number; // milliseconds\n}\n\n/**\n * Task result wrapper\n */\nexport interface TaskResult<TResult = any> {\n  readonly taskId: string;\n  readonly success: boolean;\n  readonly result?: TResult;\n  readonly error?: WorkerError;\n  readonly executionTime: number;\n  readonly memoryUsage: number;\n  readonly metadata?: Record<string, any>;\n}\n\n// ========================================\n// Chemistry-Specific Task Types\n// ========================================\n\n/**\n * Equation balancing task data\n */\nexport interface EquationBalancingTask {\n  equation: string;\n  options?: {\n    method?: 'gauss' | 'algebraic' | 'matrix';\n    maxIterations?: number;\n    tolerance?: number;\n  };\n}\n\n/**\n * Thermodynamics calculation task data\n */\nexport interface ThermodynamicsTask {\n  compounds: Array<{\n    formula: string;\n    amount: number;\n    state?: 'solid' | 'liquid' | 'gas';\n  }>;\n  conditions: {\n    temperature?: number; // Kelvin\n    pressure?: number; // atm\n    volume?: number; // L\n  };\n  calculations: string[]; // enthalpy, entropy, gibbs, etc.\n}\n\n/**\n * Batch analysis task data\n */\nexport interface BatchAnalysisTask {\n  compounds: string[]; // chemical formulas\n  properties: string[]; // molecular weight, density, etc.\n  options?: {\n    includeIsomers?: boolean;\n    includeSpectroscopy?: boolean;\n    dataProvider?: string;\n  };\n}\n\n/**\n * Matrix solving task data\n */\nexport interface MatrixSolvingTask {\n  matrix: number[][];\n  vector?: number[];\n  method?: 'gaussian' | 'lu' | 'qr' | 'svd';\n  options?: {\n    tolerance?: number;\n    maxIterations?: number;\n    pivoting?: boolean;\n  };\n}\n\n// ========================================\n// Worker Definitions\n// ========================================\n\n/**\n * Worker instance configuration\n */\nexport interface WorkerConfig {\n  readonly id: string;\n  readonly scriptPath: string;\n  readonly maxMemory: number; // bytes\n  readonly maxCpuTime: number; // milliseconds\n  readonly idleTimeout: number; // milliseconds\n  readonly env?: Record<string, string>;\n  readonly execArgv?: string[];\n}\n\n/**\n * Worker instance state\n */\nexport interface WorkerInstance {\n  readonly id: string;\n  readonly config: WorkerConfig;\n  readonly worker: Worker;\n  status: WorkerStatus;\n  currentTask?: string; // task ID\n  createdAt: Date;\n  lastUsed: Date;\n  tasksCompleted: number;\n  totalExecutionTime: number;\n  currentMemoryUsage: number;\n  peakMemoryUsage: number;\n  errorCount: number;\n  lastError?: WorkerError;\n}\n\n/**\n * Worker pool configuration\n */\nexport interface WorkerPoolConfig {\n  readonly minWorkers: number;\n  readonly maxWorkers: number;\n  readonly idleTimeout: number; // milliseconds\n  readonly taskTimeout: number; // milliseconds\n  readonly maxRetries: number;\n  readonly memoryLimit: number; // bytes per worker\n  readonly cpuTimeLimit: number; // milliseconds per task\n  readonly loadBalancing: 'round-robin' | 'least-busy' | 'random';\n  readonly autoScale: boolean;\n  readonly scalingThreshold: number; // queue length threshold\n}\n\n// ========================================\n// Queue Definitions\n// ========================================\n\n/**\n * Task queue configuration\n */\nexport interface TaskQueueConfig {\n  readonly maxSize: number;\n  readonly priorityLevels: number;\n  readonly timeoutCleanupInterval: number; // milliseconds\n  readonly persistToDisk: boolean;\n  readonly queuePath?: string;\n}\n\n/**\n * Queue statistics\n */\nexport interface QueueStats {\n  readonly totalTasks: number;\n  readonly pendingTasks: number;\n  readonly runningTasks: number;\n  readonly completedTasks: number;\n  readonly failedTasks: number;\n  readonly averageWaitTime: number; // milliseconds\n  readonly averageExecutionTime: number; // milliseconds\n  readonly throughput: number; // tasks per second\n  readonly queueLength: number;\n  readonly priorityBreakdown: Record<TaskPriority, number>;\n}\n\n// ========================================\n// Error Handling\n// ========================================\n\n/**\n * Worker-specific error types\n */\nexport interface WorkerError extends Error {\n  readonly type: 'timeout' | 'memory' | 'crash' | 'validation' | 'runtime';\n  readonly workerId?: string;\n  readonly taskId?: string;\n  readonly timestamp: Date;\n  readonly memoryUsage?: number;\n  readonly cpuTime?: number;\n  readonly stackTrace?: string;\n  readonly context?: Record<string, any>;\n}\n\n/**\n * Recovery strategy configuration\n */\nexport interface RecoveryConfig {\n  readonly maxRetries: number;\n  readonly retryDelay: number; // milliseconds\n  readonly exponentialBackoff: boolean;\n  readonly restartWorkerOnError: boolean;\n  readonly isolateFailedTasks: boolean;\n  readonly fallbackToMainThread: boolean;\n}\n\n// ========================================\n// Monitoring and Metrics\n// ========================================\n\n/**\n * Worker pool metrics\n */\nexport interface WorkerPoolMetrics {\n  readonly poolSize: number;\n  readonly activeWorkers: number;\n  readonly idleWorkers: number;\n  readonly totalTasksProcessed: number;\n  readonly averageTaskTime: number;\n  readonly peakMemoryUsage: number;\n  readonly totalCpuTime: number;\n  readonly errorRate: number;\n  readonly throughput: number;\n  readonly efficiency: number; // utilization percentage\n  readonly queueHealth: QueueStats;\n  readonly workerHealth: WorkerHealthMetrics[];\n}\n\n/**\n * Individual worker health metrics\n */\nexport interface WorkerHealthMetrics {\n  readonly workerId: string;\n  readonly status: WorkerStatus;\n  readonly uptime: number; // milliseconds\n  readonly tasksCompleted: number;\n  readonly averageTaskTime: number;\n  readonly memoryUsage: number;\n  readonly cpuUsage: number;\n  readonly errorCount: number;\n  readonly efficiency: number;\n  readonly lastActivity: Date;\n}\n\n// ========================================\n// Event System\n// ========================================\n\n/**\n * Worker pool events\n */\nexport interface WorkerPoolEvents {\n  'worker-created': (worker: WorkerInstance) => void;\n  'worker-terminated': (workerId: string, reason: string) => void;\n  'worker-error': (error: WorkerError) => void;\n  'task-queued': (task: WorkerTask) => void;\n  'task-started': (execution: TaskExecution) => void;\n  'task-completed': (result: TaskResult) => void;\n  'task-failed': (error: WorkerError) => void;\n  'pool-scaled': (oldSize: number, newSize: number) => void;\n  'metrics-updated': (metrics: WorkerPoolMetrics) => void;\n}\n\n// ========================================\n// Communication Protocols\n// ========================================\n\n/**\n * Message types for worker communication\n */\nexport enum MessageType {\n  TASK_ASSIGNMENT = 'task_assignment',\n  TASK_RESULT = 'task_result',\n  TASK_ERROR = 'task_error',\n  TASK_PROGRESS = 'task_progress',\n  WORKER_READY = 'worker_ready',\n  WORKER_SHUTDOWN = 'worker_shutdown',\n  HEALTH_CHECK = 'health_check',\n  MEMORY_WARNING = 'memory_warning'\n}\n\n/**\n * Worker message interface\n */\nexport interface WorkerMessage<TData = any> {\n  readonly type: MessageType;\n  readonly taskId?: string;\n  readonly data: TData;\n  readonly timestamp: Date;\n  readonly correlationId?: string;\n}\n\n/**\n * Performance benchmark results\n */\nexport interface PerformanceBenchmark {\n  readonly operation: string;\n  readonly dataSize: number;\n  readonly singleThreadTime: number; // milliseconds\n  readonly multiThreadTime: number; // milliseconds\n  readonly speedup: number; // ratio\n  readonly efficiency: number; // percentage\n  readonly memoryOverhead: number; // bytes\n  readonly optimalWorkerCount: number;\n}\n\n// ========================================\n// Factory and Builder Types\n// ========================================\n\n/**\n * Worker factory configuration\n */\nexport interface WorkerFactory {\n  createWorker(config: WorkerConfig): Promise<WorkerInstance>;\n  destroyWorker(workerId: string): Promise<void>;\n  validateConfig(config: WorkerConfig): boolean;\n  getDefaultConfig(): WorkerConfig;\n}\n\n/**\n * Task builder for fluent API\n */\nexport interface TaskBuilder<TData = any> {\n  withId(id: string): TaskBuilder<TData>;\n  withType(type: CalculationType): TaskBuilder<TData>;\n  withData(data: TData): TaskBuilder<TData>;\n  withPriority(priority: TaskPriority): TaskBuilder<TData>;\n  withTimeout(timeout: number): TaskBuilder<TData>;\n  withRetries(retries: number): TaskBuilder<TData>;\n  withMetadata(metadata: Record<string, any>): TaskBuilder<TData>;\n  build(): WorkerTask<TData>;\n}\n\n// ========================================\n// Type Guards and Utilities\n// ========================================\n\n/**\n * Type guard for worker tasks\n */\nexport function isWorkerTask(obj: any): obj is WorkerTask {\n  return !!(\n    obj &&\n    typeof obj.id === 'string' &&\n    typeof obj.type === 'string' &&\n    obj.data !== undefined &&\n    typeof obj.priority === 'number' &&\n    obj.createdAt instanceof Date\n  );\n}\n\n/**\n * Type guard for task results\n */\nexport function isTaskResult(obj: any): obj is TaskResult {\n  return !!(\n    obj &&\n    typeof obj.taskId === 'string' &&\n    typeof obj.success === 'boolean' &&\n    typeof obj.executionTime === 'number' &&\n    typeof obj.memoryUsage === 'number'\n  );\n}\n\n/**\n * Type guard for worker errors\n */\nexport function isWorkerError(obj: any): obj is WorkerError {\n  return !!(\n    obj &&\n    obj instanceof Error &&\n    typeof (obj as any).type === 'string' &&\n    (obj as any).timestamp instanceof Date\n  );\n}\n\n// ========================================\n// Branded Types for Type Safety\n// ========================================\n\nexport type WorkerId = string & { readonly __brand: 'WorkerId' };\nexport type TaskId = string & { readonly __brand: 'TaskId' };\nexport type CorrelationId = string & { readonly __brand: 'CorrelationId' };\n\n/**\n * Create a branded worker ID\n */\nexport function createWorkerId(id: string): WorkerId {\n  return id as WorkerId;\n}\n\n/**\n * Create a branded task ID\n */\nexport function createTaskId(id: string): TaskId {\n  return id as TaskId;\n}\n\n/**\n * Create a branded correlation ID\n */\nexport function createCorrelationId(id: string): CorrelationId {\n  return id as CorrelationId;\n}\n","/**\n * @fileoverview Advanced Task Queue with Priority Management\n * @version 1.7.0\n * @author CREB Development Team\n * \n * This module implements a sophisticated task queue system with priority-based scheduling,\n * timeout management, and persistence capabilities for the CREB worker thread system.\n */\n\nimport { EventEmitter } from 'events';\nimport { promises as fs } from 'fs';\nimport { \n  WorkerTask, \n  TaskPriority, \n  TaskStatus, \n  TaskQueueConfig, \n  QueueStats,\n  TaskId,\n  createTaskId\n} from './types';\nimport { ValidationError, SystemError, ComputationError } from '../../core/errors/CREBError';\nimport { Injectable } from '../../core/decorators/Injectable';\n\n/**\n * Priority queue node for efficient insertion and removal\n */\ninterface QueueNode<T> {\n  task: T;\n  priority: TaskPriority;\n  enqueuedAt: Date;\n  next?: QueueNode<T>;\n}\n\n/**\n * Advanced task queue with priority management and persistence\n */\n@Injectable()\nexport class TaskQueue extends EventEmitter {\n  private readonly config: TaskQueueConfig;\n  private readonly queues: Map<TaskPriority, QueueNode<WorkerTask>[]>;\n  private readonly taskMap: Map<string, WorkerTask>;\n  private readonly timeouts: Map<string, NodeJS.Timeout>;\n  private stats: {\n    totalTasks: number;\n    pendingTasks: number;\n    runningTasks: number;\n    completedTasks: number;\n    failedTasks: number;\n    averageWaitTime: number;\n    averageExecutionTime: number;\n    throughput: number;\n    queueLength: number;\n    priorityBreakdown: Record<TaskPriority, number>;\n  };\n  private readonly startTime: Date;\n  private cleanupInterval?: NodeJS.Timeout;\n  private persistenceInterval?: NodeJS.Timeout;\n\n  constructor(config: Partial<TaskQueueConfig> = {}) {\n    super();\n    \n    this.config = {\n      maxSize: 10000,\n      priorityLevels: 4,\n      timeoutCleanupInterval: 30000, // 30 seconds\n      persistToDisk: false,\n      ...config\n    };\n\n    // Initialize priority queues\n    this.queues = new Map();\n    for (let priority = 0; priority < this.config.priorityLevels; priority++) {\n      this.queues.set(priority as TaskPriority, []);\n    }\n\n    this.taskMap = new Map();\n    this.timeouts = new Map();\n    this.startTime = new Date();\n\n    // Initialize stats\n    this.stats = {\n      totalTasks: 0,\n      pendingTasks: 0,\n      runningTasks: 0,\n      completedTasks: 0,\n      failedTasks: 0,\n      averageWaitTime: 0,\n      averageExecutionTime: 0,\n      throughput: 0,\n      queueLength: 0,\n      priorityBreakdown: {\n        [TaskPriority.LOW]: 0,\n        [TaskPriority.NORMAL]: 0,\n        [TaskPriority.HIGH]: 0,\n        [TaskPriority.CRITICAL]: 0\n      }\n    };\n\n    this.setupCleanupInterval();\n    this.setupPersistence();\n  }\n\n  /**\n   * Enqueue a task with priority-based insertion\n   */\n  public async enqueue(task: WorkerTask): Promise<void> {\n    if (this.size() >= this.config.maxSize) {\n      throw new ValidationError(\n        `Queue is full (max size: ${this.config.maxSize})`,\n        { maxSize: this.config.maxSize, currentSize: this.size() },\n        { field: 'queueSize', value: this.size(), constraint: `must be less than ${this.config.maxSize}` }\n      );\n    }\n\n    // Validate task\n    this.validateTask(task);\n\n    // Add to task map for quick lookup\n    this.taskMap.set(task.id, { ...task });\n\n    // Add to priority queue\n    const priorityQueue = this.queues.get(task.priority);\n    if (!priorityQueue) {\n      throw new ValidationError(\n        `Invalid priority level: ${task.priority}`,\n        { priority: task.priority, validPriorities: Object.values(TaskPriority) },\n        { field: 'priority', value: task.priority, constraint: 'must be a valid TaskPriority enum value' }\n      );\n    }\n\n    const node: QueueNode<WorkerTask> = {\n      task: { ...task },\n      priority: task.priority,\n      enqueuedAt: new Date()\n    };\n\n    // Insert based on priority and FIFO within priority\n    priorityQueue.push(node);\n\n    // Setup timeout if specified\n    if (task.timeout && task.timeout > 0) {\n      const timeoutId = setTimeout(() => {\n        this.handleTaskTimeout(task.id);\n      }, task.timeout);\n      this.timeouts.set(task.id, timeoutId);\n    }\n\n    // Update stats\n    this.updateStatsOnEnqueue(task);\n\n    // Emit event\n    this.emit('task-enqueued', task);\n\n    // Persist if enabled\n    if (this.config.persistToDisk) {\n      await this.persistQueue();\n    }\n  }\n\n  /**\n   * Dequeue the highest priority task\n   */\n  public dequeue(): WorkerTask | null {\n    // Check priorities from highest to lowest\n    for (let priority = TaskPriority.CRITICAL; priority >= TaskPriority.LOW; priority--) {\n      const queue = this.queues.get(priority);\n      if (queue && queue.length > 0) {\n        const node = queue.shift()!;\n        const task = node.task;\n\n        // Clean up timeout\n        this.clearTaskTimeout(task.id);\n\n        // Update stats\n        this.updateStatsOnDequeue(task, node.enqueuedAt);\n\n        // Emit event\n        this.emit('task-dequeued', task);\n\n        return task;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Peek at the next task without removing it\n   */\n  public peek(): WorkerTask | null {\n    for (let priority = TaskPriority.CRITICAL; priority >= TaskPriority.LOW; priority--) {\n      const queue = this.queues.get(priority);\n      if (queue && queue.length > 0) {\n        return queue[0].task;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get task by ID\n   */\n  public getTask(taskId: string): WorkerTask | null {\n    return this.taskMap.get(taskId) || null;\n  }\n\n  /**\n   * Remove a specific task from the queue\n   */\n  public removeTask(taskId: string): boolean {\n    const task = this.taskMap.get(taskId);\n    if (!task) {\n      return false;\n    }\n\n    // Remove from priority queue\n    const queue = this.queues.get(task.priority);\n    if (queue) {\n      const index = queue.findIndex(node => node.task.id === taskId);\n      if (index !== -1) {\n        queue.splice(index, 1);\n      }\n    }\n\n    // Clean up\n    this.taskMap.delete(taskId);\n    this.clearTaskTimeout(taskId);\n\n    // Update stats\n    this.updateStatsOnRemoval(task);\n\n    // Emit event\n    this.emit('task-removed', task);\n\n    return true;\n  }\n\n  /**\n   * Get tasks by priority\n   */\n  public getTasksByPriority(priority: TaskPriority): WorkerTask[] {\n    const queue = this.queues.get(priority);\n    return queue ? queue.map(node => node.task) : [];\n  }\n\n  /**\n   * Get all pending tasks\n   */\n  public getAllTasks(): WorkerTask[] {\n    const allTasks: WorkerTask[] = [];\n    for (const queue of this.queues.values()) {\n      allTasks.push(...queue.map(node => node.task));\n    }\n    return allTasks;\n  }\n\n  /**\n   * Clear all tasks from the queue\n   */\n  public clear(): void {\n    // Clear all timeouts\n    for (const timeoutId of this.timeouts.values()) {\n      clearTimeout(timeoutId);\n    }\n\n    // Clear collections\n    for (const queue of this.queues.values()) {\n      queue.length = 0;\n    }\n    this.taskMap.clear();\n    this.timeouts.clear();\n\n    // Reset stats\n    this.resetStats();\n\n    // Emit event\n    this.emit('queue-cleared');\n  }\n\n  /**\n   * Get current queue size\n   */\n  public size(): number {\n    return this.taskMap.size;\n  }\n\n  /**\n   * Check if queue is empty\n   */\n  public isEmpty(): boolean {\n    return this.size() === 0;\n  }\n\n  /**\n   * Check if queue is full\n   */\n  public isFull(): boolean {\n    return this.size() >= this.config.maxSize;\n  }\n\n  /**\n   * Get queue statistics\n   */\n  public getStats(): QueueStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * Get detailed queue information\n   */\n  public getQueueInfo(): Record<string, any> {\n    const info: Record<string, any> = {\n      totalSize: this.size(),\n      maxSize: this.config.maxSize,\n      utilization: (this.size() / this.config.maxSize) * 100,\n      uptime: Date.now() - this.startTime.getTime(),\n      priorityQueues: {}\n    };\n\n    // Add priority queue details\n    for (const [priority, queue] of this.queues.entries()) {\n      const priorityName = TaskPriority[priority] || `Priority_${priority}`;\n      info.priorityQueues[priorityName] = {\n        size: queue.length,\n        oldestTask: queue.length > 0 ? queue[0].enqueuedAt : null,\n        averageAge: this.calculateAverageAge(queue)\n      };\n    }\n\n    return info;\n  }\n\n  /**\n   * Gracefully shutdown the queue\n   */\n  public async shutdown(): Promise<void> {\n    // Clear intervals\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    if (this.persistenceInterval) {\n      clearInterval(this.persistenceInterval);\n    }\n\n    // Persist final state if enabled\n    if (this.config.persistToDisk && this.size() > 0) {\n      await this.persistQueue();\n    }\n\n    // Clear all tasks and timeouts\n    this.clear();\n\n    // Emit shutdown event\n    this.emit('queue-shutdown');\n  }\n\n  /**\n   * Load queue from disk (if persistence is enabled)\n   */\n  public async loadFromDisk(): Promise<void> {\n    if (!this.config.persistToDisk || !this.config.queuePath) {\n      return;\n    }\n\n    try {\n      const data = await fs.readFile(this.config.queuePath, 'utf-8');\n      const savedTasks: WorkerTask[] = JSON.parse(data);\n\n      // Restore tasks\n      for (const task of savedTasks) {\n        await this.enqueue({\n          ...task,\n          createdAt: new Date(task.createdAt)\n        });\n      }\n\n      this.emit('queue-loaded', savedTasks.length);\n    } catch (error) {\n      // File might not exist or be corrupted - that's okay\n      this.emit('queue-load-error', error);\n    }\n  }\n\n  // ========================================\n  // Private Methods\n  // ========================================\n\n  private validateTask(task: WorkerTask): void {\n    if (!task.id || typeof task.id !== 'string') {\n      throw new ValidationError(\n        'Task must have a valid string ID',\n        { taskId: task.id, taskType: typeof task.id },\n        { field: 'taskId', value: task.id, constraint: 'must be a non-empty string' }\n      );\n    }\n\n    if (this.taskMap.has(task.id)) {\n      throw new ValidationError(\n        `Task with ID ${task.id} already exists`,\n        { taskId: task.id, existingTasks: Array.from(this.taskMap.keys()) },\n        { field: 'taskId', value: task.id, constraint: 'must be unique' }\n      );\n    }\n\n    if (task.priority < 0 || task.priority >= this.config.priorityLevels) {\n      throw new ValidationError(\n        `Invalid priority: ${task.priority}`,\n        { priority: task.priority, maxPriority: this.config.priorityLevels - 1 },\n        { field: 'priority', value: task.priority, constraint: `must be between 0 and ${this.config.priorityLevels - 1}` }\n      );\n    }\n\n    if (task.timeout !== undefined && task.timeout < 0) {\n      throw new ValidationError(\n        'Task timeout must be non-negative',\n        { timeout: task.timeout },\n        { field: 'timeout', value: task.timeout, constraint: 'must be >= 0' }\n      );\n    }\n  }\n\n  private handleTaskTimeout(taskId: string): void {\n    const task = this.taskMap.get(taskId);\n    if (task) {\n      this.removeTask(taskId);\n      this.stats.failedTasks++;\n      this.emit('task-timeout', task);\n    }\n  }\n\n  private clearTaskTimeout(taskId: string): void {\n    const timeoutId = this.timeouts.get(taskId);\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      this.timeouts.delete(taskId);\n    }\n  }\n\n  private updateStatsOnEnqueue(task: WorkerTask): void {\n    this.stats.totalTasks++;\n    this.stats.pendingTasks++;\n    this.stats.queueLength = this.size();\n    this.stats.priorityBreakdown[task.priority]++;\n  }\n\n  private updateStatsOnDequeue(task: WorkerTask, enqueuedAt: Date): void {\n    this.stats.pendingTasks--;\n    this.stats.runningTasks++;\n    this.stats.queueLength = this.size();\n\n    // Update average wait time\n    const waitTime = Date.now() - enqueuedAt.getTime();\n    this.stats.averageWaitTime = this.calculateMovingAverage(\n      this.stats.averageWaitTime,\n      waitTime,\n      this.stats.totalTasks\n    );\n\n    // Update throughput\n    const uptimeSeconds = (Date.now() - this.startTime.getTime()) / 1000;\n    this.stats.throughput = this.stats.completedTasks / Math.max(uptimeSeconds, 1);\n  }\n\n  private updateStatsOnRemoval(task: WorkerTask): void {\n    this.stats.pendingTasks--;\n    this.stats.queueLength = this.size();\n    this.stats.priorityBreakdown[task.priority]--;\n  }\n\n  private calculateMovingAverage(current: number, newValue: number, count: number): number {\n    if (count <= 1) return newValue;\n    return ((current * (count - 1)) + newValue) / count;\n  }\n\n  private calculateAverageAge(queue: QueueNode<WorkerTask>[]): number {\n    if (queue.length === 0) return 0;\n    \n    const now = Date.now();\n    const totalAge = queue.reduce((sum, node) => {\n      return sum + (now - node.enqueuedAt.getTime());\n    }, 0);\n    \n    return totalAge / queue.length;\n  }\n\n  private resetStats(): void {\n    Object.assign(this.stats, {\n      totalTasks: 0,\n      pendingTasks: 0,\n      runningTasks: 0,\n      completedTasks: 0,\n      failedTasks: 0,\n      averageWaitTime: 0,\n      averageExecutionTime: 0,\n      throughput: 0,\n      queueLength: 0,\n      priorityBreakdown: {\n        [TaskPriority.LOW]: 0,\n        [TaskPriority.NORMAL]: 0,\n        [TaskPriority.HIGH]: 0,\n        [TaskPriority.CRITICAL]: 0\n      }\n    });\n  }\n\n  private setupCleanupInterval(): void {\n    this.cleanupInterval = setInterval(() => {\n      this.performCleanup();\n    }, this.config.timeoutCleanupInterval);\n  }\n\n  private setupPersistence(): void {\n    if (this.config.persistToDisk) {\n      // Persist every 5 minutes\n      this.persistenceInterval = setInterval(() => {\n        this.persistQueue().catch(error => {\n          this.emit('persistence-error', error);\n        });\n      }, 5 * 60 * 1000);\n    }\n  }\n\n  private performCleanup(): void {\n    // Clean up completed timeouts and update stats\n    const now = Date.now();\n    let cleanedTasks = 0;\n\n    // This is mainly for housekeeping - actual timeout handling\n    // is done in handleTaskTimeout\n    for (const [taskId, task] of this.taskMap.entries()) {\n      if (task.timeout && task.timeout > 0) {\n        const age = now - task.createdAt.getTime();\n        if (age > task.timeout * 2) { // Clean up very old tasks\n          this.removeTask(taskId);\n          cleanedTasks++;\n        }\n      }\n    }\n\n    if (cleanedTasks > 0) {\n      this.emit('cleanup-completed', cleanedTasks);\n    }\n  }\n\n  private async persistQueue(): Promise<void> {\n    if (!this.config.queuePath) {\n      throw new SystemError(\n        'Queue path not configured for persistence',\n        { operation: 'persistQueue', config: this.config },\n        { subsystem: 'workers', resource: 'queue-persistence' }\n      );\n    }\n\n    try {\n      const tasks = this.getAllTasks();\n      const data = JSON.stringify(tasks, null, 2);\n      await fs.writeFile(this.config.queuePath, data, 'utf-8');\n      this.emit('queue-persisted', tasks.length);\n    } catch (error) {\n      this.emit('persistence-error', error);\n      throw error;\n    }\n  }\n}\n\n/**\n * Task builder for fluent task creation\n */\nexport class TaskBuilder<TData = any> {\n  private task: {\n    id?: string;\n    type?: any;\n    data?: TData;\n    priority?: TaskPriority;\n    createdAt?: Date;\n    timeout?: number;\n    retryAttempts?: number;\n    metadata?: Record<string, any>;\n  } = {};\n\n  public static create<TData = any>(): TaskBuilder<TData> {\n    return new TaskBuilder<TData>();\n  }\n\n  public withId(id: string): TaskBuilder<TData> {\n    this.task.id = id;\n    return this;\n  }\n\n  public withType(type: any): TaskBuilder<TData> {\n    this.task.type = type;\n    return this;\n  }\n\n  public withData(data: TData): TaskBuilder<TData> {\n    this.task.data = data;\n    return this;\n  }\n\n  public withPriority(priority: TaskPriority): TaskBuilder<TData> {\n    this.task.priority = priority;\n    return this;\n  }\n\n  public withTimeout(timeout: number): TaskBuilder<TData> {\n    this.task.timeout = timeout;\n    return this;\n  }\n\n  public withRetries(retries: number): TaskBuilder<TData> {\n    this.task.retryAttempts = retries;\n    return this;\n  }\n\n  public withMetadata(metadata: Record<string, any>): TaskBuilder<TData> {\n    this.task.metadata = metadata;\n    return this;\n  }\n\n  public build(): WorkerTask<TData> {\n    // Validate required fields\n    if (!this.task.id) {\n      this.task.id = createTaskId(`task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);\n    }\n\n    if (!this.task.type) {\n      throw new ValidationError(\n        'Task type is required',\n        { task: this.task },\n        { field: 'type', value: this.task.type, constraint: 'must be specified' }\n      );\n    }\n\n    if (this.task.data === undefined) {\n      throw new ValidationError(\n        'Task data is required',\n        { task: this.task },\n        { field: 'data', value: this.task.data, constraint: 'must be defined' }\n      );\n    }\n\n    if (this.task.priority === undefined) {\n      this.task.priority = TaskPriority.NORMAL;\n    }\n\n    if (!this.task.createdAt) {\n      this.task.createdAt = new Date();\n    }\n\n    return this.task as WorkerTask<TData>;\n  }\n}\n","/**\n * @fileoverview Worker Pool Manager for CREB Chemistry Calculations\n * @version 1.7.0\n * @author CREB Development Team\n * \n * This module provides a sophisticated worker pool for managing multiple worker threads,\n * distributing tasks efficiently, and monitoring performance metrics.\n */\n\nimport { Worker } from 'worker_threads';\nimport { EventEmitter } from 'events';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\nimport { \n  WorkerInstance, \n  WorkerConfig, \n  WorkerPoolConfig, \n  WorkerTask, \n  TaskResult, \n  WorkerStatus, \n  TaskStatus,\n  WorkerPoolMetrics,\n  WorkerHealthMetrics,\n  WorkerError,\n  WorkerMessage,\n  MessageType,\n  TaskExecution,\n  RecoveryConfig,\n  WorkerId,\n  TaskId,\n  createWorkerId\n} from './types';\nimport { TaskQueue } from './TaskQueue';\nimport { SystemError, ComputationError, ValidationError } from '../../core/errors/CREBError';\nimport { Injectable } from '../../core/decorators/Injectable';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n/**\n * Advanced worker pool with load balancing and health monitoring\n */\n@Injectable()\nexport class WorkerPool extends EventEmitter {\n  private readonly config: WorkerPoolConfig;\n  private readonly recoveryConfig: RecoveryConfig;\n  private readonly workers: Map<string, WorkerInstance>;\n  private readonly taskQueue: TaskQueue;\n  private readonly activeExecutions: Map<string, TaskExecution>;\n  private readonly workerScriptPath: string;\n  private isShuttingDown: boolean = false;\n  private nextWorkerId: number = 1;\n  private metricsInterval?: NodeJS.Timeout;\n  private healthCheckInterval?: NodeJS.Timeout;\n  private readonly startTime: Date;\n\n  constructor(\n    config: Partial<WorkerPoolConfig> = {},\n    recoveryConfig: Partial<RecoveryConfig> = {}\n  ) {\n    super();\n\n    this.config = {\n      minWorkers: 2,\n      maxWorkers: Math.max(4, require('os').cpus().length),\n      idleTimeout: 300000, // 5 minutes\n      taskTimeout: 300000, // 5 minutes\n      maxRetries: 3,\n      memoryLimit: 512 * 1024 * 1024, // 512MB\n      cpuTimeLimit: 600000, // 10 minutes\n      loadBalancing: 'least-busy',\n      autoScale: true,\n      scalingThreshold: 5,\n      ...config\n    };\n\n    this.recoveryConfig = {\n      maxRetries: 3,\n      retryDelay: 1000,\n      exponentialBackoff: true,\n      restartWorkerOnError: true,\n      isolateFailedTasks: true,\n      fallbackToMainThread: false,\n      ...recoveryConfig\n    };\n\n    this.workers = new Map();\n    this.activeExecutions = new Map();\n    this.startTime = new Date();\n    \n    // Initialize task queue\n    this.taskQueue = new TaskQueue({\n      maxSize: 10000,\n      priorityLevels: 4,\n      timeoutCleanupInterval: 30000,\n      persistToDisk: false\n    });\n\n    // Set worker script path\n    this.workerScriptPath = join(__dirname, 'ChemistryWorker.js');\n\n    this.setupEventHandlers();\n    this.initializeWorkerPool();\n    this.startHealthMonitoring();\n  }\n\n  /**\n   * Submit a task to the worker pool\n   */\n  public async submitTask<TData = any, TResult = any>(\n    task: WorkerTask<TData>\n  ): Promise<TaskResult<TResult>> {\n    if (this.isShuttingDown) {\n      throw new SystemError(\n        'Worker pool is shutting down',\n        { operation: 'submitTask', taskId: task.id, poolState: 'shutting-down' },\n        { subsystem: 'workers', resource: 'worker-pool' }\n      );\n    }\n\n    // Add task to queue\n    await this.taskQueue.enqueue(task);\n\n    // Try to process immediately if workers are available\n    await this.processQueuedTasks();\n\n    // Return a promise that resolves when the task completes\n    return new Promise((resolve, reject) => {\n      const onTaskCompleted = (result: TaskResult) => {\n        if (result.taskId === task.id) {\n          this.removeListener('task-completed', onTaskCompleted);\n          this.removeListener('task-failed', onTaskFailed);\n          resolve(result as TaskResult<TResult>);\n        }\n      };\n\n      const onTaskFailed = (error: WorkerError) => {\n        if (error.taskId === task.id) {\n          this.removeListener('task-completed', onTaskCompleted);\n          this.removeListener('task-failed', onTaskFailed);\n          reject(error);\n        }\n      };\n\n      this.on('task-completed', onTaskCompleted);\n      this.on('task-failed', onTaskFailed);\n\n      // Set up timeout\n      if (task.timeout) {\n        setTimeout(() => {\n          this.removeListener('task-completed', onTaskCompleted);\n          this.removeListener('task-failed', onTaskFailed);\n          reject(new Error(`Task ${task.id} timed out after ${task.timeout}ms`));\n        }, task.timeout);\n      }\n    });\n  }\n\n  /**\n   * Get current pool metrics\n   */\n  public getMetrics(): WorkerPoolMetrics {\n    const workers = Array.from(this.workers.values());\n    const totalTasks = workers.reduce((sum, w) => sum + w.tasksCompleted, 0);\n    const totalExecutionTime = workers.reduce((sum, w) => sum + w.totalExecutionTime, 0);\n    const totalErrors = workers.reduce((sum, w) => sum + w.errorCount, 0);\n    const peakMemory = Math.max(...workers.map(w => w.peakMemoryUsage), 0);\n\n    return {\n      poolSize: this.workers.size,\n      activeWorkers: workers.filter(w => w.status === WorkerStatus.BUSY).length,\n      idleWorkers: workers.filter(w => w.status === WorkerStatus.IDLE).length,\n      totalTasksProcessed: totalTasks,\n      averageTaskTime: totalTasks > 0 ? totalExecutionTime / totalTasks : 0,\n      peakMemoryUsage: peakMemory,\n      totalCpuTime: totalExecutionTime,\n      errorRate: totalTasks > 0 ? totalErrors / totalTasks : 0,\n      throughput: this.calculateThroughput(),\n      efficiency: this.calculateEfficiency(),\n      queueHealth: this.taskQueue.getStats(),\n      workerHealth: workers.map(w => this.getWorkerHealth(w))\n    };\n  }\n\n  /**\n   * Scale the worker pool\n   */\n  public async scalePool(targetSize: number): Promise<void> {\n    if (targetSize < this.config.minWorkers || targetSize > this.config.maxWorkers) {\n      throw new ValidationError(\n        `Target size must be between ${this.config.minWorkers} and ${this.config.maxWorkers}`,\n        { targetSize, minWorkers: this.config.minWorkers, maxWorkers: this.config.maxWorkers },\n        { field: 'targetSize', value: targetSize, constraint: `must be between ${this.config.minWorkers} and ${this.config.maxWorkers}` }\n      );\n    }\n\n    const currentSize = this.workers.size;\n    \n    if (targetSize > currentSize) {\n      // Scale up\n      const workersToAdd = targetSize - currentSize;\n      await Promise.all(\n        Array.from({ length: workersToAdd }, () => this.createWorker())\n      );\n    } else if (targetSize < currentSize) {\n      // Scale down\n      const workersToRemove = currentSize - targetSize;\n      const idleWorkers = Array.from(this.workers.values())\n        .filter(w => w.status === WorkerStatus.IDLE)\n        .slice(0, workersToRemove);\n\n      await Promise.all(\n        idleWorkers.map(w => this.terminateWorker(w.id))\n      );\n    }\n\n    this.emit('pool-scaled', currentSize, this.workers.size);\n  }\n\n  /**\n   * Get detailed worker information\n   */\n  public getWorkerInfo(): Array<{\n    id: string;\n    status: WorkerStatus;\n    uptime: number;\n    tasksCompleted: number;\n    memoryUsage: number;\n    currentTask?: string;\n  }> {\n    return Array.from(this.workers.values()).map(worker => ({\n      id: worker.id,\n      status: worker.status,\n      uptime: Date.now() - worker.createdAt.getTime(),\n      tasksCompleted: worker.tasksCompleted,\n      memoryUsage: worker.currentMemoryUsage,\n      currentTask: worker.currentTask\n    }));\n  }\n\n  /**\n   * Gracefully shutdown the worker pool\n   */\n  public async shutdown(): Promise<void> {\n    if (this.isShuttingDown) {\n      return;\n    }\n\n    this.isShuttingDown = true;\n\n    // Clear intervals\n    if (this.metricsInterval) {\n      clearInterval(this.metricsInterval);\n    }\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n\n    // Wait for active tasks to complete (with timeout)\n    const activeTaskIds = Array.from(this.activeExecutions.keys());\n    if (activeTaskIds.length > 0) {\n      await Promise.race([\n        this.waitForActiveTasks(),\n        new Promise(resolve => setTimeout(resolve, 30000)) // 30s timeout\n      ]);\n    }\n\n    // Terminate all workers\n    await Promise.all(\n      Array.from(this.workers.keys()).map(workerId => \n        this.terminateWorker(workerId)\n      )\n    );\n\n    // Shutdown task queue\n    await this.taskQueue.shutdown();\n\n    this.emit('pool-shutdown');\n  }\n\n  // ========================================\n  // Private Methods\n  // ========================================\n\n  private setupEventHandlers(): void {\n    this.taskQueue.on('task-enqueued', () => {\n      this.processQueuedTasks();\n    });\n\n    this.taskQueue.on('task-timeout', (task: WorkerTask) => {\n      this.handleTaskTimeout(task);\n    });\n\n    // Handle uncaught exceptions\n    process.on('uncaughtException', (error) => {\n      this.emit('error', error);\n    });\n\n    process.on('unhandledRejection', (reason) => {\n      this.emit('error', new Error(`Unhandled rejection: ${reason}`));\n    });\n  }\n\n  private async initializeWorkerPool(): Promise<void> {\n    // Create minimum number of workers\n    const initialWorkers = Array.from(\n      { length: this.config.minWorkers }, \n      () => this.createWorker()\n    );\n\n    await Promise.all(initialWorkers);\n    this.emit('pool-initialized', this.workers.size);\n  }\n\n  private async createWorker(): Promise<WorkerInstance> {\n    const workerId = createWorkerId(`worker_${this.nextWorkerId++}`);\n    \n    const config: WorkerConfig = {\n      id: workerId,\n      scriptPath: this.workerScriptPath,\n      maxMemory: this.config.memoryLimit,\n      maxCpuTime: this.config.cpuTimeLimit,\n      idleTimeout: this.config.idleTimeout,\n      env: Object.fromEntries(\n        Object.entries(process.env).filter(([_, value]) => value !== undefined)\n      ) as Record<string, string>,\n      execArgv: []\n    };\n\n    const worker = new Worker(this.workerScriptPath, {\n      workerData: { workerId },\n      resourceLimits: {\n        maxOldGenerationSizeMb: Math.floor(this.config.memoryLimit / (1024 * 1024)),\n        maxYoungGenerationSizeMb: Math.floor(this.config.memoryLimit / (4 * 1024 * 1024))\n      }\n    });\n\n    const workerInstance: WorkerInstance = {\n      id: workerId,\n      config,\n      worker,\n      status: WorkerStatus.STARTING,\n      createdAt: new Date(),\n      lastUsed: new Date(),\n      tasksCompleted: 0,\n      totalExecutionTime: 0,\n      currentMemoryUsage: 0,\n      peakMemoryUsage: 0,\n      errorCount: 0\n    };\n\n    this.setupWorkerEventHandlers(workerInstance);\n    this.workers.set(workerId, workerInstance);\n\n    this.emit('worker-created', workerInstance);\n    return workerInstance;\n  }\n\n  private setupWorkerEventHandlers(workerInstance: WorkerInstance): void {\n    const { worker, id: workerId } = workerInstance;\n\n    worker.on('message', (message: WorkerMessage) => {\n      this.handleWorkerMessage(workerId, message);\n    });\n\n    worker.on('error', (error) => {\n      this.handleWorkerError(workerId, error);\n    });\n\n    worker.on('exit', (code) => {\n      this.handleWorkerExit(workerId, code);\n    });\n  }\n\n  private handleWorkerMessage(workerId: string, message: WorkerMessage): void {\n    const worker = this.workers.get(workerId);\n    if (!worker) return;\n\n    switch (message.type) {\n      case MessageType.WORKER_READY:\n        worker.status = WorkerStatus.IDLE;\n        this.processQueuedTasks();\n        break;\n\n      case MessageType.TASK_RESULT:\n        this.handleTaskResult(workerId, message);\n        break;\n\n      case MessageType.TASK_ERROR:\n        this.handleTaskError(workerId, message);\n        break;\n\n      case MessageType.TASK_PROGRESS:\n        this.handleTaskProgress(workerId, message);\n        break;\n\n      case MessageType.MEMORY_WARNING:\n        this.handleMemoryWarning(workerId, message);\n        break;\n\n      case MessageType.HEALTH_CHECK:\n        this.handleHealthCheckResponse(workerId, message);\n        break;\n    }\n  }\n\n  private handleTaskResult(workerId: string, message: WorkerMessage): void {\n    const worker = this.workers.get(workerId);\n    const taskResult = message.data as TaskResult;\n    \n    if (worker && message.taskId) {\n      // Update worker stats\n      worker.status = WorkerStatus.IDLE;\n      worker.currentTask = undefined;\n      worker.tasksCompleted++;\n      worker.totalExecutionTime += taskResult.executionTime;\n      worker.lastUsed = new Date();\n\n      // Update memory usage\n      if (taskResult.memoryUsage > worker.peakMemoryUsage) {\n        worker.peakMemoryUsage = taskResult.memoryUsage;\n      }\n      worker.currentMemoryUsage = taskResult.memoryUsage;\n\n      // Remove from active executions\n      this.activeExecutions.delete(message.taskId);\n\n      // Emit result\n      this.emit('task-completed', taskResult);\n\n      // Process next queued task\n      this.processQueuedTasks();\n    }\n  }\n\n  private handleTaskError(workerId: string, message: WorkerMessage): void {\n    const worker = this.workers.get(workerId);\n    const error = message.data as WorkerError;\n\n    if (worker && message.taskId) {\n      worker.status = WorkerStatus.IDLE;\n      worker.currentTask = undefined;\n      worker.errorCount++;\n      worker.lastError = error;\n\n      // Remove from active executions\n      this.activeExecutions.delete(message.taskId);\n\n      // Handle error recovery\n      this.handleErrorRecovery(workerId, error);\n\n      // Emit error\n      this.emit('task-failed', error);\n\n      // Process next queued task\n      this.processQueuedTasks();\n    }\n  }\n\n  private handleTaskProgress(workerId: string, message: WorkerMessage): void {\n    if (message.taskId && this.activeExecutions.has(message.taskId)) {\n      const execution = this.activeExecutions.get(message.taskId)!;\n      execution.progress = message.data.progress;\n      this.emit('task-progress', message.taskId, message.data.progress);\n    }\n  }\n\n  private handleMemoryWarning(workerId: string, message: WorkerMessage): void {\n    const worker = this.workers.get(workerId);\n    if (worker) {\n      worker.currentMemoryUsage = message.data.memoryUsage;\n      this.emit('memory-warning', workerId, message.data);\n      \n      // Consider terminating worker if memory usage is too high\n      if (message.data.memoryUsage > this.config.memoryLimit * 0.9) {\n        this.restartWorker(workerId);\n      }\n    }\n  }\n\n  private handleHealthCheckResponse(workerId: string, message: WorkerMessage): void {\n    const worker = this.workers.get(workerId);\n    if (worker) {\n      // Update worker health status\n      worker.currentMemoryUsage = message.data.memoryUsage;\n      // Additional health processing can be added here\n    }\n  }\n\n  private handleWorkerError(workerId: string, error: Error): void {\n    const worker = this.workers.get(workerId);\n    if (worker) {\n      worker.status = WorkerStatus.ERROR;\n      worker.errorCount++;\n      worker.lastError = {\n        name: error.name,\n        message: error.message,\n        type: 'crash',\n        workerId,\n        timestamp: new Date(),\n        stackTrace: error.stack\n      };\n\n      // Restart worker if configured to do so\n      if (this.recoveryConfig.restartWorkerOnError) {\n        this.restartWorker(workerId);\n      }\n\n      this.emit('worker-error', worker.lastError);\n    }\n  }\n\n  private handleWorkerExit(workerId: string, code: number): void {\n    const worker = this.workers.get(workerId);\n    if (worker) {\n      worker.status = WorkerStatus.TERMINATED;\n      \n      // Clean up active tasks\n      if (worker.currentTask) {\n        this.activeExecutions.delete(worker.currentTask);\n      }\n\n      this.emit('worker-terminated', workerId, `Exit code: ${code}`);\n\n      // Replace worker if pool is not shutting down and we're below minimum\n      if (!this.isShuttingDown && this.workers.size < this.config.minWorkers) {\n        this.createWorker();\n      }\n    }\n  }\n\n  private async processQueuedTasks(): Promise<void> {\n    while (!this.taskQueue.isEmpty() && this.hasAvailableWorkers()) {\n      const task = this.taskQueue.dequeue();\n      if (task) {\n        const worker = this.selectWorker();\n        if (worker) {\n          await this.assignTaskToWorker(worker, task);\n        }\n      }\n    }\n\n    // Auto-scale if needed\n    if (this.config.autoScale && this.shouldScaleUp()) {\n      const targetSize = Math.min(\n        this.workers.size + 1,\n        this.config.maxWorkers\n      );\n      await this.scalePool(targetSize);\n    }\n  }\n\n  private hasAvailableWorkers(): boolean {\n    return Array.from(this.workers.values()).some(\n      worker => worker.status === WorkerStatus.IDLE\n    );\n  }\n\n  private selectWorker(): WorkerInstance | null {\n    const availableWorkers = Array.from(this.workers.values())\n      .filter(worker => worker.status === WorkerStatus.IDLE);\n\n    if (availableWorkers.length === 0) {\n      return null;\n    }\n\n    switch (this.config.loadBalancing) {\n      case 'round-robin':\n        return availableWorkers[0]; // Simple round-robin\n\n      case 'least-busy':\n        return availableWorkers.reduce((least, current) => \n          current.tasksCompleted < least.tasksCompleted ? current : least\n        );\n\n      case 'random':\n        return availableWorkers[Math.floor(Math.random() * availableWorkers.length)];\n\n      default:\n        return availableWorkers[0];\n    }\n  }\n\n  private async assignTaskToWorker(worker: WorkerInstance, task: WorkerTask): Promise<void> {\n    worker.status = WorkerStatus.BUSY;\n    worker.currentTask = task.id;\n\n    // Track execution\n    const execution: TaskExecution = {\n      taskId: task.id,\n      workerId: worker.id,\n      startedAt: new Date(),\n      status: TaskStatus.RUNNING\n    };\n    this.activeExecutions.set(task.id, execution);\n\n    // Send task to worker\n    worker.worker.postMessage({\n      type: MessageType.TASK_ASSIGNMENT,\n      taskId: task.id,\n      data: task,\n      timestamp: new Date()\n    });\n\n    this.emit('task-started', execution);\n  }\n\n  private shouldScaleUp(): boolean {\n    return (\n      this.taskQueue.size() >= this.config.scalingThreshold &&\n      this.workers.size < this.config.maxWorkers\n    );\n  }\n\n  private async restartWorker(workerId: string): Promise<void> {\n    await this.terminateWorker(workerId);\n    await this.createWorker();\n  }\n\n  private async terminateWorker(workerId: string): Promise<void> {\n    const worker = this.workers.get(workerId);\n    if (worker) {\n      // Send shutdown message\n      worker.worker.postMessage({\n        type: MessageType.WORKER_SHUTDOWN,\n        data: {},\n        timestamp: new Date()\n      });\n\n      // Force terminate after timeout\n      setTimeout(() => {\n        if (!worker.worker.threadId) {\n          worker.worker.terminate();\n        }\n      }, 5000);\n\n      this.workers.delete(workerId);\n      this.emit('worker-terminated', workerId, 'Manual termination');\n    }\n  }\n\n  private handleTaskTimeout(task: WorkerTask): void {\n    const execution = this.activeExecutions.get(task.id);\n    if (execution) {\n      const worker = this.workers.get(execution.workerId);\n      if (worker && worker.currentTask === task.id) {\n        worker.status = WorkerStatus.IDLE;\n        worker.currentTask = undefined;\n      }\n\n      this.activeExecutions.delete(task.id);\n      \n      const error: WorkerError = {\n        name: 'TaskTimeoutError',\n        message: `Task ${task.id} timed out`,\n        type: 'timeout',\n        taskId: task.id,\n        timestamp: new Date()\n      };\n\n      this.emit('task-failed', error);\n    }\n  }\n\n  private handleErrorRecovery(workerId: string, error: WorkerError): void {\n    if (this.recoveryConfig.restartWorkerOnError && error.type === 'crash') {\n      this.restartWorker(workerId);\n    }\n\n    // Additional recovery strategies can be implemented here\n  }\n\n  private calculateThroughput(): number {\n    const uptime = (Date.now() - this.startTime.getTime()) / 1000; // seconds\n    const totalTasks = Array.from(this.workers.values())\n      .reduce((sum, w) => sum + w.tasksCompleted, 0);\n    \n    return uptime > 0 ? totalTasks / uptime : 0;\n  }\n\n  private calculateEfficiency(): number {\n    const totalWorkers = this.workers.size;\n    const busyWorkers = Array.from(this.workers.values())\n      .filter(w => w.status === WorkerStatus.BUSY).length;\n    \n    return totalWorkers > 0 ? (busyWorkers / totalWorkers) * 100 : 0;\n  }\n\n  private getWorkerHealth(worker: WorkerInstance): WorkerHealthMetrics {\n    const uptime = Date.now() - worker.createdAt.getTime();\n    const avgTaskTime = worker.tasksCompleted > 0 \n      ? worker.totalExecutionTime / worker.tasksCompleted \n      : 0;\n\n    return {\n      workerId: worker.id,\n      status: worker.status,\n      uptime,\n      tasksCompleted: worker.tasksCompleted,\n      averageTaskTime: avgTaskTime,\n      memoryUsage: worker.currentMemoryUsage,\n      cpuUsage: 0, // Would need additional monitoring\n      errorCount: worker.errorCount,\n      efficiency: worker.tasksCompleted > 0 ? \n        (worker.totalExecutionTime / uptime) * 100 : 0,\n      lastActivity: worker.lastUsed\n    };\n  }\n\n  private async waitForActiveTasks(): Promise<void> {\n    return new Promise((resolve) => {\n      const checkActiveTasks = () => {\n        if (this.activeExecutions.size === 0) {\n          resolve();\n        } else {\n          setTimeout(checkActiveTasks, 100);\n        }\n      };\n      checkActiveTasks();\n    });\n  }\n\n  private startHealthMonitoring(): void {\n    // Metrics collection\n    this.metricsInterval = setInterval(() => {\n      const metrics = this.getMetrics();\n      this.emit('metrics-updated', metrics);\n    }, 30000); // Every 30 seconds\n\n    // Health checks\n    this.healthCheckInterval = setInterval(() => {\n      this.performHealthChecks();\n    }, 60000); // Every minute\n  }\n\n  private performHealthChecks(): void {\n    for (const worker of this.workers.values()) {\n      if (worker.status !== WorkerStatus.TERMINATED) {\n        worker.worker.postMessage({\n          type: MessageType.HEALTH_CHECK,\n          data: {},\n          timestamp: new Date()\n        });\n      }\n    }\n  }\n}\n","/**\n * @fileoverview Worker Thread Integration and Utilities\n * @version 1.7.0\n * @author CREB Development Team\n * \n * This module provides integration utilities, factory functions, and high-level\n * APIs for the CREB worker thread system.\n */\n\nimport { WorkerPool } from './WorkerPool.js';\nimport { TaskQueue, TaskBuilder } from './TaskQueue.js';\nimport { \n  WorkerTask, \n  TaskResult, \n  WorkerPoolConfig, \n  TaskPriority, \n  CalculationType,\n  EquationBalancingTask,\n  ThermodynamicsTask,\n  BatchAnalysisTask,\n  MatrixSolvingTask,\n  WorkerPoolMetrics,\n  PerformanceBenchmark\n} from './types.js';\n\n/**\n * High-level worker thread manager for CREB calculations\n */\nexport class CREBWorkerManager {\n  private workerPool: WorkerPool;\n  private isInitialized: boolean = false;\n\n  constructor(config: Partial<WorkerPoolConfig> = {}) {\n    const defaultConfig: Partial<WorkerPoolConfig> = {\n      minWorkers: Math.max(1, Math.floor(require('os').cpus().length / 2)),\n      maxWorkers: require('os').cpus().length,\n      idleTimeout: 300000, // 5 minutes\n      taskTimeout: 600000, // 10 minutes\n      autoScale: true,\n      scalingThreshold: 5,\n      loadBalancing: 'least-busy'\n    };\n\n    this.workerPool = new WorkerPool({ ...defaultConfig, ...config });\n  }\n\n  /**\n   * Initialize the worker manager\n   */\n  public async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    // Wait for initial workers to be ready\n    await new Promise<void>((resolve) => {\n      this.workerPool.on('pool-initialized', () => {\n        this.isInitialized = true;\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * Balance a chemical equation using worker threads\n   */\n  public async balanceEquation(\n    equation: string,\n    options: {\n      method?: 'gauss' | 'algebraic' | 'matrix';\n      maxIterations?: number;\n      tolerance?: number;\n      priority?: TaskPriority;\n      timeout?: number;\n    } = {}\n  ): Promise<{\n    originalEquation: string;\n    balancedEquation: string;\n    coefficients: number[];\n    method: string;\n    elements: string[];\n    isBalanced: boolean;\n  }> {\n    const taskData: EquationBalancingTask = {\n      equation,\n      options: {\n        method: options.method || 'matrix',\n        maxIterations: options.maxIterations || 1000,\n        tolerance: options.tolerance || 1e-10\n      }\n    };\n\n    const task = TaskBuilder.create<EquationBalancingTask>()\n      .withType(CalculationType.EQUATION_BALANCING)\n      .withData(taskData)\n      .withPriority(options.priority || TaskPriority.NORMAL)\n      .withTimeout(options.timeout || 30000)\n      .build();\n\n    const result = await this.workerPool.submitTask(task);\n    \n    if (!result.success) {\n      throw new Error(`Equation balancing failed: ${result.error?.message}`);\n    }\n\n    return result.result;\n  }\n\n  /**\n   * Calculate thermodynamic properties using worker threads\n   */\n  public async calculateThermodynamics(\n    compounds: Array<{\n      formula: string;\n      amount: number;\n      state?: 'solid' | 'liquid' | 'gas';\n    }>,\n    conditions: {\n      temperature?: number;\n      pressure?: number;\n      volume?: number;\n    },\n    calculations: string[],\n    options: {\n      priority?: TaskPriority;\n      timeout?: number;\n    } = {}\n  ): Promise<{\n    compounds: any[];\n    conditions: any;\n    calculations: Record<string, any>;\n    temperature: number;\n    pressure: number;\n  }> {\n    const taskData: ThermodynamicsTask = {\n      compounds,\n      conditions,\n      calculations\n    };\n\n    const task = TaskBuilder.create<ThermodynamicsTask>()\n      .withType(CalculationType.THERMODYNAMICS)\n      .withData(taskData)\n      .withPriority(options.priority || TaskPriority.NORMAL)\n      .withTimeout(options.timeout || 60000)\n      .build();\n\n    const result = await this.workerPool.submitTask(task);\n    \n    if (!result.success) {\n      throw new Error(`Thermodynamics calculation failed: ${result.error?.message}`);\n    }\n\n    return result.result;\n  }\n\n  /**\n   * Perform batch compound analysis using worker threads\n   */\n  public async analyzeBatch(\n    compounds: string[],\n    properties: string[],\n    options: {\n      includeIsomers?: boolean;\n      includeSpectroscopy?: boolean;\n      dataProvider?: string;\n      priority?: TaskPriority;\n      timeout?: number;\n      batchSize?: number;\n    } = {}\n  ): Promise<{\n    totalCompounds: number;\n    results: Array<Record<string, any>>;\n    options: any;\n  }> {\n    const { batchSize = 100 } = options;\n    \n    // Split large batches into smaller chunks for better performance\n    if (compounds.length > batchSize) {\n      const chunks: string[][] = [];\n      for (let i = 0; i < compounds.length; i += batchSize) {\n        chunks.push(compounds.slice(i, i + batchSize));\n      }\n\n      // Process chunks in parallel\n      const chunkResults = await Promise.all(\n        chunks.map(chunk => this.processBatchChunk(chunk, properties, options))\n      );\n\n      // Combine results\n      const allResults = chunkResults.flatMap(chunk => chunk.results);\n      \n      return {\n        totalCompounds: compounds.length,\n        results: allResults,\n        options\n      };\n    } else {\n      return this.processBatchChunk(compounds, properties, options);\n    }\n  }\n\n  /**\n   * Solve matrix equation using worker threads\n   */\n  public async solveMatrix(\n    matrix: number[][],\n    vector?: number[],\n    options: {\n      method?: 'gaussian' | 'lu' | 'qr' | 'svd';\n      tolerance?: number;\n      maxIterations?: number;\n      pivoting?: boolean;\n      priority?: TaskPriority;\n      timeout?: number;\n    } = {}\n  ): Promise<any> {\n    const taskData: MatrixSolvingTask = {\n      matrix,\n      vector,\n      method: options.method || 'gaussian',\n      options: {\n        tolerance: options.tolerance || 1e-10,\n        maxIterations: options.maxIterations || 1000,\n        pivoting: options.pivoting !== false\n      }\n    };\n\n    const task = TaskBuilder.create<MatrixSolvingTask>()\n      .withType(CalculationType.MATRIX_SOLVING)\n      .withData(taskData)\n      .withPriority(options.priority || TaskPriority.NORMAL)\n      .withTimeout(options.timeout || 120000) // 2 minutes for matrix operations\n      .build();\n\n    const result = await this.workerPool.submitTask(task);\n    \n    if (!result.success) {\n      throw new Error(`Matrix solving failed: ${result.error?.message}`);\n    }\n\n    return result.result;\n  }\n\n  /**\n   * Get performance metrics for the worker system\n   */\n  public getMetrics(): WorkerPoolMetrics {\n    return this.workerPool.getMetrics();\n  }\n\n  /**\n   * Get worker information\n   */\n  public getWorkerInfo() {\n    return this.workerPool.getWorkerInfo();\n  }\n\n  /**\n   * Scale the worker pool\n   */\n  public async scaleWorkers(targetSize: number): Promise<void> {\n    await this.workerPool.scalePool(targetSize);\n  }\n\n  /**\n   * Run performance benchmark\n   */\n  public async runBenchmark(\n    operation: 'equation_balancing' | 'thermodynamics' | 'matrix_solving' | 'batch_analysis',\n    dataSize: number\n  ): Promise<PerformanceBenchmark> {\n    const singleThreadTime = await this.benchmarkSingleThread(operation, dataSize);\n    const multiThreadTime = await this.benchmarkMultiThread(operation, dataSize);\n\n    const speedup = singleThreadTime / multiThreadTime;\n    const efficiency = speedup / this.workerPool.getMetrics().poolSize;\n    \n    return {\n      operation,\n      dataSize,\n      singleThreadTime,\n      multiThreadTime,\n      speedup,\n      efficiency: efficiency * 100,\n      memoryOverhead: this.calculateMemoryOverhead(),\n      optimalWorkerCount: this.calculateOptimalWorkerCount(speedup)\n    };\n  }\n\n  /**\n   * Gracefully shutdown the worker manager\n   */\n  public async shutdown(): Promise<void> {\n    await this.workerPool.shutdown();\n    this.isInitialized = false;\n  }\n\n  // ========================================\n  // Private Methods\n  // ========================================\n\n  private async processBatchChunk(\n    compounds: string[],\n    properties: string[],\n    options: any\n  ) {\n    const taskData: BatchAnalysisTask = {\n      compounds,\n      properties,\n      options: {\n        includeIsomers: options.includeIsomers || false,\n        includeSpectroscopy: options.includeSpectroscopy || false,\n        dataProvider: options.dataProvider || 'internal'\n      }\n    };\n\n    const task = TaskBuilder.create<BatchAnalysisTask>()\n      .withType(CalculationType.BATCH_ANALYSIS)\n      .withData(taskData)\n      .withPriority(options.priority || TaskPriority.NORMAL)\n      .withTimeout(options.timeout || 300000) // 5 minutes\n      .build();\n\n    const result = await this.workerPool.submitTask(task);\n    \n    if (!result.success) {\n      throw new Error(`Batch analysis failed: ${result.error?.message}`);\n    }\n\n    return result.result;\n  }\n\n  private async benchmarkSingleThread(operation: string, dataSize: number): Promise<number> {\n    // Simulate single-thread execution time\n    // In a real implementation, this would run the operation on the main thread\n    const baseTime = {\n      'equation_balancing': 10,\n      'thermodynamics': 50,\n      'matrix_solving': 100,\n      'batch_analysis': 20\n    }[operation] || 50;\n\n    return baseTime * Math.sqrt(dataSize);\n  }\n\n  private async benchmarkMultiThread(operation: string, dataSize: number): Promise<number> {\n    const startTime = Date.now();\n    \n    // Create benchmark tasks based on operation type\n    const tasks = this.createBenchmarkTasks(operation, dataSize);\n    \n    // Execute tasks in parallel\n    await Promise.all(\n      tasks.map(task => this.workerPool.submitTask(task))\n    );\n\n    return Date.now() - startTime;\n  }\n\n  private createBenchmarkTasks(operation: string, dataSize: number): WorkerTask[] {\n    const tasks: WorkerTask[] = [];\n    \n    switch (operation) {\n      case 'equation_balancing':\n        for (let i = 0; i < dataSize; i++) {\n          tasks.push(TaskBuilder.create<EquationBalancingTask>()\n            .withType(CalculationType.EQUATION_BALANCING)\n            .withData({ equation: `H${i+1} + O2 -> H${i+1}O` })\n            .withPriority(TaskPriority.HIGH)\n            .build());\n        }\n        break;\n\n      case 'thermodynamics':\n        for (let i = 0; i < dataSize; i++) {\n          tasks.push(TaskBuilder.create<ThermodynamicsTask>()\n            .withType(CalculationType.THERMODYNAMICS)\n            .withData({\n              compounds: [{ formula: 'H2O', amount: i + 1 }],\n              conditions: { temperature: 298.15 + i },\n              calculations: ['enthalpy', 'entropy']\n            })\n            .withPriority(TaskPriority.HIGH)\n            .build());\n        }\n        break;\n\n      case 'matrix_solving':\n        for (let i = 0; i < dataSize; i++) {\n          const size = Math.max(2, Math.floor(Math.sqrt(i + 1)));\n          const matrix = Array(size).fill(null).map(() => \n            Array(size).fill(null).map(() => Math.random())\n          );\n          \n          tasks.push(TaskBuilder.create<MatrixSolvingTask>()\n            .withType(CalculationType.MATRIX_SOLVING)\n            .withData({ matrix, method: 'gaussian' })\n            .withPriority(TaskPriority.HIGH)\n            .build());\n        }\n        break;\n\n      case 'batch_analysis':\n        const batchSize = Math.max(1, Math.floor(dataSize / 10));\n        for (let i = 0; i < 10; i++) {\n          const compounds = Array(batchSize).fill(null).map((_, j) => `C${i}H${j+1}`);\n          \n          tasks.push(TaskBuilder.create<BatchAnalysisTask>()\n            .withType(CalculationType.BATCH_ANALYSIS)\n            .withData({\n              compounds,\n              properties: ['molecular_weight', 'density']\n            })\n            .withPriority(TaskPriority.HIGH)\n            .build());\n        }\n        break;\n    }\n\n    return tasks;\n  }\n\n  private calculateMemoryOverhead(): number {\n    const metrics = this.workerPool.getMetrics();\n    // Estimate memory overhead based on worker pool metrics\n    return metrics.poolSize * 50 * 1024 * 1024; // Rough estimate: 50MB per worker\n  }\n\n  private calculateOptimalWorkerCount(speedup: number): number {\n    const cpuCount = require('os').cpus().length;\n    \n    // Simple heuristic: optimal worker count is where efficiency is highest\n    if (speedup > cpuCount * 0.8) {\n      return cpuCount;\n    } else if (speedup > cpuCount * 0.6) {\n      return Math.floor(cpuCount * 0.75);\n    } else {\n      return Math.floor(cpuCount * 0.5);\n    }\n  }\n}\n\n/**\n * Factory function for creating worker managers\n */\nexport function createWorkerManager(config?: Partial<WorkerPoolConfig>): CREBWorkerManager {\n  return new CREBWorkerManager(config);\n}\n\n/**\n * Utility function for creating high-priority tasks\n */\nexport function createCriticalTask<TData>(\n  type: CalculationType,\n  data: TData,\n  timeout?: number\n): WorkerTask<TData> {\n  return TaskBuilder.create<TData>()\n    .withType(type)\n    .withData(data)\n    .withPriority(TaskPriority.CRITICAL)\n    .withTimeout(timeout || 60000)\n    .build();\n}\n\n/**\n * Utility function for creating batch tasks\n */\nexport function createBatchTasks<TData>(\n  type: CalculationType,\n  dataArray: TData[],\n  priority: TaskPriority = TaskPriority.NORMAL\n): WorkerTask<TData>[] {\n  return dataArray.map(data => \n    TaskBuilder.create<TData>()\n      .withType(type)\n      .withData(data)\n      .withPriority(priority)\n      .build()\n  );\n}\n\n/**\n * Performance monitor for worker threads\n */\nexport class WorkerPerformanceMonitor {\n  private manager: CREBWorkerManager;\n  private metrics: WorkerPoolMetrics[] = [];\n  private monitoringInterval?: NodeJS.Timeout;\n\n  constructor(manager: CREBWorkerManager) {\n    this.manager = manager;\n  }\n\n  /**\n   * Start performance monitoring\n   */\n  public startMonitoring(intervalMs: number = 30000): void {\n    this.monitoringInterval = setInterval(() => {\n      const metrics = this.manager.getMetrics();\n      this.metrics.push(metrics);\n\n      // Keep only last 100 measurements\n      if (this.metrics.length > 100) {\n        this.metrics.shift();\n      }\n    }, intervalMs);\n  }\n\n  /**\n   * Stop performance monitoring\n   */\n  public stopMonitoring(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = undefined;\n    }\n  }\n\n  /**\n   * Get performance trends\n   */\n  public getTrends(): {\n    throughputTrend: number[];\n    efficiencyTrend: number[];\n    errorRateTrend: number[];\n    memoryTrend: number[];\n  } {\n    return {\n      throughputTrend: this.metrics.map(m => m.throughput),\n      efficiencyTrend: this.metrics.map(m => m.efficiency),\n      errorRateTrend: this.metrics.map(m => m.errorRate),\n      memoryTrend: this.metrics.map(m => m.peakMemoryUsage)\n    };\n  }\n\n  /**\n   * Get performance summary\n   */\n  public getSummary() {\n    if (this.metrics.length === 0) {\n      return null;\n    }\n\n    const latest = this.metrics[this.metrics.length - 1];\n    const throughputs = this.metrics.map(m => m.throughput);\n    const efficiencies = this.metrics.map(m => m.efficiency);\n\n    return {\n      current: latest,\n      averageThroughput: throughputs.reduce((a, b) => a + b, 0) / throughputs.length,\n      averageEfficiency: efficiencies.reduce((a, b) => a + b, 0) / efficiencies.length,\n      peakThroughput: Math.max(...throughputs),\n      peakEfficiency: Math.max(...efficiencies),\n      measurementCount: this.metrics.length\n    };\n  }\n}\n\n// Export all types and utilities\nexport * from './types.js';\nexport { WorkerPool } from './WorkerPool.js';\nexport { TaskQueue, TaskBuilder } from './TaskQueue.js';\n","/**\n * CREB-JS Plugin System Types\n * \n * Type definitions for the plugin system including plugin interfaces,\n * API contexts, lifecycle management, and security configurations.\n * \n * @author Loganathane Virassamy\n * @version 1.7.0\n */\n\nimport { ServiceToken } from '../core/Container';\n\n/**\n * Plugin API version for compatibility checking\n */\nexport type PluginAPIVersion = '1.0.0' | '1.1.0' | '2.0.0';\n\n/**\n * Plugin execution context with permission levels\n */\nexport enum PluginContext {\n  Calculation = 'calculation',\n  DataProvider = 'data-provider',\n  UI = 'ui',\n  System = 'system'\n}\n\n/**\n * Plugin permission levels for security sandboxing\n */\nexport enum PluginPermission {\n  ReadOnly = 'read-only',\n  ReadWrite = 'read-write',\n  SystemAccess = 'system-access',\n  NetworkAccess = 'network-access'\n}\n\n/**\n * Plugin lifecycle states\n */\nexport enum PluginState {\n  Unloaded = 'unloaded',\n  Loading = 'loading',\n  Loaded = 'loaded',\n  Active = 'active',\n  Inactive = 'inactive',\n  Error = 'error',\n  Unloading = 'unloading'\n}\n\n/**\n * Plugin priority levels for execution order\n */\nexport enum PluginPriority {\n  Critical = 1000,\n  High = 750,\n  Normal = 500,\n  Low = 250,\n  Background = 100\n}\n\n/**\n * Plugin metadata for discovery and management\n */\nexport interface PluginMetadata {\n  readonly id: string;\n  readonly name: string;\n  readonly version: string;\n  readonly description: string;\n  readonly author: string;\n  readonly homepage?: string;\n  readonly repository?: string;\n  readonly license: string;\n  readonly apiVersion: PluginAPIVersion;\n  readonly context: PluginContext[];\n  readonly permissions: PluginPermission[];\n  readonly priority: PluginPriority;\n  readonly dependencies?: string[];\n  readonly conflicts?: string[];\n  readonly keywords: string[];\n  readonly createdAt: Date;\n  readonly updatedAt: Date;\n}\n\n/**\n * Plugin configuration interface\n */\nexport interface PluginConfig {\n  readonly enabled: boolean;\n  readonly autoLoad: boolean;\n  readonly settings: Record<string, any>;\n  readonly timeouts: {\n    initialization: number;\n    execution: number;\n    cleanup: number;\n  };\n  readonly resources: {\n    maxMemory: number;\n    maxCpuTime: number;\n    maxNetworkRequests: number;\n  };\n}\n\n/**\n * Plugin initialization parameters\n */\nexport interface PluginInitParams {\n  readonly metadata: PluginMetadata;\n  readonly config: PluginConfig;\n  readonly apiContext: PluginAPIContext;\n  readonly logger: PluginLogger;\n}\n\n/**\n * Plugin lifecycle hooks interface\n */\nexport interface PluginLifecycle {\n  /**\n   * Called when plugin is being initialized\n   */\n  onInitialize?(params: PluginInitParams): Promise<void> | void;\n\n  /**\n   * Called when plugin is activated\n   */\n  onActivate?(): Promise<void> | void;\n\n  /**\n   * Called when plugin is deactivated\n   */\n  onDeactivate?(): Promise<void> | void;\n\n  /**\n   * Called when plugin is being unloaded\n   */\n  onCleanup?(): Promise<void> | void;\n\n  /**\n   * Called when plugin configuration changes\n   */\n  onConfigChange?(newConfig: PluginConfig): Promise<void> | void;\n\n  /**\n   * Called periodically for health checks\n   */\n  onHealthCheck?(): Promise<PluginHealthStatus> | PluginHealthStatus;\n}\n\n/**\n * Plugin health status\n */\nexport interface PluginHealthStatus {\n  readonly healthy: boolean;\n  readonly message?: string;\n  readonly metrics?: Record<string, number>;\n  readonly timestamp: Date;\n}\n\n/**\n * Plugin error information\n */\nexport interface PluginError {\n  readonly pluginId: string;\n  readonly error: Error;\n  readonly context: string;\n  readonly timestamp: Date;\n  readonly recoverable: boolean;\n}\n\n/**\n * Plugin execution result\n */\nexport interface PluginResult<T = any> {\n  readonly success: boolean;\n  readonly data?: T;\n  readonly error?: string;\n  readonly warnings?: string[];\n  readonly executionTime: number;\n  readonly metadata?: Record<string, any>;\n}\n\n/**\n * Plugin logger interface\n */\nexport interface PluginLogger {\n  debug(message: string, ...args: any[]): void;\n  info(message: string, ...args: any[]): void;\n  warn(message: string, ...args: any[]): void;\n  error(message: string, error?: Error, ...args: any[]): void;\n}\n\n/**\n * Plugin API context interface providing access to CREB services\n */\nexport interface PluginAPIContext {\n  readonly version: PluginAPIVersion;\n  readonly services: PluginServiceRegistry;\n  readonly events: PluginEventSystem;\n  readonly storage: PluginStorage;\n  readonly http: PluginHttpClient;\n  readonly utils: PluginUtilities;\n}\n\n/**\n * Plugin service registry for accessing CREB services\n */\nexport interface PluginServiceRegistry {\n  get<T>(token: ServiceToken<T>): T | undefined;\n  has(token: ServiceToken): boolean;\n  list(): ServiceToken[];\n}\n\n/**\n * Plugin event system for communication\n */\nexport interface PluginEventSystem {\n  emit(event: string, data?: any): void;\n  on(event: string, handler: (data: any) => void): void;\n  off(event: string, handler: (data: any) => void): void;\n  once(event: string, handler: (data: any) => void): void;\n}\n\n/**\n * Plugin storage interface for persistent data\n */\nexport interface PluginStorage {\n  get(key: string): Promise<any>;\n  set(key: string, value: any): Promise<void>;\n  delete(key: string): Promise<void>;\n  clear(): Promise<void>;\n  keys(): Promise<string[]>;\n}\n\n/**\n * Plugin HTTP client for external API access\n */\nexport interface PluginHttpClient {\n  get(url: string, options?: RequestInit): Promise<Response>;\n  post(url: string, data?: any, options?: RequestInit): Promise<Response>;\n  put(url: string, data?: any, options?: RequestInit): Promise<Response>;\n  delete(url: string, options?: RequestInit): Promise<Response>;\n}\n\n/**\n * Plugin utilities for common operations\n */\nexport interface PluginUtilities {\n  validateFormula(formula: string): boolean;\n  parseFormula(formula: string): Record<string, number>;\n  calculateMolarWeight(formula: string): number;\n  formatNumber(value: number, precision?: number): string;\n  sanitizeInput(input: string): string;\n}\n\n/**\n * Plugin extension point for different calculation types\n */\nexport interface PluginExtensionPoint {\n  readonly name: string;\n  readonly description: string;\n  readonly inputTypes: string[];\n  readonly outputType: string;\n  readonly handler: PluginExtensionHandler;\n}\n\n/**\n * Plugin extension handler function\n */\nexport type PluginExtensionHandler<TInput = any, TOutput = any> = (\n  input: TInput,\n  context: PluginAPIContext\n) => Promise<PluginResult<TOutput>> | PluginResult<TOutput>;\n\n/**\n * Plugin manifest for registration\n */\nexport interface PluginManifest {\n  readonly metadata: PluginMetadata;\n  readonly config: PluginConfig;\n  readonly extensionPoints: PluginExtensionPoint[];\n  readonly factory: PluginFactory;\n}\n\n/**\n * Plugin factory function for creating plugin instances\n */\nexport type PluginFactory = (params: PluginInitParams) => Plugin;\n\n/**\n * Main plugin interface that all plugins must implement\n */\nexport interface Plugin extends PluginLifecycle {\n  readonly metadata: PluginMetadata;\n  readonly state: PluginState;\n  readonly extensionPoints: PluginExtensionPoint[];\n  \n  /**\n   * Initialize the plugin with parameters\n   */\n  initialize(params: PluginInitParams): Promise<void>;\n\n  /**\n   * Activate the plugin\n   */\n  activate(): Promise<void>;\n\n  /**\n   * Deactivate the plugin\n   */\n  deactivate(): Promise<void>;\n\n  /**\n   * Cleanup and unload the plugin\n   */\n  cleanup(): Promise<void>;\n  \n  /**\n   * Execute a plugin extension point\n   */\n  execute<TInput, TOutput>(\n    extensionPoint: string,\n    input: TInput\n  ): Promise<PluginResult<TOutput>>;\n\n  /**\n   * Get plugin health status\n   */\n  getHealth(): PluginHealthStatus;\n\n  /**\n   * Update plugin configuration\n   */\n  updateConfig(config: Partial<PluginConfig>): Promise<void>;\n}\n\n/**\n * Plugin manager events\n */\nexport interface PluginManagerEvents {\n  'plugin-loaded': { plugin: Plugin };\n  'plugin-unloaded': { pluginId: string };\n  'plugin-activated': { plugin: Plugin };\n  'plugin-deactivated': { plugin: Plugin };\n  'plugin-error': { error: PluginError };\n  'plugin-health-check': { pluginId: string; status: PluginHealthStatus };\n}\n\n/**\n * Plugin discovery source configuration\n */\nexport interface PluginDiscoverySource {\n  readonly type: 'local' | 'npm' | 'url' | 'git';\n  readonly location: string;\n  readonly pattern?: string;\n  readonly credentials?: Record<string, string>;\n}\n\n/**\n * Plugin marketplace entry\n */\nexport interface PluginMarketplaceEntry {\n  readonly metadata: PluginMetadata;\n  readonly downloads: number;\n  readonly rating: number;\n  readonly reviews: number;\n  readonly verified: boolean;\n  readonly downloadUrl: string;\n  readonly screenshots?: string[];\n  readonly readme?: string;\n}\n","/**\n * CREB-JS Plugin API Context Implementation\n * \n * Provides secure, controlled access to CREB services and utilities\n * for plugins with permission-based sandboxing and resource management.\n * \n * @author Loganathane Virassamy\n * @version 1.7.0\n */\n\nimport { EventEmitter } from 'events';\nimport { Container, ServiceToken } from '../core/Container';\nimport {\n  PluginAPIContext,\n  PluginAPIVersion,\n  PluginServiceRegistry,\n  PluginEventSystem,\n  PluginStorage,\n  PluginHttpClient,\n  PluginUtilities,\n  PluginPermission,\n  PluginLogger\n} from './types';\n\n/**\n * Permission denied error for unauthorized plugin operations\n */\nexport class PluginPermissionError extends Error {\n  constructor(\n    public readonly pluginId: string,\n    public readonly requiredPermission: PluginPermission,\n    operation: string\n  ) {\n    super(`Plugin ${pluginId} lacks permission ${requiredPermission} for operation: ${operation}`);\n    this.name = 'PluginPermissionError';\n  }\n}\n\n/**\n * Resource limit exceeded error\n */\nexport class PluginResourceError extends Error {\n  constructor(\n    public readonly pluginId: string,\n    public readonly resource: string,\n    public readonly limit: number,\n    public readonly used: number\n  ) {\n    super(`Plugin ${pluginId} exceeded ${resource} limit: ${used}/${limit}`);\n    this.name = 'PluginResourceError';\n  }\n}\n\n/**\n * Plugin service registry implementation with permission checking\n */\nclass SecurePluginServiceRegistry implements PluginServiceRegistry {\n  constructor(\n    private readonly container: Container,\n    private readonly pluginId: string,\n    private readonly permissions: PluginPermission[],\n    private readonly logger: PluginLogger\n  ) {}\n\n  get<T>(token: ServiceToken<T>): T | undefined {\n    this._checkPermission(PluginPermission.ReadOnly, 'service access');\n    \n    try {\n      return this.container.resolve(token);\n    } catch (error) {\n      this.logger.warn(`Service access failed for ${String(token)}:`, error);\n      return undefined;\n    }\n  }\n\n  has(token: ServiceToken): boolean {\n    this._checkPermission(PluginPermission.ReadOnly, 'service discovery');\n    return this.container.isRegistered(token);\n  }\n\n  list(): ServiceToken[] {\n    this._checkPermission(PluginPermission.ReadOnly, 'service listing');\n    return this.container.getRegisteredTokens();\n  }\n\n  private _checkPermission(required: PluginPermission, operation: string): void {\n    // Check if the plugin has the exact permission or a higher-level permission\n    const hasPermission = this.permissions.includes(required) ||\n      (required === PluginPermission.ReadOnly && this.permissions.includes(PluginPermission.ReadWrite));\n    \n    if (!hasPermission) {\n      throw new PluginPermissionError(this.pluginId, required, operation);\n    }\n  }\n}\n\n/**\n * Plugin event system implementation with sandboxing\n */\nclass SandboxedPluginEventSystem implements PluginEventSystem {\n  private readonly eventEmitter: EventEmitter;\n  private readonly eventPrefix: string;\n  private readonly maxListeners = 50;\n\n  constructor(\n    private readonly pluginId: string,\n    private readonly permissions: PluginPermission[],\n    private readonly logger: PluginLogger,\n    private readonly globalEventSystem: EventEmitter\n  ) {\n    this.eventEmitter = new EventEmitter();\n    this.eventPrefix = `plugin:${pluginId}:`;\n    this.eventEmitter.setMaxListeners(this.maxListeners);\n  }\n\n  emit(event: string, data?: any): void {\n    this._checkPermission(PluginPermission.ReadWrite, 'event emission');\n    \n    const namespacedEvent = this._namespaceEvent(event);\n    this.logger.debug(`Emitting event: ${namespacedEvent}`);\n    \n    // Emit both locally and globally\n    this.eventEmitter.emit(event, data);\n    this.globalEventSystem.emit(namespacedEvent, { pluginId: this.pluginId, data });\n  }\n\n  on(event: string, handler: (data: any) => void): void {\n    this._checkPermission(PluginPermission.ReadOnly, 'event listening');\n    \n    const wrappedHandler = this._wrapHandler(handler, event);\n    this.eventEmitter.on(event, wrappedHandler);\n    \n    // Also listen to global events\n    const namespacedEvent = this._namespaceEvent(event);\n    this.globalEventSystem.on(namespacedEvent, wrappedHandler);\n  }\n\n  off(event: string, handler: (data: any) => void): void {\n    this.eventEmitter.off(event, handler);\n    \n    const namespacedEvent = this._namespaceEvent(event);\n    this.globalEventSystem.off(namespacedEvent, handler);\n  }\n\n  once(event: string, handler: (data: any) => void): void {\n    this._checkPermission(PluginPermission.ReadOnly, 'event listening');\n    \n    const wrappedHandler = this._wrapHandler(handler, event);\n    this.eventEmitter.once(event, wrappedHandler);\n    \n    const namespacedEvent = this._namespaceEvent(event);\n    this.globalEventSystem.once(namespacedEvent, wrappedHandler);\n  }\n\n  private _namespaceEvent(event: string): string {\n    return `${this.eventPrefix}${event}`;\n  }\n\n  private _wrapHandler(handler: (data: any) => void, event: string): (data: any) => void {\n    return (data: any) => {\n      try {\n        handler(data);\n      } catch (error) {\n        this.logger.error(`Event handler error for ${event}:`, error as Error);\n      }\n    };\n  }\n\n  private _checkPermission(required: PluginPermission, operation: string): void {\n    // Check if the plugin has the exact permission or a higher-level permission\n    const hasPermission = this.permissions.includes(required) ||\n      (required === PluginPermission.ReadOnly && this.permissions.includes(PluginPermission.ReadWrite));\n    \n    if (!hasPermission) {\n      throw new PluginPermissionError(this.pluginId, required, operation);\n    }\n  }\n}\n\n/**\n * Plugin storage implementation with isolation\n */\nclass IsolatedPluginStorage implements PluginStorage {\n  private readonly storagePrefix: string;\n\n  constructor(\n    private readonly pluginId: string,\n    private readonly permissions: PluginPermission[],\n    private readonly logger: PluginLogger,\n    private readonly storage: Map<string, any> = new Map()\n  ) {\n    this.storagePrefix = `plugin:${pluginId}:`;\n  }\n\n  async get(key: string): Promise<any> {\n    this._checkPermission(PluginPermission.ReadOnly, 'storage read');\n    \n    const namespacedKey = this._namespaceKey(key);\n    return this.storage.get(namespacedKey);\n  }\n\n  async set(key: string, value: any): Promise<void> {\n    this._checkPermission(PluginPermission.ReadWrite, 'storage write');\n    \n    const namespacedKey = this._namespaceKey(key);\n    this.storage.set(namespacedKey, value);\n    this.logger.debug(`Storage set: ${namespacedKey}`);\n  }\n\n  async delete(key: string): Promise<void> {\n    this._checkPermission(PluginPermission.ReadWrite, 'storage delete');\n    \n    const namespacedKey = this._namespaceKey(key);\n    this.storage.delete(namespacedKey);\n    this.logger.debug(`Storage delete: ${namespacedKey}`);\n  }\n\n  async clear(): Promise<void> {\n    this._checkPermission(PluginPermission.ReadWrite, 'storage clear');\n    \n    const keysToDelete = Array.from(this.storage.keys())\n      .filter(key => key.startsWith(this.storagePrefix));\n    \n    keysToDelete.forEach(key => this.storage.delete(key));\n    this.logger.debug(`Storage cleared for plugin: ${this.pluginId}`);\n  }\n\n  async keys(): Promise<string[]> {\n    this._checkPermission(PluginPermission.ReadOnly, 'storage enumeration');\n    \n    return Array.from(this.storage.keys())\n      .filter(key => key.startsWith(this.storagePrefix))\n      .map(key => key.substring(this.storagePrefix.length));\n  }\n\n  private _namespaceKey(key: string): string {\n    return `${this.storagePrefix}${key}`;\n  }\n\n  private _checkPermission(required: PluginPermission, operation: string): void {\n    // Check if the plugin has the exact permission or a higher-level permission\n    const hasPermission = this.permissions.includes(required) ||\n      (required === PluginPermission.ReadOnly && this.permissions.includes(PluginPermission.ReadWrite));\n    \n    if (!hasPermission) {\n      throw new PluginPermissionError(this.pluginId, required, operation);\n    }\n  }\n}\n\n/**\n * Plugin HTTP client implementation with rate limiting\n */\nclass RateLimitedPluginHttpClient implements PluginHttpClient {\n  private requestCount = 0;\n  private lastResetTime = Date.now();\n  private readonly resetInterval = 60000; // 1 minute\n\n  constructor(\n    private readonly pluginId: string,\n    private readonly permissions: PluginPermission[],\n    private readonly logger: PluginLogger,\n    private readonly maxRequestsPerMinute = 100\n  ) {}\n\n  async get(url: string, options?: RequestInit): Promise<Response> {\n    return this._makeRequest('GET', url, undefined, options);\n  }\n\n  async post(url: string, data?: any, options?: RequestInit): Promise<Response> {\n    return this._makeRequest('POST', url, data, options);\n  }\n\n  async put(url: string, data?: any, options?: RequestInit): Promise<Response> {\n    return this._makeRequest('PUT', url, data, options);\n  }\n\n  async delete(url: string, options?: RequestInit): Promise<Response> {\n    return this._makeRequest('DELETE', url, undefined, options);\n  }\n\n  private async _makeRequest(\n    method: string,\n    url: string,\n    data?: any,\n    options?: RequestInit\n  ): Promise<Response> {\n    this._checkPermission(PluginPermission.NetworkAccess, 'HTTP request');\n    this._checkRateLimit();\n\n    const requestOptions: RequestInit = {\n      ...options,\n      method,\n      headers: {\n        'User-Agent': `CREB-Plugin/${this.pluginId}`,\n        ...options?.headers\n      }\n    };\n\n    if (data && (method === 'POST' || method === 'PUT')) {\n      if (typeof data === 'object') {\n        requestOptions.body = JSON.stringify(data);\n        requestOptions.headers = {\n          'Content-Type': 'application/json',\n          ...requestOptions.headers\n        };\n      } else {\n        requestOptions.body = data;\n      }\n    }\n\n    try {\n      this.logger.debug(`Making ${method} request to: ${url}`);\n      const response = await fetch(url, requestOptions);\n      \n      if (!response.ok) {\n        this.logger.warn(`HTTP request failed: ${response.status} ${response.statusText}`);\n      }\n      \n      return response;\n    } catch (error) {\n      this.logger.error(`HTTP request error:`, error as Error);\n      throw error;\n    }\n  }\n\n  private _checkPermission(required: PluginPermission, operation: string): void {\n    // Check if the plugin has the exact permission or a higher-level permission\n    const hasPermission = this.permissions.includes(required) ||\n      (required === PluginPermission.ReadOnly && this.permissions.includes(PluginPermission.ReadWrite));\n    \n    if (!hasPermission) {\n      throw new PluginPermissionError(this.pluginId, required, operation);\n    }\n  }\n\n  private _checkRateLimit(): void {\n    const now = Date.now();\n    \n    if (now - this.lastResetTime >= this.resetInterval) {\n      this.requestCount = 0;\n      this.lastResetTime = now;\n    }\n\n    if (this.requestCount >= this.maxRequestsPerMinute) {\n      throw new PluginResourceError(\n        this.pluginId,\n        'HTTP requests per minute',\n        this.maxRequestsPerMinute,\n        this.requestCount\n      );\n    }\n\n    this.requestCount++;\n  }\n}\n\n/**\n * Plugin utilities implementation\n */\nclass PluginUtilitiesImpl implements PluginUtilities {\n  constructor(\n    private readonly pluginId: string,\n    private readonly logger: PluginLogger\n  ) {}\n\n  validateFormula(formula: string): boolean {\n    try {\n      // Basic chemical formula validation - allow simple molecular formulas\n      const trimmedFormula = formula.trim();\n      if (!trimmedFormula) return false;\n      \n      // Allow simple formulas like H2O, CO2, NaCl, etc.\n      const formulaRegex = /^([A-Z][a-z]?\\d*)+$/;\n      return formulaRegex.test(trimmedFormula);\n    } catch (error) {\n      this.logger.warn(`Formula validation error:`, error);\n      return false;\n    }\n  }\n\n  parseFormula(formula: string): Record<string, number> {\n    try {\n      const elements: Record<string, number> = {};\n      const regex = /([A-Z][a-z]?)(\\d*)/g;\n      let match;\n\n      while ((match = regex.exec(formula)) !== null) {\n        const element = match[1];\n        const count = match[2] ? parseInt(match[2], 10) : 1;\n        elements[element] = (elements[element] || 0) + count;\n      }\n\n      return elements;\n    } catch (error) {\n      this.logger.error(`Formula parsing error:`, error as Error);\n      return {};\n    }\n  }\n\n  calculateMolarWeight(formula: string): number {\n    try {\n      // Simplified molar weight calculation\n      const atomicWeights: Record<string, number> = {\n        H: 1.008, He: 4.003, Li: 6.941, Be: 9.012, B: 10.811,\n        C: 12.011, N: 14.007, O: 15.999, F: 18.998, Ne: 20.180,\n        Na: 22.990, Mg: 24.305, Al: 26.982, Si: 28.086, P: 30.974,\n        S: 32.065, Cl: 35.453, Ar: 39.948, K: 39.098, Ca: 40.078\n      };\n\n      const elements = this.parseFormula(formula);\n      let totalWeight = 0;\n\n      for (const [element, count] of Object.entries(elements)) {\n        const weight = atomicWeights[element];\n        if (weight) {\n          totalWeight += weight * count;\n        } else {\n          this.logger.warn(`Unknown element in formula: ${element}`);\n        }\n      }\n\n      return totalWeight;\n    } catch (error) {\n      this.logger.error(`Molar weight calculation error:`, error as Error);\n      return 0;\n    }\n  }\n\n  formatNumber(value: number, precision: number = 2): string {\n    try {\n      return value.toFixed(precision);\n    } catch (error) {\n      this.logger.warn(`Number formatting error:`, error);\n      return String(value);\n    }\n  }\n\n  sanitizeInput(input: string): string {\n    try {\n      // Basic input sanitization\n      return input\n        .trim()\n        .replace(/[<>\\\"'&]/g, '') // Remove potentially dangerous characters\n        .substring(0, 1000); // Limit length\n    } catch (error) {\n      this.logger.warn(`Input sanitization error:`, error);\n      return '';\n    }\n  }\n}\n\n/**\n * Main plugin API context implementation\n */\nexport class PluginAPIContextImpl implements PluginAPIContext {\n  public readonly version: PluginAPIVersion = '1.0.0';\n  public readonly services: PluginServiceRegistry;\n  public readonly events: PluginEventSystem;\n  public readonly storage: PluginStorage;\n  public readonly http: PluginHttpClient;\n  public readonly utils: PluginUtilities;\n\n  constructor(\n    private readonly container: Container,\n    private readonly pluginId: string,\n    private readonly permissions: PluginPermission[],\n    private readonly logger: PluginLogger,\n    private readonly globalEventSystem: EventEmitter,\n    private readonly globalStorage: Map<string, any>\n  ) {\n    this.services = new SecurePluginServiceRegistry(container, pluginId, permissions, logger);\n    this.events = new SandboxedPluginEventSystem(pluginId, permissions, logger, globalEventSystem);\n    this.storage = new IsolatedPluginStorage(pluginId, permissions, logger, globalStorage);\n    this.http = new RateLimitedPluginHttpClient(pluginId, permissions, logger);\n    this.utils = new PluginUtilitiesImpl(pluginId, logger);\n  }\n}\n\n/**\n * Plugin API context factory\n */\nexport class PluginAPIContextFactory {\n  constructor(\n    private readonly container: Container,\n    private readonly globalEventSystem: EventEmitter,\n    private readonly globalStorage: Map<string, any>\n  ) {}\n\n  create(\n    pluginId: string,\n    permissions: PluginPermission[],\n    logger: PluginLogger\n  ): PluginAPIContext {\n    return new PluginAPIContextImpl(\n      this.container,\n      pluginId,\n      permissions,\n      logger,\n      this.globalEventSystem,\n      this.globalStorage\n    );\n  }\n}\n","/**\n * CREB-JS Plugin Manager\n * \n * Central plugin management system providing plugin discovery, loading,\n * lifecycle management, security sandboxing, and marketplace integration.\n * \n * @author Loganathane Virassamy\n * @version 1.7.0\n */\n\nimport { EventEmitter } from 'events';\nimport { promises as fs } from 'fs';\nimport * as path from 'path';\nimport { Container } from '../core/Container';\nimport { PluginAPIContextFactory } from './APIContext';\nimport {\n  Plugin,\n  PluginMetadata,\n  PluginState,\n  PluginConfig,\n  PluginManifest,\n  PluginFactory,\n  PluginError,\n  PluginHealthStatus,\n  PluginManagerEvents,\n  PluginDiscoverySource,\n  PluginMarketplaceEntry,\n  PluginPermission,\n  PluginContext,\n  PluginPriority,\n  PluginAPIVersion,\n  PluginLogger\n} from './types';\n\n/**\n * Plugin manager configuration\n */\nexport interface PluginManagerConfig {\n  pluginDirectory: string;\n  maxPlugins: number;\n  healthCheckInterval: number;\n  discoveryInterval: number;\n  enableHotSwap: boolean;\n  enableMarketplace: boolean;\n  marketplaceUrl?: string;\n  securityLevel: 'strict' | 'moderate' | 'permissive';\n  resourceLimits: {\n    maxMemoryPerPlugin: number;\n    maxCpuTimePerPlugin: number;\n    maxNetworkRequestsPerMinute: number;\n  };\n}\n\n/**\n * Plugin manager error classes\n */\nexport class PluginManagerError extends Error {\n  constructor(message: string, public readonly operation: string) {\n    super(message);\n    this.name = 'PluginManagerError';\n  }\n}\n\nexport class PluginLoadError extends PluginManagerError {\n  constructor(pluginId: string, reason: string) {\n    super(`Failed to load plugin ${pluginId}: ${reason}`, 'load');\n    this.name = 'PluginLoadError';\n  }\n}\n\nexport class PluginSecurityError extends PluginManagerError {\n  constructor(pluginId: string, violation: string) {\n    super(`Security violation in plugin ${pluginId}: ${violation}`, 'security');\n    this.name = 'PluginSecurityError';\n  }\n}\n\n/**\n * Plugin registry for managing loaded plugins\n */\nclass PluginRegistry {\n  private readonly plugins = new Map<string, Plugin>();\n  private readonly manifests = new Map<string, PluginManifest>();\n\n  register(manifest: PluginManifest, plugin: Plugin): void {\n    this.manifests.set(manifest.metadata.id, manifest);\n    this.plugins.set(manifest.metadata.id, plugin);\n  }\n\n  unregister(pluginId: string): void {\n    this.manifests.delete(pluginId);\n    this.plugins.delete(pluginId);\n  }\n\n  get(pluginId: string): Plugin | undefined {\n    return this.plugins.get(pluginId);\n  }\n\n  getManifest(pluginId: string): PluginManifest | undefined {\n    return this.manifests.get(pluginId);\n  }\n\n  list(): Plugin[] {\n    return Array.from(this.plugins.values());\n  }\n\n  listByState(state: PluginState): Plugin[] {\n    return this.list().filter(plugin => plugin.state === state);\n  }\n\n  listByContext(context: PluginContext): Plugin[] {\n    return this.list().filter(plugin => {\n      const manifest = this.manifests.get(plugin.metadata.id);\n      return manifest?.metadata.context.includes(context);\n    });\n  }\n\n  has(pluginId: string): boolean {\n    return this.plugins.has(pluginId);\n  }\n\n  size(): number {\n    return this.plugins.size;\n  }\n}\n\n/**\n * Plugin logger implementation\n */\nclass PluginLoggerImpl implements PluginLogger {\n  constructor(\n    private readonly pluginId: string,\n    private readonly level: 'debug' | 'info' | 'warn' | 'error' = 'info'\n  ) {}\n\n  debug(message: string, ...args: any[]): void {\n    if (this._shouldLog('debug')) {\n      console.debug(`[Plugin:${this.pluginId}] ${message}`, ...args);\n    }\n  }\n\n  info(message: string, ...args: any[]): void {\n    if (this._shouldLog('info')) {\n      console.info(`[Plugin:${this.pluginId}] ${message}`, ...args);\n    }\n  }\n\n  warn(message: string, ...args: any[]): void {\n    if (this._shouldLog('warn')) {\n      console.warn(`[Plugin:${this.pluginId}] ${message}`, ...args);\n    }\n  }\n\n  error(message: string, error?: Error, ...args: any[]): void {\n    if (this._shouldLog('error')) {\n      console.error(`[Plugin:${this.pluginId}] ${message}`, error, ...args);\n    }\n  }\n\n  private _shouldLog(level: string): boolean {\n    const levels = ['debug', 'info', 'warn', 'error'];\n    return levels.indexOf(level) >= levels.indexOf(this.level);\n  }\n}\n\n/**\n * Main plugin manager class\n */\nexport class PluginManager extends EventEmitter {\n  private readonly registry = new PluginRegistry();\n  private readonly apiContextFactory: PluginAPIContextFactory;\n  private readonly globalStorage = new Map<string, any>();\n  private readonly discoveredPlugins = new Map<string, PluginManifest>();\n  private healthCheckTimer?: NodeJS.Timeout;\n  private discoveryTimer?: NodeJS.Timeout;\n\n  constructor(\n    private readonly container: Container,\n    private readonly config: PluginManagerConfig\n  ) {\n    super();\n    this.apiContextFactory = new PluginAPIContextFactory(\n      container,\n      this, // Use this EventEmitter as global event system\n      this.globalStorage\n    );\n    this.setMaxListeners(0); // Unlimited listeners for plugin events\n  }\n\n  /**\n   * Initialize the plugin manager\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Ensure plugin directory exists\n      await this._ensurePluginDirectory();\n\n      // Start periodic health checks\n      if (this.config.healthCheckInterval > 0) {\n        this.healthCheckTimer = setInterval(\n          () => this._performHealthChecks(),\n          this.config.healthCheckInterval\n        );\n      }\n\n      // Start plugin discovery\n      if (this.config.discoveryInterval > 0) {\n        this.discoveryTimer = setInterval(\n          () => this._discoverPlugins(),\n          this.config.discoveryInterval\n        );\n      }\n\n      // Initial plugin discovery\n      await this._discoverPlugins();\n\n      console.info(`Plugin manager initialized with ${this.registry.size()} plugins`);\n    } catch (error) {\n      throw new PluginManagerError(`Failed to initialize plugin manager: ${(error as Error).message}`, 'initialize');\n    }\n  }\n\n  /**\n   * Shutdown the plugin manager\n   */\n  async shutdown(): Promise<void> {\n    try {\n      // Clear timers\n      if (this.healthCheckTimer) {\n        clearInterval(this.healthCheckTimer);\n      }\n      if (this.discoveryTimer) {\n        clearInterval(this.discoveryTimer);\n      }\n\n      // Unload all plugins\n      const activePlugins = this.registry.listByState(PluginState.Active);\n      for (const plugin of activePlugins) {\n        await this.unloadPlugin(plugin.metadata.id);\n      }\n\n      console.info('Plugin manager shutdown complete');\n    } catch (error) {\n      throw new PluginManagerError(`Failed to shutdown plugin manager: ${(error as Error).message}`, 'shutdown');\n    }\n  }\n\n  /**\n   * Load a plugin from manifest\n   */\n  async loadPlugin(manifest: PluginManifest): Promise<void> {\n    try {\n      const { metadata } = manifest;\n\n      // Check if already loaded\n      if (this.registry.has(metadata.id)) {\n        throw new Error(`Plugin already loaded: ${metadata.id}`);\n      }\n\n      // Check plugin limits\n      if (this.registry.size() >= this.config.maxPlugins) {\n        throw new Error(`Maximum plugin limit reached: ${this.config.maxPlugins}`);\n      }\n\n      // Validate plugin metadata\n      this._validatePluginMetadata(metadata);\n\n      // Check security permissions\n      this._validatePluginSecurity(metadata);\n\n      // Create plugin instance\n      const logger = new PluginLoggerImpl(metadata.id);\n      const apiContext = this.apiContextFactory.create(metadata.id, metadata.permissions, logger);\n      \n      const plugin = manifest.factory({\n        metadata,\n        config: manifest.config,\n        apiContext,\n        logger\n      });\n\n      // Initialize plugin\n      await plugin.initialize({\n        metadata,\n        config: manifest.config,\n        apiContext,\n        logger\n      });\n\n      // Register plugin\n      this.registry.register(manifest, plugin);\n\n      // Activate plugin if auto-load is enabled\n      if (manifest.config.autoLoad) {\n        await this.activatePlugin(metadata.id);\n      }\n\n      this.emit('plugin-loaded', plugin);\n      logger.info(`Plugin loaded successfully: ${metadata.name}`);\n    } catch (error) {\n      const errorInfo: PluginError = {\n        pluginId: manifest.metadata.id,\n        error: error as Error,\n        context: 'loading',\n        timestamp: new Date(),\n        recoverable: false\n      };\n      this.emit('plugin-error', errorInfo);\n      throw new PluginLoadError(manifest.metadata.id, (error as Error).message);\n    }\n  }\n\n  /**\n   * Unload a plugin\n   */\n  async unloadPlugin(pluginId: string): Promise<void> {\n    try {\n      const plugin = this.registry.get(pluginId);\n      if (!plugin) {\n        throw new Error(`Plugin not found: ${pluginId}`);\n      }\n\n      // Deactivate if active\n      if (plugin.state === PluginState.Active) {\n        await this.deactivatePlugin(pluginId);\n      }\n\n      // Cleanup plugin\n      await plugin.cleanup();\n\n      // Unregister\n      this.registry.unregister(pluginId);\n\n      this.emit('plugin-unloaded', pluginId);\n      console.info(`Plugin unloaded: ${pluginId}`);\n    } catch (error) {\n      const errorInfo: PluginError = {\n        pluginId,\n        error: error as Error,\n        context: 'unloading',\n        timestamp: new Date(),\n        recoverable: true\n      };\n      this.emit('plugin-error', errorInfo);\n      throw error;\n    }\n  }\n\n  /**\n   * Activate a plugin\n   */\n  async activatePlugin(pluginId: string): Promise<void> {\n    try {\n      const plugin = this.registry.get(pluginId);\n      if (!plugin) {\n        throw new Error(`Plugin not found: ${pluginId}`);\n      }\n\n      await plugin.activate();\n      this.emit('plugin-activated', plugin);\n    } catch (error) {\n      const errorInfo: PluginError = {\n        pluginId,\n        error: error as Error,\n        context: 'activation',\n        timestamp: new Date(),\n        recoverable: true\n      };\n      this.emit('plugin-error', errorInfo);\n      throw error;\n    }\n  }\n\n  /**\n   * Deactivate a plugin\n   */\n  async deactivatePlugin(pluginId: string): Promise<void> {\n    try {\n      const plugin = this.registry.get(pluginId);\n      if (!plugin) {\n        throw new Error(`Plugin not found: ${pluginId}`);\n      }\n\n      await plugin.deactivate();\n      this.emit('plugin-deactivated', plugin);\n    } catch (error) {\n      const errorInfo: PluginError = {\n        pluginId,\n        error: error as Error,\n        context: 'deactivation',\n        timestamp: new Date(),\n        recoverable: true\n      };\n      this.emit('plugin-error', errorInfo);\n      throw error;\n    }\n  }\n\n  /**\n   * Get plugin by ID\n   */\n  getPlugin(pluginId: string): Plugin | undefined {\n    return this.registry.get(pluginId);\n  }\n\n  /**\n   * List all plugins\n   */\n  listPlugins(): Plugin[] {\n    return this.registry.list();\n  }\n\n  /**\n   * List plugins by state\n   */\n  listPluginsByState(state: PluginState): Plugin[] {\n    return this.registry.listByState(state);\n  }\n\n  /**\n   * List plugins by context\n   */\n  listPluginsByContext(context: PluginContext): Plugin[] {\n    return this.registry.listByContext(context);\n  }\n\n  /**\n   * Get plugin health status\n   */\n  getPluginHealth(pluginId: string): PluginHealthStatus | undefined {\n    const plugin = this.registry.get(pluginId);\n    return plugin?.getHealth();\n  }\n\n  /**\n   * Update plugin configuration\n   */\n  async updatePluginConfig(pluginId: string, config: Partial<PluginConfig>): Promise<void> {\n    const plugin = this.registry.get(pluginId);\n    if (!plugin) {\n      throw new Error(`Plugin not found: ${pluginId}`);\n    }\n\n    await plugin.updateConfig(config);\n  }\n\n  /**\n   * Hot-swap a plugin (if enabled)\n   */\n  async hotSwapPlugin(pluginId: string, newManifest: PluginManifest): Promise<void> {\n    if (!this.config.enableHotSwap) {\n      throw new Error('Hot-swap is disabled');\n    }\n\n    try {\n      // Unload old plugin\n      await this.unloadPlugin(pluginId);\n      \n      // Load new plugin\n      await this.loadPlugin(newManifest);\n      \n      console.info(`Plugin hot-swapped: ${pluginId}`);\n    } catch (error) {\n      throw new PluginManagerError(`Hot-swap failed for ${pluginId}: ${(error as Error).message}`, 'hot-swap');\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async _ensurePluginDirectory(): Promise<void> {\n    try {\n      await fs.mkdir(this.config.pluginDirectory, { recursive: true });\n    } catch (error) {\n      // Directory might already exist\n    }\n  }\n\n  private async _discoverPlugins(): Promise<void> {\n    try {\n      const pluginFiles = await fs.readdir(this.config.pluginDirectory);\n      \n      for (const file of pluginFiles) {\n        if (file.endsWith('.js') || file.endsWith('.ts')) {\n          const pluginPath = path.join(this.config.pluginDirectory, file);\n          await this._loadPluginFromFile(pluginPath);\n        }\n      }\n    } catch (error) {\n      console.warn('Plugin discovery failed:', error);\n    }\n  }\n\n  private async _loadPluginFromFile(filePath: string): Promise<void> {\n    try {\n      // Dynamic import would be used here in a real implementation\n      // For now, we'll skip the actual file loading\n      console.debug(`Discovering plugin at: ${filePath}`);\n    } catch (error) {\n      console.warn(`Failed to load plugin from ${filePath}:`, error);\n    }\n  }\n\n  private _performHealthChecks(): void {\n    const plugins = this.registry.list();\n    \n    for (const plugin of plugins) {\n      try {\n        const health = plugin.getHealth();\n        this.emit('plugin-health-check', plugin.metadata.id, health);\n\n        if (!health.healthy) {\n          console.warn(`Plugin health check failed: ${plugin.metadata.id} - ${health.message}`);\n        }\n      } catch (error) {\n        const errorInfo: PluginError = {\n          pluginId: plugin.metadata.id,\n          error: error as Error,\n          context: 'health-check',\n          timestamp: new Date(),\n          recoverable: true\n        };\n        this.emit('plugin-error', errorInfo);\n      }\n    }\n  }\n\n  private _validatePluginMetadata(metadata: PluginMetadata): void {\n    if (!metadata.id || !metadata.name || !metadata.version) {\n      throw new Error('Plugin metadata must include id, name, and version');\n    }\n\n    if (!this._isValidAPIVersion(metadata.apiVersion)) {\n      throw new Error(`Unsupported API version: ${metadata.apiVersion}`);\n    }\n  }\n\n  private _validatePluginSecurity(metadata: PluginMetadata): void {\n    const { securityLevel } = this.config;\n    \n    if (securityLevel === 'strict') {\n      // In strict mode, only allow read-only permissions by default\n      const dangerousPermissions = [\n        PluginPermission.SystemAccess,\n        PluginPermission.NetworkAccess\n      ];\n      \n      const hasDangerousPermissions = metadata.permissions.some(p => \n        dangerousPermissions.includes(p)\n      );\n      \n      if (hasDangerousPermissions) {\n        throw new PluginSecurityError(\n          metadata.id,\n          'Dangerous permissions not allowed in strict mode'\n        );\n      }\n    }\n  }\n\n  private _isValidAPIVersion(version: PluginAPIVersion): boolean {\n    const supportedVersions: PluginAPIVersion[] = ['1.0.0', '1.1.0'];\n    return supportedVersions.includes(version);\n  }\n}\n","/**\n * CREB-JS Base Plugin Implementation\n * \n * Abstract base class providing common plugin functionality including\n * lifecycle management, state tracking, error handling, and extension points.\n * \n * @author Loganathane Virassamy\n * @version 1.7.0\n */\n\nimport { EventEmitter } from 'events';\nimport {\n  Plugin,\n  PluginMetadata,\n  PluginState,\n  PluginConfig,\n  PluginAPIContext,\n  PluginLogger,\n  PluginInitParams,\n  PluginExtensionPoint,\n  PluginResult,\n  PluginHealthStatus,\n  PluginError,\n  PluginPriority\n} from './types';\n\n/**\n * Base plugin error class\n */\nexport class PluginBaseError extends Error {\n  constructor(\n    message: string,\n    public readonly pluginId: string,\n    public readonly context: string = 'unknown',\n    public readonly recoverable: boolean = true\n  ) {\n    super(message);\n    this.name = 'PluginBaseError';\n  }\n}\n\n/**\n * Plugin execution timeout error\n */\nexport class PluginTimeoutError extends PluginBaseError {\n  constructor(pluginId: string, timeout: number) {\n    super(`Plugin execution timed out after ${timeout}ms`, pluginId, 'execution', false);\n    this.name = 'PluginTimeoutError';\n  }\n}\n\n/**\n * Plugin initialization error\n */\nexport class PluginInitializationError extends PluginBaseError {\n  constructor(pluginId: string, reason: string) {\n    super(`Plugin initialization failed: ${reason}`, pluginId, 'initialization', false);\n    this.name = 'PluginInitializationError';\n  }\n}\n\n/**\n * Abstract base plugin class providing common functionality\n */\nexport abstract class BasePlugin extends EventEmitter implements Plugin {\n  private _state: PluginState = PluginState.Unloaded;\n  private _config!: PluginConfig;\n  private _apiContext!: PluginAPIContext;\n  private _logger!: PluginLogger;\n  private _healthStatus: PluginHealthStatus = {\n    healthy: true,\n    timestamp: new Date()\n  };\n\n  constructor(\n    public readonly metadata: PluginMetadata,\n    public readonly extensionPoints: PluginExtensionPoint[] = []\n  ) {\n    super();\n    this.setMaxListeners(100); // Allow many event listeners\n  }\n\n  /**\n   * Get current plugin state\n   */\n  get state(): PluginState {\n    return this._state;\n  }\n\n  /**\n   * Get plugin configuration\n   */\n  get config(): PluginConfig {\n    return this._config;\n  }\n\n  /**\n   * Get API context\n   */\n  get apiContext(): PluginAPIContext {\n    return this._apiContext;\n  }\n\n  /**\n   * Get plugin logger\n   */\n  get logger(): PluginLogger {\n    return this._logger;\n  }\n\n  /**\n   * Initialize the plugin with parameters\n   */\n  async initialize(params: PluginInitParams): Promise<void> {\n    try {\n      this._setState(PluginState.Loading);\n      this._config = params.config;\n      this._apiContext = params.apiContext;\n      this._logger = params.logger;\n\n      this._logger.info(`Initializing plugin: ${this.metadata.name}`);\n\n      // Call derived class initialization\n      if (this.onInitialize) {\n        await this._executeWithTimeout(\n          () => this.onInitialize!(params),\n          this._config.timeouts.initialization,\n          'initialization'\n        );\n      }\n\n      this._setState(PluginState.Loaded);\n      this._logger.info(`Plugin initialized successfully: ${this.metadata.name}`);\n    } catch (error) {\n      this._setState(PluginState.Error);\n      this._logger.error(`Plugin initialization failed: ${this.metadata.name}`, error as Error);\n      throw new PluginInitializationError(this.metadata.id, (error as Error).message);\n    }\n  }\n\n  /**\n   * Activate the plugin\n   */\n  async activate(): Promise<void> {\n    try {\n      if (this._state !== PluginState.Loaded && this._state !== PluginState.Inactive) {\n        throw new Error(`Cannot activate plugin in state: ${this._state}`);\n      }\n\n      this._logger.info(`Activating plugin: ${this.metadata.name}`);\n\n      if (this.onActivate) {\n        await this._executeWithTimeout(\n          () => this.onActivate!(),\n          this._config.timeouts.execution,\n          'activation'\n        );\n      }\n\n      this._setState(PluginState.Active);\n      this._logger.info(`Plugin activated successfully: ${this.metadata.name}`);\n      this.emit('activated');\n    } catch (error) {\n      this._setState(PluginState.Error);\n      this._logger.error(`Plugin activation failed: ${this.metadata.name}`, error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Deactivate the plugin\n   */\n  async deactivate(): Promise<void> {\n    try {\n      if (this._state !== PluginState.Active) {\n        throw new Error(`Cannot deactivate plugin in state: ${this._state}`);\n      }\n\n      this._logger.info(`Deactivating plugin: ${this.metadata.name}`);\n\n      if (this.onDeactivate) {\n        await this._executeWithTimeout(\n          () => this.onDeactivate!(),\n          this._config.timeouts.execution,\n          'deactivation'\n        );\n      }\n\n      this._setState(PluginState.Inactive);\n      this._logger.info(`Plugin deactivated successfully: ${this.metadata.name}`);\n      this.emit('deactivated');\n    } catch (error) {\n      this._setState(PluginState.Error);\n      this._logger.error(`Plugin deactivation failed: ${this.metadata.name}`, error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Cleanup and unload the plugin\n   */\n  async cleanup(): Promise<void> {\n    try {\n      this._setState(PluginState.Unloading);\n      this._logger.info(`Cleaning up plugin: ${this.metadata.name}`);\n\n      if (this.onCleanup) {\n        await this._executeWithTimeout(\n          () => this.onCleanup!(),\n          this._config.timeouts.cleanup,\n          'cleanup'\n        );\n      }\n\n      this.removeAllListeners();\n      this._setState(PluginState.Unloaded);\n      this._logger.info(`Plugin cleaned up successfully: ${this.metadata.name}`);\n    } catch (error) {\n      this._setState(PluginState.Error);\n      this._logger.error(`Plugin cleanup failed: ${this.metadata.name}`, error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute a plugin extension point\n   */\n  async execute<TInput, TOutput>(\n    extensionPoint: string,\n    input: TInput\n  ): Promise<PluginResult<TOutput>> {\n    const startTime = Date.now();\n    \n    try {\n      if (this._state !== PluginState.Active) {\n        throw new Error(`Plugin not active: ${this._state}`);\n      }\n\n      const extension = this.extensionPoints.find(ep => ep.name === extensionPoint);\n      if (!extension) {\n        throw new Error(`Extension point not found: ${extensionPoint}`);\n      }\n\n      this._logger.debug(`Executing extension point: ${extensionPoint}`);\n\n      const result = await this._executeWithTimeout(\n        () => extension.handler(input, this._apiContext),\n        this._config.timeouts.execution,\n        'execution'\n      );\n\n      const executionTime = Date.now() - startTime;\n      this._logger.debug(`Extension point executed successfully: ${extensionPoint} (${executionTime}ms)`);\n\n      return {\n        success: true,\n        data: result.data,\n        executionTime,\n        warnings: result.warnings,\n        metadata: result.metadata\n      };\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      const errorMessage = (error as Error).message;\n      \n      this._logger.error(`Extension point execution failed: ${extensionPoint}`, error as Error);\n      \n      return {\n        success: false,\n        error: errorMessage,\n        executionTime\n      };\n    }\n  }\n\n  /**\n   * Get plugin health status\n   */\n  getHealth(): PluginHealthStatus {\n    try {\n      // Update health status if health check is implemented\n      if (this.onHealthCheck) {\n        const result = this.onHealthCheck();\n        this._healthStatus = result instanceof Promise ? this._healthStatus : result;\n      }\n\n      return {\n        ...this._healthStatus,\n        timestamp: new Date()\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        message: `Health check failed: ${(error as Error).message}`,\n        timestamp: new Date()\n      };\n    }\n  }\n\n  /**\n   * Update plugin configuration\n   */\n  async updateConfig(config: Partial<PluginConfig>): Promise<void> {\n    try {\n      const oldConfig = { ...this._config };\n      this._config = { ...this._config, ...config };\n\n      this._logger.info(`Updating plugin configuration: ${this.metadata.name}`);\n\n      if (this.onConfigChange) {\n        await this._executeWithTimeout(\n          () => this.onConfigChange!(this._config),\n          this._config.timeouts.execution,\n          'config-change'\n        );\n      }\n\n      this._logger.info(`Plugin configuration updated successfully: ${this.metadata.name}`);\n      this.emit('config-changed', { oldConfig, newConfig: this._config });\n    } catch (error) {\n      this._logger.error(`Plugin configuration update failed: ${this.metadata.name}`, error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Abstract lifecycle hooks for derived classes to implement\n   */\n  abstract onInitialize?(params: PluginInitParams): Promise<void> | void;\n  abstract onActivate?(): Promise<void> | void;\n  abstract onDeactivate?(): Promise<void> | void;\n  abstract onCleanup?(): Promise<void> | void;\n  abstract onConfigChange?(newConfig: PluginConfig): Promise<void> | void;\n  abstract onHealthCheck?(): Promise<PluginHealthStatus> | PluginHealthStatus;\n\n  /**\n   * Private helper methods\n   */\n  private _setState(state: PluginState): void {\n    const oldState = this._state;\n    this._state = state;\n    this.emit('state-changed', { oldState, newState: state });\n  }\n\n  private async _executeWithTimeout<T>(\n    operation: () => Promise<T> | T,\n    timeout: number,\n    context: string\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new PluginTimeoutError(this.metadata.id, timeout));\n      }, timeout);\n\n      Promise.resolve(operation())\n        .then(result => {\n          clearTimeout(timeoutId);\n          resolve(result);\n        })\n        .catch(error => {\n          clearTimeout(timeoutId);\n          reject(error);\n        });\n    });\n  }\n}\n\n/**\n * Simple plugin implementation for basic use cases\n */\nexport class SimplePlugin extends BasePlugin {\n  constructor(\n    metadata: PluginMetadata,\n    extensionPoints: PluginExtensionPoint[] = [],\n    private readonly handlers: {\n      onInitialize?: (params: PluginInitParams) => Promise<void> | void;\n      onActivate?: () => Promise<void> | void;\n      onDeactivate?: () => Promise<void> | void;\n      onCleanup?: () => Promise<void> | void;\n      onConfigChange?: (config: PluginConfig) => Promise<void> | void;\n      onHealthCheck?: () => Promise<PluginHealthStatus> | PluginHealthStatus;\n    } = {}\n  ) {\n    super(metadata, extensionPoints);\n  }\n\n  async onInitialize(params: PluginInitParams): Promise<void> {\n    if (this.handlers.onInitialize) {\n      await this.handlers.onInitialize(params);\n    }\n  }\n\n  async onActivate(): Promise<void> {\n    if (this.handlers.onActivate) {\n      await this.handlers.onActivate();\n    }\n  }\n\n  async onDeactivate(): Promise<void> {\n    if (this.handlers.onDeactivate) {\n      await this.handlers.onDeactivate();\n    }\n  }\n\n  async onCleanup(): Promise<void> {\n    if (this.handlers.onCleanup) {\n      await this.handlers.onCleanup();\n    }\n  }\n\n  async onConfigChange(newConfig: PluginConfig): Promise<void> {\n    if (this.handlers.onConfigChange) {\n      await this.handlers.onConfigChange(newConfig);\n    }\n  }\n\n  onHealthCheck(): PluginHealthStatus {\n    if (this.handlers.onHealthCheck) {\n      const result = this.handlers.onHealthCheck();\n      if (result instanceof Promise) {\n        // For async health checks, return a default status and handle async separately\n        return {\n          healthy: true,\n          message: 'Health check in progress',\n          timestamp: new Date()\n        };\n      }\n      return result;\n    }\n    return {\n      healthy: true,\n      message: 'Plugin is running normally',\n      timestamp: new Date()\n    };\n  }\n}\n\n/**\n * Plugin builder for fluent plugin creation\n */\nexport class PluginBuilder {\n  private _metadata!: PluginMetadata;\n  private _extensionPoints: PluginExtensionPoint[] = [];\n  private _handlers: any = {};\n\n  static create(): PluginBuilder {\n    return new PluginBuilder();\n  }\n\n  metadata(metadata: PluginMetadata): PluginBuilder {\n    this._metadata = metadata;\n    return this;\n  }\n\n  addExtensionPoint(extensionPoint: PluginExtensionPoint): PluginBuilder {\n    this._extensionPoints.push(extensionPoint);\n    return this;\n  }\n\n  onInitialize(handler: (params: PluginInitParams) => Promise<void> | void): PluginBuilder {\n    this._handlers.onInitialize = handler;\n    return this;\n  }\n\n  onActivate(handler: () => Promise<void> | void): PluginBuilder {\n    this._handlers.onActivate = handler;\n    return this;\n  }\n\n  onDeactivate(handler: () => Promise<void> | void): PluginBuilder {\n    this._handlers.onDeactivate = handler;\n    return this;\n  }\n\n  onCleanup(handler: () => Promise<void> | void): PluginBuilder {\n    this._handlers.onCleanup = handler;\n    return this;\n  }\n\n  onConfigChange(handler: (config: PluginConfig) => Promise<void> | void): PluginBuilder {\n    this._handlers.onConfigChange = handler;\n    return this;\n  }\n\n  onHealthCheck(handler: () => Promise<PluginHealthStatus> | PluginHealthStatus): PluginBuilder {\n    this._handlers.onHealthCheck = handler;\n    return this;\n  }\n\n  build(): SimplePlugin {\n    if (!this._metadata) {\n      throw new Error('Plugin metadata is required');\n    }\n    return new SimplePlugin(this._metadata, this._extensionPoints, this._handlers);\n  }\n}\n","/**\n * CREB-JS Plugin Examples\n * \n * Example plugin implementations demonstrating various plugin patterns\n * and use cases for third-party developers.\n * \n * @author Loganathane Virassamy\n * @version 1.7.0\n */\n\nimport { PluginBuilder } from './Plugin';\nimport {\n  PluginMetadata,\n  PluginConfig,\n  PluginContext,\n  PluginPermission,\n  PluginPriority,\n  PluginExtensionPoint,\n  PluginResult,\n  PluginAPIContext,\n  PluginInitParams,\n  PluginManifest\n} from './types';\n\n/**\n * Example 1: Custom Equation Balancing Algorithm Plugin\n * Demonstrates how to extend CREB's equation balancing capabilities\n */\nexport function createCustomBalancerPlugin(): PluginManifest {\n  const metadata: PluginMetadata = {\n    id: 'custom-balancer',\n    name: 'Advanced Equation Balancer',\n    version: '1.0.0',\n    description: 'Enhanced equation balancing with AI-powered optimization',\n    author: 'CREB Plugin Developer',\n    license: 'MIT',\n    homepage: 'https://github.com/example/creb-custom-balancer',\n    apiVersion: '1.0.0',\n    context: [PluginContext.Calculation],\n    permissions: [PluginPermission.ReadOnly],\n    priority: PluginPriority.High,\n    keywords: ['balancing', 'equations', 'chemistry', 'ai'],\n    createdAt: new Date(),\n    updatedAt: new Date()\n  };\n\n  const config: PluginConfig = {\n    enabled: true,\n    autoLoad: true,\n    settings: {\n      useAiOptimization: true,\n      maxIterations: 1000,\n      precision: 1e-10\n    },\n    timeouts: {\n      initialization: 5000,\n      execution: 10000,\n      cleanup: 3000\n    },\n    resources: {\n      maxMemory: 50 * 1024 * 1024, // 50MB\n      maxCpuTime: 5000,\n      maxNetworkRequests: 0 // No network access needed\n    }\n  };\n\n  const extensionPoints: PluginExtensionPoint[] = [\n    {\n      name: 'advanced-balance',\n      description: 'Balance chemical equations using advanced AI algorithms',\n      inputTypes: ['string'],\n      outputType: 'object',\n      handler: async (equation: string, context: PluginAPIContext): Promise<PluginResult> => {\n        try {\n          // Validate the equation using built-in utilities\n          const sanitizedEquation = context.utils.sanitizeInput(equation);\n          \n          if (!sanitizedEquation) {\n            return {\n              success: false,\n              error: 'Invalid equation format',\n              executionTime: 0\n            };\n          }\n\n          // Custom balancing algorithm implementation\n          const result = await advancedBalance(sanitizedEquation);\n          \n          return {\n            success: true,\n            data: {\n              balanced: result.equation,\n              coefficients: result.coefficients,\n              confidence: result.confidence,\n              method: 'ai-optimized'\n            },\n            executionTime: result.executionTime,\n            metadata: {\n              iterations: result.iterations,\n              algorithmVersion: '2.1.0'\n            }\n          };\n        } catch (error) {\n          return {\n            success: false,\n            error: (error as Error).message,\n            executionTime: 0\n          };\n        }\n      }\n    }\n  ];\n\n  return {\n    metadata,\n    config,\n    extensionPoints,\n    factory: (params: PluginInitParams) => {\n      return PluginBuilder.create()\n        .metadata(metadata)\n        .addExtensionPoint(extensionPoints[0])\n        .onInitialize(async (params) => {\n          params.logger.info('Advanced Equation Balancer initialized');\n          // Initialize AI models, load configurations, etc.\n        })\n        .onActivate(async () => {\n          console.log('Advanced balancer ready for use');\n        })\n        .onHealthCheck(() => ({\n          healthy: true,\n          message: 'AI models loaded and ready',\n          metrics: {\n            memoryUsage: process.memoryUsage().heapUsed,\n            modelAccuracy: 0.98\n          },\n          timestamp: new Date()\n        }))\n        .build();\n    }\n  };\n}\n\n/**\n * Example 2: External Data Provider Plugin\n * Demonstrates how to integrate with external chemistry databases\n */\nexport function createDataProviderPlugin(): PluginManifest {\n  const metadata: PluginMetadata = {\n    id: 'external-data-provider',\n    name: 'ChemSpider Data Provider',\n    version: '1.0.0',\n    description: 'Fetch compound data from ChemSpider API',\n    author: 'CREB Plugin Developer',\n    license: 'MIT',\n    apiVersion: '1.0.0',\n    context: [PluginContext.DataProvider],\n    permissions: [PluginPermission.ReadOnly, PluginPermission.NetworkAccess],\n    priority: PluginPriority.Normal,\n    keywords: ['data', 'chemspider', 'compounds', 'api'],\n    createdAt: new Date(),\n    updatedAt: new Date()\n  };\n\n  const config: PluginConfig = {\n    enabled: true,\n    autoLoad: false,\n    settings: {\n      apiKey: '', // To be configured by user\n      baseUrl: 'https://www.chemspider.com/InChI.asmx',\n      timeout: 10000,\n      cacheResults: true,\n      cacheTtl: 3600000 // 1 hour\n    },\n    timeouts: {\n      initialization: 5000,\n      execution: 15000,\n      cleanup: 3000\n    },\n    resources: {\n      maxMemory: 30 * 1024 * 1024, // 30MB\n      maxCpuTime: 2000,\n      maxNetworkRequests: 100\n    }\n  };\n\n  const extensionPoints: PluginExtensionPoint[] = [\n    {\n      name: 'fetch-compound-data',\n      description: 'Fetch compound information from ChemSpider',\n      inputTypes: ['string'],\n      outputType: 'object',\n      handler: async (identifier: string, context: PluginAPIContext): Promise<PluginResult> => {\n        try {\n          // Check cache first\n          const cacheKey = `compound:${identifier}`;\n          const cached = await context.storage.get(cacheKey);\n          \n          if (cached) {\n            return {\n              success: true,\n              data: cached,\n              executionTime: 1,\n              metadata: { source: 'cache' }\n            };\n          }\n\n          // Fetch from external API\n          const startTime = Date.now();\n          const url = `https://www.chemspider.com/Search.asmx/SimpleSearch?query=${encodeURIComponent(identifier)}`;\n          \n          const response = await context.http.get(url);\n          const data = await response.json();\n          \n          const executionTime = Date.now() - startTime;\n\n          // Cache the result\n          await context.storage.set(cacheKey, data);\n\n          return {\n            success: true,\n            data,\n            executionTime,\n            metadata: { source: 'chemspider' }\n          };\n        } catch (error) {\n          return {\n            success: false,\n            error: `Failed to fetch compound data: ${(error as Error).message}`,\n            executionTime: 0\n          };\n        }\n      }\n    },\n    {\n      name: 'search-compounds',\n      description: 'Search for compounds by name or formula',\n      inputTypes: ['string'],\n      outputType: 'array',\n      handler: async (query: string, context: PluginAPIContext): Promise<PluginResult> => {\n        try {\n          const sanitizedQuery = context.utils.sanitizeInput(query);\n          const startTime = Date.now();\n          \n          const url = `https://www.chemspider.com/Search.asmx/SimpleSearch?query=${encodeURIComponent(sanitizedQuery)}`;\n          const response = await context.http.get(url);\n          const results = await response.json() as any[];\n          \n          const executionTime = Date.now() - startTime;\n\n          return {\n            success: true,\n            data: results,\n            executionTime,\n            metadata: {\n              query: sanitizedQuery,\n              resultCount: Array.isArray(results) ? results.length : 0\n            }\n          };\n        } catch (error) {\n          return {\n            success: false,\n            error: `Search failed: ${(error as Error).message}`,\n            executionTime: 0\n          };\n        }\n      }\n    }\n  ];\n\n  return {\n    metadata,\n    config,\n    extensionPoints,\n    factory: (params: PluginInitParams) => {\n      return PluginBuilder.create()\n        .metadata(metadata)\n        .addExtensionPoint(extensionPoints[0])\n        .addExtensionPoint(extensionPoints[1])\n        .onInitialize(async (params) => {\n          const apiKey = params.config.settings.apiKey;\n          if (!apiKey) {\n            throw new Error('ChemSpider API key is required');\n          }\n          params.logger.info('ChemSpider data provider initialized');\n        })\n        .onActivate(async () => {\n          console.log('ChemSpider data provider ready');\n        })\n        .onConfigChange(async (newConfig) => {\n          console.log('ChemSpider configuration updated');\n        })\n        .onHealthCheck(() => ({\n          healthy: true,\n          message: 'External API connectivity verified',\n          timestamp: new Date()\n        }))\n        .build();\n    }\n  };\n}\n\n/**\n * Example 3: Specialized Calculator Plugin\n * Demonstrates domain-specific chemistry calculations\n */\nexport function createSpecializedCalculatorPlugin(): PluginManifest {\n  const metadata: PluginMetadata = {\n    id: 'advanced-calculator',\n    name: 'Advanced Chemistry Calculator',\n    version: '1.0.0',\n    description: 'Specialized calculations for advanced chemistry problems',\n    author: 'CREB Plugin Developer',\n    license: 'MIT',\n    apiVersion: '1.0.0',\n    context: [PluginContext.Calculation],\n    permissions: [PluginPermission.ReadOnly],\n    priority: PluginPriority.High,\n    keywords: ['calculations', 'advanced', 'chemistry', 'kinetics', 'thermodynamics'],\n    createdAt: new Date(),\n    updatedAt: new Date()\n  };\n\n  const config: PluginConfig = {\n    enabled: true,\n    autoLoad: true,\n    settings: {\n      precision: 10,\n      useSymbolicMath: true,\n      enableUnitConversion: true\n    },\n    timeouts: {\n      initialization: 3000,\n      execution: 5000,\n      cleanup: 2000\n    },\n    resources: {\n      maxMemory: 20 * 1024 * 1024, // 20MB\n      maxCpuTime: 3000,\n      maxNetworkRequests: 0\n    }\n  };\n\n  const extensionPoints: PluginExtensionPoint[] = [\n    {\n      name: 'calculate-equilibrium-constant',\n      description: 'Calculate equilibrium constants from thermodynamic data',\n      inputTypes: ['object'],\n      outputType: 'number',\n      handler: async (data: any, context: PluginAPIContext): Promise<PluginResult> => {\n        try {\n          const { deltaG, temperature = 298.15 } = data;\n          const R = 8.314; // Gas constant J/(mol·K)\n          \n          // K = exp(-ΔG / RT)\n          const K = Math.exp(-deltaG * 1000 / (R * temperature));\n          \n          return {\n            success: true,\n            data: K,\n            executionTime: 1,\n            metadata: {\n              deltaG,\n              temperature,\n              units: 'dimensionless'\n            }\n          };\n        } catch (error) {\n          return {\n            success: false,\n            error: `Calculation failed: ${(error as Error).message}`,\n            executionTime: 0\n          };\n        }\n      }\n    },\n    {\n      name: 'calculate-reaction-rate',\n      description: 'Calculate reaction rates using kinetic data',\n      inputTypes: ['object'],\n      outputType: 'object',\n      handler: async (data: any, context: PluginAPIContext): Promise<PluginResult> => {\n        try {\n          const { concentrations, rateConstant, orders } = data;\n          \n          // Rate = k * [A]^m * [B]^n * ...\n          let rate = rateConstant;\n          \n          for (let i = 0; i < concentrations.length; i++) {\n            rate *= Math.pow(concentrations[i], orders[i] || 1);\n          }\n          \n          return {\n            success: true,\n            data: {\n              rate,\n              units: 'M/s',\n              method: 'rate-law'\n            },\n            executionTime: 2,\n            metadata: {\n              rateConstant,\n              concentrations,\n              orders\n            }\n          };\n        } catch (error) {\n          return {\n            success: false,\n            error: `Rate calculation failed: ${(error as Error).message}`,\n            executionTime: 0\n          };\n        }\n      }\n    }\n  ];\n\n  return {\n    metadata,\n    config,\n    extensionPoints,\n    factory: (params: PluginInitParams) => {\n      return PluginBuilder.create()\n        .metadata(metadata)\n        .addExtensionPoint(extensionPoints[0])\n        .addExtensionPoint(extensionPoints[1])\n        .onInitialize(async (params) => {\n          params.logger.info('Advanced calculator initialized');\n        })\n        .onActivate(async () => {\n          console.log('Advanced calculator ready for calculations');\n        })\n        .onHealthCheck(() => ({\n          healthy: true,\n          message: 'All calculation modules loaded',\n          metrics: {\n            precision: 10,\n            modulesLoaded: 2\n          },\n          timestamp: new Date()\n        }))\n        .build();\n    }\n  };\n}\n\n/**\n * Helper function for the custom balancer (mock implementation)\n */\nasync function advancedBalance(equation: string): Promise<{\n  equation: string;\n  coefficients: number[];\n  confidence: number;\n  executionTime: number;\n  iterations: number;\n}> {\n  // Mock AI-powered balancing algorithm\n  const startTime = Date.now();\n  \n  // Simulate processing time\n  await new Promise(resolve => setTimeout(resolve, 100));\n  \n  return {\n    equation: 'H2 + O2 → H2O', // Simplified example\n    coefficients: [2, 1, 2],\n    confidence: 0.95,\n    executionTime: Date.now() - startTime,\n    iterations: 42\n  };\n}\n\n/**\n * Plugin marketplace entry examples\n */\nexport const exampleMarketplaceEntries = [\n  {\n    metadata: createCustomBalancerPlugin().metadata,\n    downloads: 1250,\n    rating: 4.8,\n    reviews: 23,\n    verified: true,\n    downloadUrl: 'https://registry.creb.js/plugins/custom-balancer-1.0.0.tgz',\n    screenshots: [\n      'https://images.creb.js/plugins/custom-balancer/screenshot1.png',\n      'https://images.creb.js/plugins/custom-balancer/screenshot2.png'\n    ],\n    readme: 'Advanced equation balancing with AI optimization...'\n  },\n  {\n    metadata: createDataProviderPlugin().metadata,\n    downloads: 890,\n    rating: 4.6,\n    reviews: 15,\n    verified: true,\n    downloadUrl: 'https://registry.creb.js/plugins/external-data-provider-1.0.0.tgz',\n    screenshots: [\n      'https://images.creb.js/plugins/external-data/screenshot1.png'\n    ],\n    readme: 'Seamless integration with ChemSpider database...'\n  },\n  {\n    metadata: createSpecializedCalculatorPlugin().metadata,\n    downloads: 2100,\n    rating: 4.9,\n    reviews: 42,\n    verified: true,\n    downloadUrl: 'https://registry.creb.js/plugins/advanced-calculator-1.0.0.tgz',\n    screenshots: [\n      'https://images.creb.js/plugins/advanced-calc/screenshot1.png',\n      'https://images.creb.js/plugins/advanced-calc/screenshot2.png',\n      'https://images.creb.js/plugins/advanced-calc/screenshot3.png'\n    ],\n    readme: 'Professional-grade chemistry calculations for research and education...'\n  }\n];\n","/**\n * @fileoverview Telemetry and Logging Type Definitions\n * @module @creb/core/telemetry/types\n * @version 1.0.0\n * @author CREB Team\n * \n * Comprehensive type definitions for structured logging, metrics, and telemetry.\n * Supports correlation IDs, performance tracking, and multi-destination logging.\n */\n\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'fatal';\nexport type LogFormat = 'json' | 'text' | 'structured';\nexport type MetricType = 'counter' | 'gauge' | 'histogram' | 'timer';\n\n/**\n * Correlation ID for request/operation tracking\n */\nexport type CorrelationId = string & { readonly _brand: 'CorrelationId' };\n\n/**\n * Timestamp with high precision\n */\nexport type Timestamp = number & { readonly _brand: 'Timestamp' };\n\n/**\n * Log entry structure for consistent formatting\n */\nexport interface LogEntry {\n  /** Unique log entry identifier */\n  id: string;\n  /** Log severity level */\n  level: LogLevel;\n  /** Primary log message */\n  message: string;\n  /** High-precision timestamp */\n  timestamp: Timestamp;\n  /** Correlation ID for request tracking */\n  correlationId: CorrelationId;\n  /** Logger name/category */\n  logger: string;\n  /** Operation context */\n  context: LogContext;\n  /** Additional metadata */\n  metadata?: Record<string, unknown>;\n  /** Stack trace for errors */\n  stack?: string;\n  /** Error information */\n  error?: ErrorInfo;\n  /** Performance metrics */\n  metrics?: PerformanceMetrics;\n}\n\n/**\n * Contextual information for log entries\n */\nexport interface LogContext {\n  /** Operation being performed */\n  operation: string;\n  /** Module/component name */\n  module: string;\n  /** User/session identifier */\n  userId?: string;\n  /** Request identifier */\n  requestId?: string;\n  /** Additional context data */\n  data?: Record<string, unknown>;\n}\n\n/**\n * Error information structure\n */\nexport interface ErrorInfo {\n  /** Error name/type */\n  name: string;\n  /** Error message */\n  message: string;\n  /** Error code */\n  code?: string | number;\n  /** Stack trace */\n  stack?: string;\n  /** Inner/cause error */\n  cause?: ErrorInfo;\n  /** Additional error metadata */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Performance metrics structure\n */\nexport interface PerformanceMetrics {\n  /** Operation duration in milliseconds */\n  duration?: number;\n  /** Memory usage in bytes */\n  memoryUsage?: number;\n  /** CPU usage percentage */\n  cpuUsage?: number;\n  /** Number of operations */\n  operationCount?: number;\n  /** Cache hit ratio */\n  cacheHitRatio?: number;\n  /** Custom metrics */\n  custom?: Record<string, number>;\n}\n\n/**\n * Metric definition and value\n */\nexport interface Metric {\n  /** Metric name */\n  name: string;\n  /** Metric type */\n  type: MetricType;\n  /** Metric value */\n  value: number;\n  /** Metric tags/labels */\n  tags?: Record<string, string>;\n  /** Timestamp when metric was recorded */\n  timestamp: Timestamp;\n  /** Metric unit */\n  unit?: string;\n  /** Metric description */\n  description?: string;\n}\n\n/**\n * Logger configuration options\n */\nexport interface LoggerConfig {\n  /** Logger name */\n  name: string;\n  /** Minimum log level */\n  level: LogLevel;\n  /** Log format */\n  format: LogFormat;\n  /** Output destinations */\n  destinations: LogDestination[];\n  /** Enable/disable logging */\n  enabled: boolean;\n  /** Include stack traces for errors */\n  includeStack: boolean;\n  /** Include performance metrics */\n  includeMetrics: boolean;\n  /** Buffer size for batching */\n  bufferSize?: number;\n  /** Flush interval in milliseconds */\n  flushInterval?: number;\n}\n\n/**\n * Log destination configuration\n */\nexport interface LogDestination {\n  /** Destination type */\n  type: 'console' | 'file' | 'http' | 'custom';\n  /** Destination-specific options */\n  options: Record<string, unknown>;\n  /** Minimum log level for this destination */\n  level?: LogLevel;\n  /** Custom formatter function */\n  formatter?: LogFormatter;\n  /** Enable/disable this destination */\n  enabled: boolean;\n}\n\n/**\n * Log formatter function type\n */\nexport type LogFormatter = (entry: LogEntry) => string;\n\n/**\n * Log filter function type\n */\nexport type LogFilter = (entry: LogEntry) => boolean;\n\n/**\n * Metric collector interface\n */\nexport interface MetricCollector {\n  /** Collect and return current metrics */\n  collect(): Promise<Metric[]>;\n  /** Reset metrics */\n  reset(): void;\n  /** Get metric by name */\n  getMetric(name: string): Metric | undefined;\n}\n\n/**\n * Context propagation interface\n */\nexport interface ContextProvider {\n  /** Get current context */\n  getContext(): LogContext;\n  /** Set context */\n  setContext(context: Partial<LogContext>): void;\n  /** Create child context */\n  createChild(context: Partial<LogContext>): ContextProvider;\n  /** Clear context */\n  clear(): void;\n}\n\n/**\n * Telemetry events\n */\nexport interface TelemetryEvents {\n  /** Log entry created */\n  'log:created': LogEntry;\n  /** Metric recorded */\n  'metric:recorded': Metric;\n  /** Context changed */\n  'context:changed': LogContext;\n  /** Error occurred */\n  'error:occurred': ErrorInfo;\n  /** Performance measurement */\n  'performance:measured': PerformanceMetrics;\n}\n\n/**\n * Logger interface\n */\nexport interface ILogger {\n  /** Debug level logging */\n  debug(message: string, context?: Partial<LogContext>, metadata?: Record<string, unknown>): void;\n  /** Info level logging */\n  info(message: string, context?: Partial<LogContext>, metadata?: Record<string, unknown>): void;\n  /** Warning level logging */\n  warn(message: string, context?: Partial<LogContext>, metadata?: Record<string, unknown>): void;\n  /** Error level logging */\n  error(message: string, error?: Error, context?: Partial<LogContext>, metadata?: Record<string, unknown>): void;\n  /** Fatal level logging */\n  fatal(message: string, error?: Error, context?: Partial<LogContext>, metadata?: Record<string, unknown>): void;\n  \n  /** Start performance timer */\n  startTimer(name: string): () => void;\n  /** Record metric */\n  metric(name: string, value: number, type: MetricType, tags?: Record<string, string>): void;\n  \n  /** Create child logger with context */\n  child(context: Partial<LogContext>): ILogger;\n  /** Set correlation ID */\n  setCorrelationId(id: CorrelationId): void;\n  /** Get current correlation ID */\n  getCorrelationId(): CorrelationId | undefined;\n}\n\n/**\n * Log level hierarchy for filtering\n */\nexport const LOG_LEVELS: Record<LogLevel, number> = {\n  debug: 0,\n  info: 1,\n  warn: 2,\n  error: 3,\n  fatal: 4,\n} as const;\n\n/**\n * Default performance thresholds\n */\nexport const PERFORMANCE_THRESHOLDS = {\n  /** Slow operation threshold in ms */\n  SLOW_OPERATION: 1000,\n  /** Very slow operation threshold in ms */\n  VERY_SLOW_OPERATION: 5000,\n  /** High memory usage threshold in bytes */\n  HIGH_MEMORY_USAGE: 100 * 1024 * 1024, // 100MB\n  /** High CPU usage threshold (percentage) */\n  HIGH_CPU_USAGE: 80,\n} as const;\n\n/**\n * Telemetry configuration\n */\nexport interface TelemetryConfig {\n  /** Global logger configuration */\n  logger: LoggerConfig;\n  /** Metrics collection configuration */\n  metrics: {\n    enabled: boolean;\n    collectInterval: number;\n    retentionPeriod: number;\n  };\n  /** Context configuration */\n  context: {\n    enabled: boolean;\n    propagateAcrossAsync: boolean;\n  };\n  /** Performance monitoring configuration */\n  performance: {\n    enabled: boolean;\n    sampleRate: number;\n    thresholds: typeof PERFORMANCE_THRESHOLDS;\n  };\n}\n\n/**\n * Type guards for runtime type checking\n */\nexport const isLogLevel = (value: unknown): value is LogLevel => {\n  return typeof value === 'string' && value in LOG_LEVELS;\n};\n\nexport const isLogEntry = (value: unknown): value is LogEntry => {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'id' in value &&\n    'level' in value &&\n    'message' in value &&\n    'timestamp' in value &&\n    'correlationId' in value\n  );\n};\n\nexport const isMetric = (value: unknown): value is Metric => {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'name' in value &&\n    'type' in value &&\n    'value' in value &&\n    'timestamp' in value\n  );\n};\n\n/**\n * Utility functions for creating branded types\n */\nexport const createCorrelationId = (id: string): CorrelationId => id as CorrelationId;\nexport const createTimestamp = (timestamp?: number): Timestamp => (timestamp ?? Date.now()) as Timestamp;\n\n/**\n * Default telemetry configuration\n */\nexport const DEFAULT_TELEMETRY_CONFIG: TelemetryConfig = {\n  logger: {\n    name: 'creb',\n    level: 'info',\n    format: 'json',\n    destinations: [\n      {\n        type: 'console',\n        options: {},\n        enabled: true,\n      },\n    ],\n    enabled: true,\n    includeStack: true,\n    includeMetrics: true,\n    bufferSize: 100,\n    flushInterval: 1000,\n  },\n  metrics: {\n    enabled: true,\n    collectInterval: 10000, // 10 seconds\n    retentionPeriod: 3600000, // 1 hour\n  },\n  context: {\n    enabled: true,\n    propagateAcrossAsync: true,\n  },\n  performance: {\n    enabled: true,\n    sampleRate: 0.1, // 10% sampling\n    thresholds: PERFORMANCE_THRESHOLDS,\n  },\n};\n","/**\n * @fileoverview Context Management and Propagation\n * @module @creb/core/telemetry/Context\n * @version 1.0.0\n * @author CREB Team\n * \n * Provides context propagation for correlation IDs and logging context\n * across async operations and module boundaries.\n */\n\nimport { randomUUID } from 'crypto';\nimport { AsyncLocalStorage } from 'async_hooks';\nimport { \n  LogContext, \n  CorrelationId, \n  ContextProvider,\n  createCorrelationId,\n  Timestamp,\n  createTimestamp\n} from './types';\n\n/**\n * Context storage using Node.js AsyncLocalStorage for automatic propagation\n */\nconst contextStorage = new AsyncLocalStorage<ContextState>();\n\n/**\n * Internal context state\n */\ninterface ContextState {\n  correlationId: CorrelationId;\n  context: LogContext;\n  createdAt: Timestamp;\n  parentId?: CorrelationId;\n}\n\n/**\n * Context Manager class for managing logging context and correlation IDs\n */\nexport class ContextManager implements ContextProvider {\n  private static instance: ContextManager;\n  private defaultContext: LogContext;\n\n  private constructor() {\n    this.defaultContext = {\n      operation: 'unknown',\n      module: 'creb',\n    };\n  }\n\n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): ContextManager {\n    if (!ContextManager.instance) {\n      ContextManager.instance = new ContextManager();\n    }\n    return ContextManager.instance;\n  }\n\n  /**\n   * Get current context from async storage\n   */\n  public getContext(): LogContext {\n    const state = contextStorage.getStore();\n    if (state) {\n      return { ...state.context };\n    }\n    return { ...this.defaultContext };\n  }\n\n  /**\n   * Set context in current async context\n   */\n  public setContext(context: Partial<LogContext>): void {\n    const current = this.getCurrentState();\n    const updatedContext = { ...current.context, ...context };\n    \n    const newState: ContextState = {\n      ...current,\n      context: updatedContext,\n    };\n\n    // Run in new context with updated state\n    contextStorage.run(newState, () => {\n      // Context is now set for this async scope\n    });\n  }\n\n  /**\n   * Create child context with inheritance\n   */\n  public createChild(context: Partial<LogContext>): ContextProvider {\n    const childManager = new ChildContextManager(this, context);\n    return childManager;\n  }\n\n  /**\n   * Clear current context\n   */\n  public clear(): void {\n    contextStorage.run(this.createDefaultState(), () => {\n      // Context cleared\n    });\n  }\n\n  /**\n   * Get current correlation ID\n   */\n  public getCorrelationId(): CorrelationId {\n    const state = contextStorage.getStore();\n    return state?.correlationId ?? this.generateCorrelationId();\n  }\n\n  /**\n   * Set correlation ID\n   */\n  public setCorrelationId(id: CorrelationId): void {\n    const current = this.getCurrentState();\n    const newState: ContextState = {\n      ...current,\n      correlationId: id,\n    };\n\n    contextStorage.run(newState, () => {\n      // Correlation ID set\n    });\n  }\n\n  /**\n   * Run function with specific context\n   */\n  public runWithContext<T>(\n    context: Partial<LogContext>, \n    fn: () => T,\n    correlationId?: CorrelationId\n  ): T {\n    const currentState = this.getCurrentState();\n    const newState: ContextState = {\n      correlationId: correlationId ?? this.generateCorrelationId(),\n      context: { ...currentState.context, ...context },\n      createdAt: createTimestamp(),\n      parentId: currentState.correlationId,\n    };\n\n    return contextStorage.run(newState, fn);\n  }\n\n  /**\n   * Run async function with specific context\n   */\n  public async runWithContextAsync<T>(\n    context: Partial<LogContext>,\n    fn: () => Promise<T>,\n    correlationId?: CorrelationId\n  ): Promise<T> {\n    const currentState = this.getCurrentState();\n    const newState: ContextState = {\n      correlationId: correlationId ?? this.generateCorrelationId(),\n      context: { ...currentState.context, ...context },\n      createdAt: createTimestamp(),\n      parentId: currentState.correlationId,\n    };\n\n    return contextStorage.run(newState, fn);\n  }\n\n  /**\n   * Get context trace (current + parent contexts)\n   */\n  public getContextTrace(): ContextTrace {\n    const current = this.getCurrentState();\n    return {\n      current: current.correlationId,\n      parent: current.parentId,\n      depth: this.calculateDepth(current),\n      createdAt: current.createdAt,\n      context: current.context,\n    };\n  }\n\n  /**\n   * Generate new correlation ID\n   */\n  private generateCorrelationId(): CorrelationId {\n    return createCorrelationId(`creb-${randomUUID()}`);\n  }\n\n  /**\n   * Get current state or create default\n   */\n  private getCurrentState(): ContextState {\n    return contextStorage.getStore() ?? this.createDefaultState();\n  }\n\n  /**\n   * Create default context state\n   */\n  private createDefaultState(): ContextState {\n    return {\n      correlationId: this.generateCorrelationId(),\n      context: { ...this.defaultContext },\n      createdAt: createTimestamp(),\n    };\n  }\n\n  /**\n   * Calculate context depth for tracing\n   */\n  private calculateDepth(state: ContextState): number {\n    let depth = 0;\n    let current = state;\n    \n    // This is a simplified version - in a real implementation,\n    // you might want to track this more efficiently\n    while (current.parentId && depth < 100) { // Prevent infinite loops\n      depth++;\n      // In a full implementation, you'd need to track parent states\n      break;\n    }\n    \n    return depth;\n  }\n}\n\n/**\n * Child context manager for scoped contexts\n */\nclass ChildContextManager implements ContextProvider {\n  constructor(\n    private parent: ContextManager,\n    private childContext: Partial<LogContext>\n  ) {}\n\n  public getContext(): LogContext {\n    const parentContext = this.parent.getContext();\n    return { ...parentContext, ...this.childContext };\n  }\n\n  public setContext(context: Partial<LogContext>): void {\n    this.childContext = { ...this.childContext, ...context };\n  }\n\n  public createChild(context: Partial<LogContext>): ContextProvider {\n    const mergedContext = { ...this.childContext, ...context };\n    return new ChildContextManager(this.parent, mergedContext);\n  }\n\n  public clear(): void {\n    this.childContext = {};\n  }\n}\n\n/**\n * Context trace information\n */\nexport interface ContextTrace {\n  current: CorrelationId;\n  parent?: CorrelationId;\n  depth: number;\n  createdAt: Timestamp;\n  context: LogContext;\n}\n\n/**\n * Context utilities\n */\nexport class ContextUtils {\n  /**\n   * Create correlation ID from parts\n   */\n  public static createCorrelationId(prefix?: string, suffix?: string): CorrelationId {\n    const parts = [\n      prefix ?? 'creb',\n      randomUUID(),\n      suffix,\n    ].filter(Boolean);\n    \n    return createCorrelationId(parts.join('-'));\n  }\n\n  /**\n   * Extract correlation ID from string\n   */\n  public static extractCorrelationId(value: string): CorrelationId | null {\n    // Simple validation - could be more sophisticated\n    if (value && value.length > 0) {\n      return createCorrelationId(value);\n    }\n    return null;\n  }\n\n  /**\n   * Format correlation ID for display\n   */\n  public static formatCorrelationId(id: CorrelationId, length = 8): string {\n    const idStr = String(id);\n    if (idStr.length <= length) {\n      return idStr;\n    }\n    return `${idStr.substring(0, length)}...`;\n  }\n\n  /**\n   * Merge contexts with precedence\n   */\n  public static mergeContexts(...contexts: Partial<LogContext>[]): LogContext {\n    const merged: LogContext = {\n      operation: 'unknown',\n      module: 'creb',\n    };\n\n    for (const context of contexts) {\n      Object.assign(merged, context);\n    }\n\n    return merged;\n  }\n\n  /**\n   * Validate context structure\n   */\n  public static validateContext(context: unknown): context is LogContext {\n    return (\n      typeof context === 'object' &&\n      context !== null &&\n      'operation' in context &&\n      'module' in context &&\n      typeof (context as any).operation === 'string' &&\n      typeof (context as any).module === 'string'\n    );\n  }\n}\n\n/**\n * Decorator for automatic context propagation\n */\nexport function withContext(context: Partial<LogContext>) {\n  return function <T extends (...args: any[]) => any>(\n    target: any,\n    propertyKey: string,\n    descriptor: TypedPropertyDescriptor<T>\n  ): TypedPropertyDescriptor<T> {\n    const originalMethod = descriptor.value;\n\n    if (!originalMethod) {\n      throw new Error('Decorator can only be applied to methods');\n    }\n\n    descriptor.value = function (this: any, ...args: any[]) {\n      const contextManager = ContextManager.getInstance();\n      \n      if (originalMethod.constructor.name === 'AsyncFunction') {\n        return contextManager.runWithContextAsync(context, async () => {\n          return await originalMethod.apply(this, args);\n        });\n      } else {\n        return contextManager.runWithContext(context, () => {\n          return originalMethod.apply(this, args);\n        });\n      }\n    } as T;\n\n    return descriptor;\n  };\n}\n\n/**\n * Global context manager instance\n */\nexport const globalContextManager = ContextManager.getInstance();\n\n/**\n * Convenience functions for common operations\n */\nexport const getCurrentContext = (): LogContext => globalContextManager.getContext();\nexport const getCurrentCorrelationId = (): CorrelationId => globalContextManager.getCorrelationId();\nexport const setContext = (context: Partial<LogContext>): void => globalContextManager.setContext(context);\nexport const setCorrelationId = (id: CorrelationId): void => globalContextManager.setCorrelationId(id);\nexport const runWithContext = <T>(\n  context: Partial<LogContext>,\n  fn: () => T\n): T => globalContextManager.runWithContext(context, fn);\n\nexport const runWithContextAsync = <T>(\n  context: Partial<LogContext>,\n  fn: () => Promise<T>\n): Promise<T> => globalContextManager.runWithContextAsync(context, fn);\n","/**\n * @fileoverview Performance Metrics Collection and Analysis\n * @module @creb/core/telemetry/Metrics\n * @version 1.0.0\n * @author CREB Team\n * \n * Comprehensive metrics collection system for performance monitoring,\n * automatic metric capture, and telemetry aggregation.\n */\n\nimport { EventEmitter } from 'events';\nimport { performance } from 'perf_hooks';\nimport { \n  Metric, \n  MetricType, \n  PerformanceMetrics, \n  MetricCollector,\n  Timestamp,\n  createTimestamp,\n  CorrelationId,\n  PERFORMANCE_THRESHOLDS\n} from './types';\n\n/**\n * Timer instance for measuring durations\n */\nexport interface Timer {\n  /** Timer name */\n  name: string;\n  /** Start timestamp */\n  startTime: number;\n  /** Stop the timer and record metric */\n  stop(): number;\n  /** Get elapsed time without stopping */\n  elapsed(): number;\n}\n\n/**\n * Histogram bucket for distribution metrics\n */\ninterface HistogramBucket {\n  le: number; // Less than or equal to\n  count: number;\n}\n\n/**\n * Histogram data structure\n */\ninterface HistogramData {\n  buckets: HistogramBucket[];\n  sum: number;\n  count: number;\n}\n\n/**\n * Metric value with metadata\n */\ninterface MetricValue {\n  value: number;\n  timestamp: Timestamp;\n  tags: Record<string, string>;\n  correlationId?: CorrelationId;\n}\n\n/**\n * Metrics Registry for storing and managing metrics\n */\nexport class MetricsRegistry extends EventEmitter implements MetricCollector {\n  private metrics = new Map<string, MetricValue[]>();\n  private counters = new Map<string, number>();\n  private gauges = new Map<string, number>();\n  private histograms = new Map<string, HistogramData>();\n  private timers = new Map<string, Timer>();\n  private readonly maxRetentionSize = 10000;\n  private readonly defaultBuckets = [0.1, 0.5, 1, 2.5, 5, 10, 25, 50, 100, 250, 500, 1000];\n\n  constructor() {\n    super();\n    this.setupPeriodicCleanup();\n  }\n\n  /**\n   * Record a counter metric (monotonically increasing)\n   */\n  public counter(name: string, value = 1, tags: Record<string, string> = {}): void {\n    const currentValue = this.counters.get(name) || 0;\n    const newValue = currentValue + value;\n    this.counters.set(name, newValue);\n\n    const metric: Metric = {\n      name,\n      type: 'counter',\n      value: newValue,\n      tags,\n      timestamp: createTimestamp(),\n    };\n\n    this.recordMetric(metric);\n  }\n\n  /**\n   * Record a gauge metric (arbitrary value that can go up or down)\n   */\n  public gauge(name: string, value: number, tags: Record<string, string> = {}): void {\n    this.gauges.set(name, value);\n\n    const metric: Metric = {\n      name,\n      type: 'gauge',\n      value,\n      tags,\n      timestamp: createTimestamp(),\n    };\n\n    this.recordMetric(metric);\n  }\n\n  /**\n   * Record a histogram metric (distribution of values)\n   */\n  public histogram(\n    name: string, \n    value: number, \n    tags: Record<string, string> = {},\n    buckets = this.defaultBuckets\n  ): void {\n    let histogramData = this.histograms.get(name);\n    \n    if (!histogramData) {\n      histogramData = {\n        buckets: buckets.map(le => ({ le, count: 0 })),\n        sum: 0,\n        count: 0,\n      };\n      this.histograms.set(name, histogramData);\n    }\n\n    // Update histogram\n    histogramData.sum += value;\n    histogramData.count += 1;\n\n    // Update buckets\n    for (const bucket of histogramData.buckets) {\n      if (value <= bucket.le) {\n        bucket.count += 1;\n      }\n    }\n\n    const metric: Metric = {\n      name,\n      type: 'histogram',\n      value,\n      tags: { ...tags, bucket: 'sample' },\n      timestamp: createTimestamp(),\n    };\n\n    this.recordMetric(metric);\n  }\n\n  /**\n   * Start a timer for measuring duration\n   */\n  public startTimer(name: string, tags: Record<string, string> = {}): Timer {\n    const startTime = performance.now();\n    \n    const timer: Timer = {\n      name,\n      startTime,\n      stop: () => {\n        const duration = performance.now() - startTime;\n        this.histogram(`${name}_duration_ms`, duration, tags);\n        this.timers.delete(name);\n        return duration;\n      },\n      elapsed: () => performance.now() - startTime,\n    };\n\n    this.timers.set(name, timer);\n    return timer;\n  }\n\n  /**\n   * Time a synchronous function execution\n   */\n  public time<T>(name: string, fn: () => T, tags: Record<string, string> = {}): T {\n    const timer = this.startTimer(name, tags);\n    try {\n      const result = fn();\n      return result;\n    } finally {\n      timer.stop();\n    }\n  }\n\n  /**\n   * Time an asynchronous function execution\n   */\n  public async timeAsync<T>(\n    name: string, \n    fn: () => Promise<T>, \n    tags: Record<string, string> = {}\n  ): Promise<T> {\n    const timer = this.startTimer(name, tags);\n    try {\n      const result = await fn();\n      return result;\n    } finally {\n      timer.stop();\n    }\n  }\n\n  /**\n   * Record custom performance metrics\n   */\n  public recordPerformanceMetrics(metrics: PerformanceMetrics, tags: Record<string, string> = {}): void {\n    if (metrics.duration !== undefined) {\n      this.histogram('operation_duration_ms', metrics.duration, tags);\n    }\n    \n    if (metrics.memoryUsage !== undefined) {\n      this.gauge('memory_usage_bytes', metrics.memoryUsage, tags);\n    }\n    \n    if (metrics.cpuUsage !== undefined) {\n      this.gauge('cpu_usage_percent', metrics.cpuUsage, tags);\n    }\n    \n    if (metrics.operationCount !== undefined) {\n      this.counter('operations_total', metrics.operationCount, tags);\n    }\n    \n    if (metrics.cacheHitRatio !== undefined) {\n      this.gauge('cache_hit_ratio', metrics.cacheHitRatio, tags);\n    }\n\n    // Record custom metrics\n    if (metrics.custom) {\n      for (const [key, value] of Object.entries(metrics.custom)) {\n        this.gauge(`custom_${key}`, value, tags);\n      }\n    }\n  }\n\n  /**\n   * Get current metric value\n   */\n  public getMetric(name: string): Metric | undefined {\n    const values = this.metrics.get(name);\n    if (!values || values.length === 0) {\n      return undefined;\n    }\n\n    const latest = values[values.length - 1];\n    return {\n      name,\n      type: this.inferMetricType(name),\n      value: latest.value,\n      tags: latest.tags,\n      timestamp: latest.timestamp,\n    };\n  }\n\n  /**\n   * Get all metrics values for a metric name\n   */\n  public getMetricHistory(name: string, limit?: number): MetricValue[] {\n    const values = this.metrics.get(name) || [];\n    return limit ? values.slice(-limit) : [...values];\n  }\n\n  /**\n   * Get metric statistics\n   */\n  public getMetricStats(name: string): MetricStats | undefined {\n    const values = this.metrics.get(name);\n    if (!values || values.length === 0) {\n      return undefined;\n    }\n\n    const numericValues = values.map(v => v.value);\n    const sorted = [...numericValues].sort((a, b) => a - b);\n    \n    return {\n      count: values.length,\n      min: Math.min(...numericValues),\n      max: Math.max(...numericValues),\n      mean: numericValues.reduce((a, b) => a + b, 0) / numericValues.length,\n      median: this.calculateMedian(sorted),\n      p95: this.calculatePercentile(sorted, 0.95),\n      p99: this.calculatePercentile(sorted, 0.99),\n      stdDev: this.calculateStandardDeviation(numericValues),\n    };\n  }\n\n  /**\n   * Collect all current metrics\n   */\n  public async collect(): Promise<Metric[]> {\n    const metrics: Metric[] = [];\n\n    // Collect counters\n    this.counters.forEach((value, name) => {\n      metrics.push({\n        name,\n        type: 'counter',\n        value,\n        timestamp: createTimestamp(),\n        tags: {},\n      });\n    });\n\n    // Collect gauges\n    this.gauges.forEach((value, name) => {\n      metrics.push({\n        name,\n        type: 'gauge',\n        value,\n        timestamp: createTimestamp(),\n        tags: {},\n      });\n    });\n\n    // Collect histograms\n    this.histograms.forEach((histogram, name) => {\n      // Add histogram buckets\n      for (const bucket of histogram.buckets) {\n        metrics.push({\n          name: `${name}_bucket`,\n          type: 'histogram',\n          value: bucket.count,\n          timestamp: createTimestamp(),\n          tags: { le: bucket.le.toString() },\n        });\n      }\n\n      // Add histogram sum and count\n      metrics.push({\n        name: `${name}_sum`,\n        type: 'histogram',\n        value: histogram.sum,\n        timestamp: createTimestamp(),\n        tags: {},\n      });\n\n      metrics.push({\n        name: `${name}_count`,\n        type: 'histogram',\n        value: histogram.count,\n        timestamp: createTimestamp(),\n        tags: {},\n      });\n    });\n\n    return metrics;\n  }\n\n  /**\n   * Reset all metrics\n   */\n  public reset(): void {\n    this.metrics.clear();\n    this.counters.clear();\n    this.gauges.clear();\n    this.histograms.clear();\n    this.timers.clear();\n    this.emit('metrics:reset');\n  }\n\n  /**\n   * Reset specific metric\n   */\n  public resetMetric(name: string): void {\n    this.metrics.delete(name);\n    this.counters.delete(name);\n    this.gauges.delete(name);\n    this.histograms.delete(name);\n    this.timers.delete(name);\n    this.emit('metrics:reset', name);\n  }\n\n  /**\n   * Get system performance metrics\n   */\n  public getSystemMetrics(): PerformanceMetrics {\n    const memoryUsage = process.memoryUsage();\n    const cpuUsage = process.cpuUsage();\n    \n    return {\n      memoryUsage: memoryUsage.heapUsed,\n      cpuUsage: (cpuUsage.user + cpuUsage.system) / 1000000, // Convert to milliseconds\n      operationCount: this.metrics.size,\n      custom: {\n        heap_total: memoryUsage.heapTotal,\n        heap_used: memoryUsage.heapUsed,\n        external: memoryUsage.external,\n        rss: memoryUsage.rss,\n        gc_duration: 0, // Would need to hook into GC events\n      },\n    };\n  }\n\n  /**\n   * Check performance thresholds and emit alerts\n   */\n  public checkThresholds(): void {\n    const systemMetrics = this.getSystemMetrics();\n    \n    if (systemMetrics.memoryUsage && systemMetrics.memoryUsage > PERFORMANCE_THRESHOLDS.HIGH_MEMORY_USAGE) {\n      this.emit('threshold:exceeded', {\n        metric: 'memory_usage',\n        value: systemMetrics.memoryUsage,\n        threshold: PERFORMANCE_THRESHOLDS.HIGH_MEMORY_USAGE,\n      });\n    }\n\n    if (systemMetrics.cpuUsage && systemMetrics.cpuUsage > PERFORMANCE_THRESHOLDS.HIGH_CPU_USAGE) {\n      this.emit('threshold:exceeded', {\n        metric: 'cpu_usage',\n        value: systemMetrics.cpuUsage,\n        threshold: PERFORMANCE_THRESHOLDS.HIGH_CPU_USAGE,\n      });\n    }\n  }\n\n  /**\n   * Record a metric value internally\n   */\n  private recordMetric(metric: Metric): void {\n    let values = this.metrics.get(metric.name);\n    if (!values) {\n      values = [];\n      this.metrics.set(metric.name, values);\n    }\n\n    values.push({\n      value: metric.value,\n      timestamp: metric.timestamp,\n      tags: metric.tags || {},\n    });\n\n    // Limit retention size\n    if (values.length > this.maxRetentionSize) {\n      values.splice(0, values.length - this.maxRetentionSize);\n    }\n\n    this.emit('metric:recorded', metric);\n  }\n\n  /**\n   * Infer metric type from name patterns\n   */\n  private inferMetricType(name: string): MetricType {\n    if (name.includes('_total') || name.includes('_count')) {\n      return 'counter';\n    }\n    if (name.includes('_duration') || name.includes('_bucket')) {\n      return 'histogram';\n    }\n    if (name.includes('_timer')) {\n      return 'timer';\n    }\n    return 'gauge';\n  }\n\n  /**\n   * Calculate median value\n   */\n  private calculateMedian(sorted: number[]): number {\n    const mid = Math.floor(sorted.length / 2);\n    return sorted.length % 2 === 0\n      ? (sorted[mid - 1] + sorted[mid]) / 2\n      : sorted[mid];\n  }\n\n  /**\n   * Calculate percentile value\n   */\n  private calculatePercentile(sorted: number[], percentile: number): number {\n    const index = Math.ceil(sorted.length * percentile) - 1;\n    return sorted[Math.max(0, index)];\n  }\n\n  /**\n   * Calculate standard deviation\n   */\n  private calculateStandardDeviation(values: number[]): number {\n    const mean = values.reduce((a, b) => a + b, 0) / values.length;\n    const squaredDiffs = values.map(value => Math.pow(value - mean, 2));\n    const avgSquaredDiff = squaredDiffs.reduce((a, b) => a + b, 0) / values.length;\n    return Math.sqrt(avgSquaredDiff);\n  }\n\n  /**\n   * Setup periodic cleanup of old metrics\n   */\n  private setupPeriodicCleanup(): void {\n    const cleanupInterval = 5 * 60 * 1000; // 5 minutes\n    \n    setInterval(() => {\n      const cutoff = Date.now() - (60 * 60 * 1000); // 1 hour ago\n      \n      this.metrics.forEach((values, name) => {\n        const filtered = values.filter(v => v.timestamp > cutoff);\n        if (filtered.length !== values.length) {\n          this.metrics.set(name, filtered);\n        }\n      });\n    }, cleanupInterval);\n  }\n}\n\n/**\n * Metric statistics interface\n */\nexport interface MetricStats {\n  count: number;\n  min: number;\n  max: number;\n  mean: number;\n  median: number;\n  p95: number;\n  p99: number;\n  stdDev: number;\n}\n\n/**\n * Performance profiler for automatic metric capture\n */\nexport class PerformanceProfiler {\n  private readonly metrics: MetricsRegistry;\n  private readonly enabled: boolean;\n\n  constructor(metrics: MetricsRegistry, enabled = true) {\n    this.metrics = metrics;\n    this.enabled = enabled;\n  }\n\n  /**\n   * Profile a function execution\n   */\n  public profile<T>(\n    name: string,\n    fn: () => T,\n    tags: Record<string, string> = {}\n  ): T {\n    if (!this.enabled) {\n      return fn();\n    }\n\n    return this.metrics.time(name, fn, tags);\n  }\n\n  /**\n   * Profile an async function execution\n   */\n  public async profileAsync<T>(\n    name: string,\n    fn: () => Promise<T>,\n    tags: Record<string, string> = {}\n  ): Promise<T> {\n    if (!this.enabled) {\n      return await fn();\n    }\n\n    return await this.metrics.timeAsync(name, fn, tags);\n  }\n\n  /**\n   * Create a profiling decorator\n   */\n  public createProfileDecorator(name?: string, tags: Record<string, string> = {}) {\n    const metrics = this.metrics;\n    \n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n      const metricName = name || `${target.constructor.name}.${propertyKey}`;\n      const originalMethod = descriptor.value;\n\n      descriptor.value = function (...args: any[]) {\n        if (originalMethod.constructor.name === 'AsyncFunction') {\n          return metrics.timeAsync(metricName, async () => {\n            return await originalMethod.apply(this, args);\n          }, tags);\n        } else {\n          return metrics.time(metricName, () => {\n            return originalMethod.apply(this, args);\n          }, tags);\n        }\n      };\n\n      return descriptor;\n    };\n  }\n}\n\n/**\n * Global metrics registry instance\n */\nexport const globalMetrics = new MetricsRegistry();\n\n/**\n * Global performance profiler\n */\nexport const globalProfiler = new PerformanceProfiler(globalMetrics);\n\n/**\n * Convenience functions for metrics\n */\nexport const counter = (name: string, value?: number, tags?: Record<string, string>) => \n  globalMetrics.counter(name, value, tags);\n\nexport const gauge = (name: string, value: number, tags?: Record<string, string>) => \n  globalMetrics.gauge(name, value, tags);\n\nexport const histogram = (name: string, value: number, tags?: Record<string, string>) => \n  globalMetrics.histogram(name, value, tags);\n\nexport const startTimer = (name: string, tags?: Record<string, string>) => \n  globalMetrics.startTimer(name, tags);\n\nexport const time = <T>(name: string, fn: () => T, tags?: Record<string, string>) => \n  globalMetrics.time(name, fn, tags);\n\nexport const timeAsync = <T>(name: string, fn: () => Promise<T>, tags?: Record<string, string>) => \n  globalMetrics.timeAsync(name, fn, tags);\n\n/**\n * Profile decorator for automatic method timing\n */\nexport const Profile = (name?: string, tags: Record<string, string> = {}) => \n  globalProfiler.createProfileDecorator(name, tags);\n","/**\n * Structured Logger Implementation\n * \n * Provides structured JSON logging with context propagation, performance metrics,\n * and zero-overhead when disabled.\n */\n\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  OFF = 4\n}\n\nexport interface LogEntry {\n  timestamp: string;\n  level: string;\n  message: string;\n  context?: Record<string, any>;\n  metadata?: Record<string, any>;\n  correlationId?: string;\n  module?: string;\n  error?: {\n    name: string;\n    message: string;\n    stack?: string;\n  };\n}\n\nexport interface LogDestination {\n  write(entry: LogEntry): void;\n  flush?(): void;\n}\n\nexport interface LogFilter {\n  shouldLog(entry: LogEntry): boolean;\n}\n\nexport interface LoggerConfig {\n  level: LogLevel;\n  destinations: LogDestination[];\n  filters?: LogFilter[];\n  enablePerformance?: boolean;\n  module?: string;\n}\n\nexport class ConsoleDestination implements LogDestination {\n  write(entry: LogEntry): void {\n    this.writeToConsole(JSON.stringify(entry));\n  }\n\n  private writeToConsole(message: string): void {\n    try {\n      console.log(message);\n    } catch (error: any) {\n      // Handle EPIPE errors gracefully (broken pipe when output is piped)\n      if (error?.code === 'EPIPE') {\n        // Silently ignore EPIPE errors to prevent crash\n        return;\n      }\n      // Re-throw other errors\n      throw error;\n    }\n  }\n}\n\nexport class FileDestination implements LogDestination {\n  constructor(private filePath: string) {}\n\n  write(entry: LogEntry): void {\n    // Implementation would use fs.appendFile in real scenario\n    // For demo purposes, we'll use console with file prefix\n    console.log(`[FILE:${this.filePath}] ${JSON.stringify(entry)}`);\n  }\n}\n\nexport class LevelFilter implements LogFilter {\n  constructor(private minLevel: LogLevel) {}\n\n  shouldLog(entry: LogEntry): boolean {\n    const entryLevel = LogLevel[entry.level as keyof typeof LogLevel];\n    return entryLevel >= this.minLevel;\n  }\n}\n\nexport class ModuleFilter implements LogFilter {\n  constructor(private modules: string[]) {}\n\n  shouldLog(entry: LogEntry): boolean {\n    if (!entry.module) return true;\n    return this.modules.includes(entry.module);\n  }\n}\n\nexport class StructuredLogger {\n  private static globalLogger: StructuredLogger | null = null;\n  private children = new Map<string, StructuredLogger>();\n\n  constructor(private config: LoggerConfig) {}\n\n  static getGlobalLogger(): StructuredLogger {\n    if (!StructuredLogger.globalLogger) {\n      StructuredLogger.globalLogger = LoggerFactory.createLogger({\n        level: LogLevel.INFO,\n        destinations: [new ConsoleDestination()]\n      });\n    }\n    return StructuredLogger.globalLogger;\n  }\n\n  static setGlobalLogger(logger: StructuredLogger): void {\n    StructuredLogger.globalLogger = logger;\n  }\n\n  child(module: string, context?: Record<string, any>): StructuredLogger {\n    const key = `${module}-${JSON.stringify(context || {})}`;\n    \n    if (!this.children.has(key)) {\n      const childConfig: LoggerConfig = {\n        ...this.config,\n        module\n      };\n      \n      const child = new StructuredLogger(childConfig);\n      child.children = this.children; // Share children map\n      this.children.set(key, child);\n    }\n    \n    return this.children.get(key)!;\n  }\n\n  debug(message: string, context?: Record<string, any>, metadata?: Record<string, any>): void {\n    this.log(LogLevel.DEBUG, message, context, metadata);\n  }\n\n  info(message: string, context?: Record<string, any>, metadata?: Record<string, any>): void {\n    this.log(LogLevel.INFO, message, context, metadata);\n  }\n\n  warn(message: string, context?: Record<string, any>, metadata?: Record<string, any>): void {\n    this.log(LogLevel.WARN, message, context, metadata);\n  }\n\n  error(message: string, error?: Error | Record<string, any>, metadata?: Record<string, any>): void {\n    let context: Record<string, any> | undefined;\n    let errorObj: { name: string; message: string; stack?: string } | undefined;\n\n    if (error instanceof Error) {\n      errorObj = {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      };\n    } else if (error) {\n      context = error;\n    }\n\n    const entry = this.createLogEntry(LogLevel.ERROR, message, context, metadata);\n    if (errorObj) {\n      entry.error = errorObj;\n    }\n\n    this.writeEntry(entry);\n  }\n\n  performance<T>(operation: string, fn: () => T, context?: Record<string, any>): T {\n    if (!this.config.enablePerformance) {\n      return fn();\n    }\n\n    const startTime = process.hrtime.bigint();\n    const start = Date.now();\n\n    try {\n      const result = fn();\n      const endTime = process.hrtime.bigint();\n      const duration = Number(endTime - startTime) / 1000000; // Convert to milliseconds\n\n      this.info(`Performance: ${operation}`, {\n        ...context,\n        operation,\n        duration_ms: Math.round(duration * 100) / 100,\n        timestamp: new Date(start).toISOString()\n      }, {\n        type: 'performance',\n        start_time: start,\n        end_time: Date.now()\n      });\n\n      return result;\n    } catch (error) {\n      const endTime = process.hrtime.bigint();\n      const duration = Number(endTime - startTime) / 1000000;\n\n      this.error(`Performance: ${operation} failed`, error instanceof Error ? error : new Error(String(error)), {\n        operation,\n        duration_ms: Math.round(duration * 100) / 100,\n        timestamp: new Date(start).toISOString(),\n        type: 'performance_error'\n      });\n\n      throw error;\n    }\n  }\n\n  async performanceAsync<T>(operation: string, fn: () => Promise<T>, context?: Record<string, any>): Promise<T> {\n    if (!this.config.enablePerformance) {\n      return fn();\n    }\n\n    const startTime = process.hrtime.bigint();\n    const start = Date.now();\n\n    try {\n      const result = await fn();\n      const endTime = process.hrtime.bigint();\n      const duration = Number(endTime - startTime) / 1000000;\n\n      this.info(`Performance: ${operation}`, {\n        ...context,\n        operation,\n        duration_ms: Math.round(duration * 100) / 100,\n        timestamp: new Date(start).toISOString()\n      }, {\n        type: 'performance_async',\n        start_time: start,\n        end_time: Date.now()\n      });\n\n      return result;\n    } catch (error) {\n      const endTime = process.hrtime.bigint();\n      const duration = Number(endTime - startTime) / 1000000;\n\n      this.error(`Performance: ${operation} failed`, error instanceof Error ? error : new Error(String(error)), {\n        operation,\n        duration_ms: Math.round(duration * 100) / 100,\n        timestamp: new Date(start).toISOString(),\n        type: 'performance_async_error'\n      });\n\n      throw error;\n    }\n  }\n\n  flush(): void {\n    this.config.destinations.forEach(dest => {\n      if (dest.flush) {\n        dest.flush();\n      }\n    });\n  }\n\n  private log(level: LogLevel, message: string, context?: Record<string, any>, metadata?: Record<string, any>): void {\n    const entry = this.createLogEntry(level, message, context, metadata);\n    this.writeEntry(entry);\n  }\n\n  private createLogEntry(level: LogLevel, message: string, context?: Record<string, any>, metadata?: Record<string, any>): LogEntry {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level: LogLevel[level],\n      message,\n      context,\n      metadata,\n      module: this.config.module\n    };\n\n    // Add correlation ID from context if available\n    // This would integrate with Context.ts in a full implementation\n    try {\n      const { getCurrentContext } = require('./Context');\n      const currentContext = getCurrentContext();\n      if (currentContext?.correlationId) {\n        entry.correlationId = currentContext.correlationId;\n      }\n    } catch {\n      // Context module not available or error - continue without correlation ID\n    }\n\n    return entry;\n  }\n\n  private writeEntry(entry: LogEntry): void {\n    // Apply filters\n    if (this.config.filters) {\n      for (const filter of this.config.filters) {\n        if (!filter.shouldLog(entry)) {\n          return;\n        }\n      }\n    }\n\n    // Write to all destinations\n    this.config.destinations.forEach(dest => {\n      try {\n        dest.write(entry);\n      } catch (error) {\n        // Don't let destination errors crash the application\n        console.error('Logger destination error:', error);\n      }\n    });\n  }\n}\n\nexport class LoggerFactory {\n  static createLogger(config: LoggerConfig): StructuredLogger {\n    return new StructuredLogger(config);\n  }\n\n  static createConsoleLogger(level: LogLevel = LogLevel.INFO): StructuredLogger {\n    return new StructuredLogger({\n      level,\n      destinations: [new ConsoleDestination()],\n      filters: [new LevelFilter(level)],\n      enablePerformance: true\n    });\n  }\n\n  static createFileLogger(filePath: string, level: LogLevel = LogLevel.INFO): StructuredLogger {\n    return new StructuredLogger({\n      level,\n      destinations: [new FileDestination(filePath)],\n      filters: [new LevelFilter(level)],\n      enablePerformance: true\n    });\n  }\n\n  static createMultiDestinationLogger(\n    destinations: LogDestination[],\n    level: LogLevel = LogLevel.INFO,\n    filters?: LogFilter[]\n  ): StructuredLogger {\n    return new StructuredLogger({\n      level,\n      destinations,\n      filters: filters || [new LevelFilter(level)],\n      enablePerformance: true\n    });\n  }\n}\n\n// Convenience exports\nexport const logger = StructuredLogger.getGlobalLogger();\nexport const globalLogger = logger; // Alias for compatibility\nexport const createLogger = LoggerFactory.createLogger;\nexport const createConsoleLogger = LoggerFactory.createConsoleLogger;\nexport const createFileLogger = LoggerFactory.createFileLogger;\nexport const createMultiDestinationLogger = LoggerFactory.createMultiDestinationLogger;\n\n// Global convenience functions that tests expect\nexport const debug = (message: string, context?: Record<string, any>, metadata?: Record<string, any>) => \n  logger.debug(message, context, metadata);\n\nexport const info = (message: string, context?: Record<string, any>, metadata?: Record<string, any>) => \n  logger.info(message, context, metadata);\n\nexport const warn = (message: string, context?: Record<string, any>, metadata?: Record<string, any>) => \n  logger.warn(message, context, metadata);\n\nexport const error = (message: string, error?: Error | Record<string, any>, metadata?: Record<string, any>) => \n  logger.error(message, error, metadata);\n\nexport const fatal = (message: string, error?: Error | Record<string, any>, metadata?: Record<string, any>) => \n  logger.error(message, error, metadata); // Map fatal to error since we don't have fatal level\n\n// Metrics/timer functions that tests expect (delegate to global metrics)\nexport const startTimer = (name: string, tags?: Record<string, string>) => {\n  // Simple timer implementation for compatibility\n  const start = process.hrtime.bigint();\n  return () => {\n    const end = process.hrtime.bigint();\n    const duration = Number(end - start) / 1000000; // Convert to milliseconds\n    logger.info(`Timer: ${name}`, undefined, {\n      type: 'timer',\n      duration_ms: Math.round(duration * 100) / 100,\n      tags\n    });\n    return duration;\n  };\n};\n\nexport const metric = (name: string, value: number, type: string, tags?: Record<string, string>) => {\n  logger.info(`Metric: ${name}`, undefined, {\n    type: 'metric',\n    metric_name: name,\n    metric_value: value,\n    metric_type: type,\n    tags\n  });\n};\n","/**\n * @fileoverview Telemetry Module Exports\n * @module @creb/core/telemetry\n * @version 1.0.0\n * @author CREB Team\n * \n * Main exports for the CREB telemetry system including structured logging,\n * metrics collection, context management, and performance monitoring.\n */\n\n// Type exports\nexport * from './types';\n\n// Context management\nexport {\n  ContextManager,\n  ContextUtils,\n  type ContextTrace,\n  globalContextManager,\n  getCurrentContext,\n  getCurrentCorrelationId,\n  setContext,\n  setCorrelationId,\n  runWithContext,\n  runWithContextAsync,\n  withContext,\n} from './Context';\n\n// Metrics and performance\nexport {\n  globalMetrics,\n  type MetricStats,\n  MetricsRegistry,\n  PerformanceProfiler,\n  globalProfiler,\n  counter,\n  gauge,\n  histogram,\n  time,\n  timeAsync,\n  Profile,\n  startTimer as metricsStartTimer,\n} from './Metrics';\n\n// Structured logging\nexport {\n  StructuredLogger,\n  LoggerFactory,\n  LogLevel,\n  ConsoleDestination,\n  FileDestination,\n  LevelFilter,\n  ModuleFilter,\n  logger,\n  globalLogger,\n  debug,\n  info,\n  warn,\n  error,\n  fatal,\n  startTimer,\n  metric,\n  createLogger,\n  createConsoleLogger,\n  createFileLogger,\n  createMultiDestinationLogger,\n} from './Logger';\n\n// Import for internal use\nimport { globalLogger, LoggerFactory } from './Logger';\nimport { \n  counter, \n  gauge, \n  histogram, \n  time, \n  timeAsync \n} from './Metrics';\nimport { \n  setContext, \n  setCorrelationId, \n  runWithContext, \n  runWithContextAsync \n} from './Context';\n\n/**\n * Telemetry system initialization and configuration\n */\nexport class TelemetrySystem {\n  private static initialized = false;\n  private static config: any = null;\n\n  /**\n   * Initialize the telemetry system with configuration\n   */\n  public static initialize(config?: any): void {\n    if (TelemetrySystem.initialized) {\n      return;\n    }\n\n    TelemetrySystem.config = config;\n    TelemetrySystem.initialized = true;\n\n    // Initialize subsystems\n    globalLogger.info('Telemetry system initialized', {\n      operation: 'telemetry_init',\n      module: 'telemetry',\n    }, {\n      config_provided: !!config,\n      timestamp: Date.now(),\n    });\n  }\n\n  /**\n   * Check if telemetry system is initialized\n   */\n  public static isInitialized(): boolean {\n    return TelemetrySystem.initialized;\n  }\n\n  /**\n   * Get current configuration\n   */\n  public static getConfig(): any {\n    return TelemetrySystem.config;\n  }\n\n  /**\n   * Shutdown telemetry system\n   */\n  public static async shutdown(): Promise<void> {\n    if (!TelemetrySystem.initialized) {\n      return;\n    }\n\n    globalLogger.info('Telemetry system shutting down', {\n      operation: 'telemetry_shutdown',\n      module: 'telemetry',\n    });\n\n    // Flush all pending logs and metrics\n    globalLogger.flush();\n    \n    TelemetrySystem.initialized = false;\n  }\n}\n\n/**\n * Default telemetry initialization for quick setup\n */\nexport const initializeTelemetry = (config?: any) => TelemetrySystem.initialize(config);\n\n/**\n * Quick access to commonly used telemetry functions\n */\nexport const telemetry = {\n  // Logging\n  debug: (message: string, context?: Record<string, any>, metadata?: Record<string, any>) => \n    globalLogger.debug(message, context, metadata),\n  info: (message: string, context?: Record<string, any>, metadata?: Record<string, any>) => \n    globalLogger.info(message, context, metadata),\n  warn: (message: string, context?: Record<string, any>, metadata?: Record<string, any>) => \n    globalLogger.warn(message, context, metadata),\n  error: (message: string, error?: Error | Record<string, any>, metadata?: Record<string, any>) => \n    globalLogger.error(message, error, metadata),\n  fatal: (message: string, error?: Error | Record<string, any>, metadata?: Record<string, any>) => \n    globalLogger.error(message, error, metadata), // Map fatal to error\n  \n  // Metrics\n  counter,\n  gauge,\n  histogram,\n  time,\n  timeAsync,\n  \n  // Context\n  setContext,\n  setCorrelationId,\n  runWithContext,\n  runWithContextAsync,\n  \n  // System\n  initialize: initializeTelemetry,\n  shutdown: TelemetrySystem.shutdown,\n  isInitialized: TelemetrySystem.isInitialized,\n} as const;\n"],"names":["ErrorCategory","ErrorSeverity","ChemicalEquationBalancer","Stoichiometry","AdvancedCache","EventEmitter","CREBValidationError","EnhancedChemicalEquationBalancer","ThermodynamicsCalculator","ChemicalDatabaseManager","NISTWebBookIntegration","ServiceLifetime","ConfigManager","fs","container","globalContainer","CircuitBreakerState","RetryStrategy","TaskPriority","TaskStatus","WorkerStatus","CalculationType","TaskQueue","__filename","fileURLToPath","__dirname","dirname","WorkerPool","join","Worker","PluginContext","PluginPermission","PluginState","PluginPriority","path","AsyncLocalStorage","randomUUID","performance","LogLevel"],"mappings":"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AAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,IAAI;AACV,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,GAAG,EAAE,KAAK;AACV,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,GAAG,EAAE,MAAM;AACX,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,MAAM;AACZ,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,IAAI,EAAE,KAAK;AACX,I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,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;AACjD,YAAA,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;AACjD,YAAA,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;;AAGjD,YAAA,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;AAClD,YAAA,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;AAClD,YAAA,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;AAClD,YAAA,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;AAClD,YAAA,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;AAClD,YAAA,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;AAClD,YAAA,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;AAClD,YAAA,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;AAClD,YAAA,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;AAClD,YAAA,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,I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AI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;AACpD,YAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI;AACvD,YAAA,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AACzD,YAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI;AACzD,YAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAC1D,YAAA,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AACzD,YAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAC1D,YAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AACzD,YAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAC1D,YAAA,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AACzD,YAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAC1D,YAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,E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"}